[{"id":0,"href":"/OS/0_intro/","title":"0. Introduction","parent":"Operating Systems","content":" What is an Operating System? Abstract view of Components of Computer Computer system structure Computer system organization Computer-System operation Common functions of interrupt Interrupt: Timeline I/O cycle 2 methods for handling I/O Memory Secondary storage Memory hierarchy Multi-programming (batch systems) Multi-tasking (time-sharing) Memory layout for multiprogramming systems OS protection: dual-mode operation Transition from user mode to kernel mode Process management Process management activities Memory management File-system management Caching Characteristics of various types of storage Migration of data \u0026ldquo;A\u0026rdquo; from disk to register Protection and security Computer-system architecture Symmetric multiprocessing architecture Dual-core design Non-uniform memory access (NUMA) systems Clustered system System interfaces Basic shell commands Exercise (cmds) What is an Operating System? A program that acts as an intermediary between a user of a computer and the computer hardware. Operating system goals: Execute user programs and make solving user problems easier. Make the computer system convenient to use. Use the computer hardware in an efficient manner. Abstract view of Components of Computer Computer system structure Computer system can be divided into 4 components: Hardware: provides basic computing resources: CPU, memory, I/O devices, etc. Operating system: controls and coordinates use of hardware among various application and users. Application programs: solve the computing problems of the users: Word processors, compilers, web browsers, database systems, video games,\u0026hellip; Users: people, machines, other computers. Computer system organization Computer-system operation One or more CPUs, device controllers connect through common bus providing access to shared memory. Concurrent execution of CPUs and devices competing for memory cycles. Computer-System operation I/O devices and the CPU can execute concurrently. Each device has a controller that manages it, with a local buffer and a device driver to provide APIs. The device driver moves data between main memory and the local buffer, which is generally mapped in memory. I/O occurs between the device and the local buffer of the controller. The device controller signals the completion of its operation to the CPU through an interrupt. Common functions of interrupt Interrupts transfer control to the interrupt service routine, typically through the interrupt vector, which holds the addresses of all the service routines. The interrupt architecture must save the address of the interrupted instruction so that execution can return to it after the interrupt is handled. An interrupt-driven OS relies on interrupts to perform its functions. Interrupt: Timeline I/O cycle 2 methods for handling I/O Non-blocking: after I/O starts, control returns to user program without waiting for I/O to complete. Blocking: after I/O starts, control does not return to user program until I/O completes. Process blocking is implemented by the OS. Memory Main memory: storage media that the CPU can access directly. Typically volatile (contents lost when power is off). Typically random-access memory in the form of DRAM (Dynamic Random Access Memory). Secondary storage: extension of main memory that provides large amounts of non-volatile storage, but is slower than main memory. Secondary storage HDD (Hard Disk Drive): rigid metal or glass platters covered with magnetic recording material. Disk surface is logically divided into tracks and subdivide into sectors. The disk controller determines the logical interaction between the disk and the computer. NVM (Non-Volatile Memory) devices: faster than HDD, non-volatile: Various technologies: NAND flash, 3D XPoint, etc. Becoming more popular due to price drop and performance increase. Memory hierarchy Caching: copying data from a slower storage device to a faster one (main memory can be viewed as a cache for secondary storage). Register are managed by the programmer or compilers. Processor caches are managed by the hardware. Main memory and secondary storage are managed by the OS. Multi-programming (batch systems) Several jobs may be launched at the same time. Multiprogramming organize jobs (code and data) so CPU always has a job to execute. A subset of total jobs in system is kept in memory. One job selected and run via job scheduling. When job has to wait for I/O, it is swapped out for another job. Multi-tasking (time-sharing) Interactive computing is achieved through frequent switching between jobs, requiring short job execution times. Multiple programs running in memory are called processes. CPU time-sharing occurs when multiple processes are ready to run at the same time. Swapping is used to manage processes in and out of memory. Virtual memory enables execution of processes larger than physical memory. Memory layout for multiprogramming systems OS protection: dual-mode operation Dual-mode operation allows the OS to protect itself and user programs through user mode and kernel mode . The mode bit, provided by hardware, indicates the current mode and distinguishes between user and kernel code. How do we guarantee that the user doesn\u0026rsquo;t change the mode bit? System calls change the mode to kernel, and returning from a system call changes it back to user mode. Privileged instructions can only be executed in kernel mode. Transition from user mode to kernel mode Process management A process is an active program in execution that requires resources to accomplish its task Resources needed by a process may include CPU, memory, I/O, files, and initialization data Processes must release any reusable resources upon termination Each process has a program counter that determines the location of the next instruction to execute The system can run multiple processes concurrently on one or more CPUs, with concurrency achieved through CPU multiplexing Process management activities The operating system is responsible for the following activities in connection with process management\nProcess creation and deletion Process suspension and resume Process synchronization Process communication Deadlock handling Memory management Program execution requires certain instructions and data to be in memory Memory management optimizes CPU utilization and computer response by tracking and managing memory usage Memory management activities include: Tracking memory usage and allocation Deciding which processes and data to move in and out of memory Allocating and de-allocating memory space as needed File-system management The OS provides a uniform, logical view of information storage through the use of files and directories Different storage media, such as disk drives and tape drives, have varying properties including access speed, capacity, data transfer rate, and access method File system management activities include: Creating and deleting files and directories Providing tools to manipulate files and directories Mapping files onto secondary storage Backing up files onto stable storage media Access control is often implemented to determine who can access which files and directories. Caching Caching is a technique used to improve access to data by temporarily copying it from slower to faster storage The faster storage, known as a cache, is checked first to see if the requested data is available If the data is in the cache, it is accessed directly from there, otherwise it is copied to the cache and accessed from there Caches are typically smaller than the storage they are caching, so cache management is an important design problem that involves deciding the cache size and replacement policy. Characteristics of various types of storage Migration of data \u0026ldquo;A\u0026rdquo; from disk to register In multitasking environments, it is important to ensure that the most recent value is used, regardless of where it is stored in the storage hierarchy. In a multiprocessor environment, cache coherency must be provided in hardware to ensure that all CPUs have the most recent value in their cache. In a distributed environment, the situation is even more complex, as several copies of a datum can exist. Protection and security Protection refers to mechanisms that control access to resources defined by the operating system. Security involves defending the system against internal and external attacks, such as denial-of-service, worms, viruses, identity theft, and theft of service. Users are typically distinguished by their user IDs and security IDs, which include a name and a number. User IDs are associated with all files and processes belonging to that user to determine access control. Group identifiers allow a set of users to be defined and their access controlled, and are also associated with each process and file. Privilege escalation allows a user to change to an effective ID with more rights. Computer-system architecture Most systems use a single general-purpose processor, which can be multi-core. Some systems also have special-purpose processors. Multiprocessor systems, also known as parallel systems or tightly-coupled systems, are growing in use and importance. They offer increased throughput, economy of scale, and increased reliability through graceful degradation or fault tolerance. There are two types of multiprocessor systems: asymmetric multiprocessing, in which each processor is assigned a specific task, and symmetric multiprocessing, in which each processor performs all tasks. Symmetric multiprocessing architecture Dual-core design Non-uniform memory access (NUMA) systems Clustered system Clustered systems are groups of multiple systems working together, typically sharing storage through a storage-area network (SAN). They provide a high-availability service that can survive failures. There are two main types of clustering: asymmetric clustering, in which one machine is in hot standby mode, and symmetric clustering, in which multiple nodes are running applications and monitoring each other. Clustered systems are used for a variety of purposes, including high-performance computing and big data computing. System interfaces Command line interpreter Graphical user interface System application programming interface Basic shell commands Command Description man [command] Display the manual page for the specified command cd /path/to/directory Change directory to the specified path ls [options] [path] List the contents of the specified path cat [options] [file] Concatenate the specified file to standard output mkdir [options] [directory] Make a new directory cp [options] [source] [destination] Copy the specified source file to the specified destination mv [options] [source] [destination] Move the specified source file to the specified destination rm [options] [file] Remove the specified file chmod [options] [permissions] [file] Change mode of the specified file chown [options] [user] [file] Change owner of the specified file df [options] Display the disk free space du [options] [file] Display the disk usage of the specified file find [options] [path] [expression] Find files in the specified path that match the specified expression grep [options] [pattern] [file] Grep for the specified pattern in the specified file nano [options] [file] Nano text editor kill [options] [process] Kill the specified process less [options] [file] Less text viewer ln [options] [source] [destination] Link the specified source file to the specified destination passwd [options] [user] Set/change the password of the specified user ps [options] Process Status pwd Print working directory ssh [options] [user]@host Remote login to another machine with secure shell su [options] [user] Switch to another user head [options] [file] Display the first n heading lines of the specified file tail [options] [file] Display the last n tailing lines of the specified file tar [options] [file] Tape archive (compress) the specified file top Top process viewer (like task manager) touch [options] [file] Create an empty file who [options] Who is logged in wget [options] [url] Web get the specified URL Exercise (cmds) find Find all the core files in a directory (recursive) Remove them chmod Make a file executable Make a directory accessible grep Find the occurrence of a string in a file ps/kill Create a process and kill it ln Create a symbolic link Create a hard link apt get install Install a ssh server ssh Connect to the ssh server wget Download a file from the internet tar Compress a file Decompress a file pipe Count the number of firefox processes running ","description":"What is an Operating System? Abstract view of Components of Computer Computer system structure Computer system organization Computer-System operation Common functions of interrupt Interrupt: Timeline I/O cycle 2 methods for handling I/O Memory Secondary storage Memory hierarchy Multi-programming (batch systems) Multi-tasking (time-sharing) Memory layout for multiprogramming systems OS protection: dual-mode operation Transition from user mode to kernel mode Process management Process management activities Memory management File-system management Caching Characteristics of various types of storage Migration of data \u0026ldquo;A\u0026rdquo; from disk to register Protection and security Computer-system architecture Symmetric multiprocessing architecture Dual-core design Non-uniform memory access (NUMA) systems Clustered system System interfaces Basic shell commands Exercise (cmds) What is an Operating System?"},{"id":1,"href":"/ProbStats/Exercises/01/","title":"01. Ex. Basic Prob. 1","parent":"Exercises","content":" Exercise 1 Exercise 2 Exercise 3 Exercise 4 Exercise 5 Exercise 6 Exercise 1 a) Consider rolling a six-sided dice. TThe set of outcomes where the roll is:\nA: an even number. B: greater than 3. Calculate and compare the sets on both side of De Morgan\u0026rsquo;s law.\n$(A \\cup B)^c = A^c \\cap B^c$ $(A \\cap B)^c = A^c \\cup B^c$ Solution ↕ $A = {2,4,6}$\n$B = {4,5,6}$\n$(A \\cup B) = {2,4,5,6}$ =\u003e $(A \\cup B)^c = {1,3}$\n$A^c = {1,3,5}$ and $B^c = {1,2,3}$ =\u003e $A^c \\cap B^c = {1,3}$\n=\u003e $(A \\cup B)^c = A^c \\cap B^c$\n$(A \\cap B) = {4,6}$ =\u003e $(A \\cap B)^c = {1,2,3,5}$ $A^c = {1,3,5}$ and $B^c = {1,2,3}$ =\u003e $A^c \\cup B^c = {1,2,3,5}$ =\u003e $(A \\cap B)^c = A^c \\cup B^c$\nb) Prove that $P(A^c \\cap B^c) = 1 - P(A) - P(B) + P(A \\cap B)$ Solution ↕ $P(A^c \\cap B^c) = P(A^c) \\cdot P(B^c)$ $P(A^c) = 1 - P(A)$ $P(B^c) = 1 - P(B)$ $P(A^c \\cap B^c) = (1 - P(A)) \\cdot (1 - P(B))$ $P(A^c \\cap B^c) = 1 - P(A) - P(B) + P(A \\cap B)$ c) Consider events A and B such that\n$P(A) = \\frac{1}{2}$ $P(A \\cup B) = \\frac{3}{4}$ $P(B^c) = \\frac{5}{8}$ Find\n$P(A \\cap B)$ $P(A^c \\cap B^c)$ $P(A \\cup B^c)$ $P(B \\cap A^c)$ Solution ↕ $P(B) = 1 - P(B^c) = \\frac{3}{8}$\n$P(A \\cap B) = 1 - P(A \\cup B) = 1 - \\frac{3}{4} = \\frac{1}{4}$ $P(A^c \\cap B^c) = 1 - P(A^c \\cup B^c) = 1 - (1 - P(A) - P(B) + P(A \\cap B)) = \\frac{1}{2} - (1-\\frac{1}{2}-\\frac{3}{8}+\\frac{1}{4}) = \\frac{1}{8}$ $P(A \\cup B^c) = P(A) + P(B^c) - P(A \\cap B^c) = P(A) + P(B^c) - (1-P(A \\cup B^c))$ $P(B \\cap A^c) = 1 - P(B^c \\cap A) = \\frac{3}{8} - \\frac{1}{8} = \\frac{1}{4}$ Exercise 2 A Four-sided dice is rolled repeatedly, until the first time (if ever) that an even number is obtained. What is the sample space of this experiment?\nSolution ↕ The sample space is as big as the number of possible outcomes, which is unlimited in this case, but not infinite. Exercise 3 A ball is drawn at random from a box with 6 red, 4 white, 5 blue balls. Probability when:\na) Not red\nSolution ↕ Total number of balls: $6 + 4 + 5 = 15$\nProb of $white$ = $\\frac{4}{15}$\nProb of $blue$ = $\\frac{5}{15}$\n$P(\\text{not red}) = P(\\text{white}) + P(\\text{blue}) = \\frac{4}{15} + \\frac{5}{15} = \\frac{9}{15}$ b) Red or white Solution ↕ Prob of $red$ = $\\frac{6}{15}$\nProb of $white$ = $\\frac{4}{15}$\n$P(\\text{red or white}) = P(\\text{red}) + P(\\text{white}) = \\frac{6}{15} + \\frac{4}{15} = \\frac{10}{15}$ c) Red and white\nSolution ↕ $P(\\text{red and white}) = P(\\text{red}) \\cdot P(\\text{white}) = \\frac{6}{15} \\cdot \\frac{4}{15} = \\frac{24}{225}$ Exercise 4 Prob of getting job a: $0.8$\nProb of getting job b: $0.6$\nProb of getting job a and b: $0.5$ Prob of getting job a or b?\nSolution ↕ $P(\\text{job a or b}) = P(\\text{job a}) + P(\\text{job b}) - P(\\text{job a and b}) = 0.8 + 0.6 - 0.5 = 0.9$ Exercise 5 Out of the students in a class:\n60% genius. 70% love chocolate. 40% genius and love chocolate. Prob of not being a genius nor love chocolate?\nSolution ↕ Genius or love chocolate: $0.6 + 0.7 - 0.4 = 0.9$ Not genius nor love chocolate: $1 - 0.9 = 0.1$ Exercise 6 Three friends, Rick, Brenda and Ali, go to a football match but forget to say which entrance to the ground they will meet at. There are four entrances A, B, C and D. Each friend chooses an entrance independently.\nThe probability that Rick chooses entrance A is $\\frac{1}{3}$. The probabilities that he chooses entrances B, C or D are all equal. Brenda is equally likely to choose any of the four entrances. The probability that Ali chooses entrance C is $\\frac{2}{7}$ and the probability that he chooses entrance D is $\\frac{3}{5}$. The probabilities that he chooses the other two entrances are equal. a) Find the probability that at least 2 friends choose entrance B. Solution ↕ Friend Entrance A Entrance B Entrance C Entrance D Rick $\\frac{1}{3}$ $\\frac{1}{9}$ $\\frac{1}{9}$ $\\frac{1}{9}$ Brenda $\\frac{1}{4}$ $\\frac{1}{4}$ $\\frac{1}{4}$ $\\frac{1}{4}$ Ali $\\frac{2}{35}$ $\\frac{2}{35}$ $\\frac{2}{7}$ $\\frac{3}{5}$ $P(\\text{at least 2 B}) = P(\\text{2 B}) + P(\\text{3 B})$\n$P(\\text{2 B}) =$\n$P(\\text{Rick B}) \\cdot P(\\text{Brenda B}) \\cdot P(\\text{Ali not B})$ $+\\ P(\\text{Rick B}) \\cdot P(\\text{Brenda not B}) \\cdot P(\\text{Ali B})$ $+\\ P(\\text{Rick not B}) \\cdot P(\\text{Brenda B}) \\cdot P(\\text{Ali B})$ $+\\ P(\\text{Rick B}) \\cdot P(\\text{Brenda B}) \\cdot P(\\text{Ali B})$ -\u003e $P(2\\ B) = \\frac{1}{9} \\cdot \\frac{1}{4} \\cdot \\frac{2}{35} + \\frac{1}{3} \\cdot \\frac{1}{4} \\cdot \\frac{1}{4} + \\frac{1}{3} \\cdot \\frac{1}{4} \\cdot \\frac{1}{4} + \\frac{1}{3} \\cdot \\frac{1}{4} \\cdot \\frac{1}{4} = \\frac{1}{1080} + \\frac{1}{144} + \\frac{1}{144} + \\frac{1}{144} = \\frac{1}{9}$\nb) Find the probability that the 3 friends choose the same entrance.\nSolution ↕ $P(\\text{same entrance}) = P(A) + P(B) + P(C) + P(D)$ $P(A) = P(\\text{Rick A} \\cdot P(\\text{Brenda A}) \\cdot P(\\text{Ali A}))$ $P(B) = P(\\text{Rick B} \\cdot P(\\text{Brenda B}) \\cdot P(\\text{Ali B}))$ $P(C) = P(\\text{Rick C} \\cdot P(\\text{Brenda C}) \\cdot P(\\text{Ali C}))$ $P(D) = P(\\text{Rick D} \\cdot P(\\text{Brenda D}) \\cdot P(\\text{Ali D}))$ $\\Rightarrow P(same\\ entrance) = \\frac{1}{3} \\cdot \\frac{1}{4} \\cdot \\frac{2}{35} + \\frac{1}{9} \\cdot \\frac{1}{4} \\cdot \\frac{2}{35} + \\frac{1}{9} \\cdot \\frac{1}{4} \\cdot \\frac{2}{7} + \\frac{1}{9} \\cdot \\frac{1}{4} \\cdot \\frac{3}{5} = \\frac{1}{1080} + \\frac{1}{1080} + \\frac{1}{252} + \\frac{1}{180} = \\frac{1}{180}$ Exercise 7 Roll 2 fair 6-sided dice. Each of the 36 possible outcomes is equally likely.\na) Find the prob that double are rolled.\nSolution ↕ 1 2 3 4 5 6 1 x 2 x 3 x 4 x 5 x 6 x $P(\\text{double}) = \\frac{6}{36} = \\frac{1}{6}$ b) Given the roll results is a sum of 4 or less, find the prob that the roll results are double.\nSolution ↕ 1 2 1 x 2 x $\\Omega = 4 = {(1;1); (1;2); (2;1); (2;2)}$ $Double\\ are\\ rolled: {(1;1); (2;2)}$ $P(\\text{double} | \\text{sum of 4 or less}) = \\frac{2}{4} = \\frac{1}{2}$ c) Prob that at least one is a 6.\nSolution ↕ 1 2 3 4 5 6 1 x 2 x 3 x 4 x 5 x 6 x x x x x x $P(at\\ least\\ one\\ is\\ 6) = \\frac{11}{36}$ Exercise 8 Roll 2 dice, assume that they are fair.\na) Find the prob that the sum of the roll results is 7.\nSolution ↕ 1 2 3 4 5 6 1 x 2 x 3 x 4 x 5 x 6 x $P(\\text{sum of 7}) = \\frac{6}{36} = \\frac{1}{6}$ b) Find the prob that the sum of the roll results is 7 or 11.\nSolution ↕ 1 2 3 4 5 6 1 x 2 x 3 x 4 x 5 x x 6 x x $P(\\text{sum of 7 or 11}) = \\frac{8}{36} = \\frac{2}{9}$\n$P(\\text{not sum of 7 or 11}) = 1 - P(\\text{sum of 7 or 11}) = 1 - \\frac{2}{9} = \\frac{7}{9}$ Exercise 9 A group has 25 boys: Chess club: 9 Debating club: 8 Neither: 10 a) How many member only in chess club or only in debating club or both?\nSolution ↕ Only in chess club = 25 - 10 - 8 = 7 Only in debating club = 25 - 10 - 9 = 6 In both = 9 + 8 - 7 - 6 = 2 b) Prob of choosing a member:\nOnly in chess or debating club Exactly one of chess or debating club Solution ↕ $P(\\text{in chess or debating club}) = \\frac{7 + 6 + 2}{25} = \\frac{15}{25}$ $P(\\text{exactly one of chess or debating club}) = \\frac{7 + 6}{25} = \\frac{13}{25}$ Exercise 10 A group has 27 tourists: 15 visited Angola (A) 8 visited Burundi (B) 12 visited Cameroon (C) 2 visited all 3 countries 21 visited only 1 country Those who visited Angola have also visited another country Those who not visited Angola, 5 visited Burundi only. a) Draw a Venn diagram.\nb) Find the number of tourists in set $B^c$ and describe them.\nSolution ↕ $B^c = 27 - 8 = 19$ tourists not visited Burundi c) Describe the tourists in set $(A \\cup B) \\cap C^c$ and state how many of them there are.\nSolution ↕ $(A \\cup B) \\cap C^c = (15 + 8) - 12 = 11$ tourists visited at least 1 country but not visited Cameroon d) Prob of a tourist visited at least 2 countries.\nSolution ↕ $P(\\text{visited at least 2 countries}) = \\frac{27 - 21}{27} = \\frac{6}{27}$ ","description":"Exercise 1 Exercise 2 Exercise 3 Exercise 4 Exercise 5 Exercise 6 Exercise 1 a) Consider rolling a six-sided dice. TThe set of outcomes where the roll is:\nA: an even number. B: greater than 3. Calculate and compare the sets on both side of De Morgan\u0026rsquo;s law.\n$(A \\cup B)^c = A^c \\cap B^c$ $(A \\cap B)^c = A^c \\cup B^c$ Solution ↕ $A = {2,4,6}$\n$B = {4,5,6}$"},{"id":2,"href":"/AlgebraicStructures/Exercises/01/","title":"01. Ex. Groups","parent":"Exercises","content":" Exercise 1 Show that $\\mathbb{R}^* = \\mathbb{R} \\backslash \\text{\\{} 0 \\text{\\}}$ is a group under multiplication.\nSolution ↕ Let $a$ and $b$ be elements of $\\mathbb{R}^*$. Then $ab = ab \\cdot 1 = ab \\cdot \\frac{1}{ab} = \\frac{ab}{ab} = 1$. Exercise 2 Give the group $\\mathbb{R}^*$ and $\\mathbb{Z}$, let $G = \\mathbb{R}^* \\times \\mathbb{Z}$. Define a binary operation $\\circ$ on $G$ by $(a;m) \\circ (b;n) = (ab;m+n)$. Show that $G$ is a group under this operation.\nExercise 3 Show that addition and multiplication mod $n$ are associative operations in $\\mathbb{Z}$.\nExercise 4 Let $G$ be a group and suppose that $(ab)^2 = a^2b^2$ for all $a$ and $b$ in $G$. Prove that $G$ is an abelian group.\nExercise 5 Let $S = \\mathbb{R} \\backslash \\text{\\{} -1 \\text{\\}}$ and define a binary operation on $S$ by $a \\circ b = a + b + ab$. Prove that $(S; \\circ)$ is an abelian group.\nExercise 6 Let $a$ and $b$ be elements of a group $G$. If $a^4b = ba$ and $a^3 = e$, prove that $ab = ba$.\nExercise 7 If $xy = x^{-1}y^{-1}$ for all $x$ and $y$ in a group $G$, prove that $G$ must be abelian.\nSolution ↕ Let $x$ and $y$ be elements of $G$. Then $xy = x^{-1}y^{-1} = (xy)^{-1} = y^{-1}x^{-1} = yx$. Hence $G$ is abelian.\nDef 1 - prop 3 Exercise 8 Let $a$ be an element in a group. Prove that $a^n = (a^{-1})^n$.\nSolution ↕ Let $n$ be a positive integer. Then $a^n = a \\cdot a^{n-1} = a \\cdot (a^{-1})^{n-1} = (a^{-1})^{n-1} \\cdot a = (a^{-1})^n$. Exercise 9 Let $a$ and $x$ be elements in a group $G$. Prove that $ax = xa$ if and only if $a^{-1}x = xa^{-1}$.\nExercise 10 Let $a$ and $b$ be elements of a group $G$. Assume that $a$ has order $5$ and $a^3b = ba^3$. Prove that $ab = ba$.\nExercise 11 Let $a$ and $b$ be integers. Prove that the subset $a\\mathbb{Z} + b\\mathbb{Z} = {ak + bl \\mid k \\in \\mathbb{Z}}$ is a subgroup of $\\mathbb{Z}$.\n","description":"Exercise 1 Show that $\\mathbb{R}^* = \\mathbb{R} \\backslash \\text{\\{} 0 \\text{\\}}$ is a group under multiplication.\nSolution ↕ Let $a$ and $b$ be elements of $\\mathbb{R}^*$. Then $ab = ab \\cdot 1 = ab \\cdot \\frac{1}{ab} = \\frac{ab}{ab} = 1$. Exercise 2 Give the group $\\mathbb{R}^*$ and $\\mathbb{Z}$, let $G = \\mathbb{R}^* \\times \\mathbb{Z}$. Define a binary operation $\\circ$ on $G$ by $(a;m) \\circ (b;n) = (ab;m+n)$. Show that $G$ is a group under this operation."},{"id":3,"href":"/OOP/01_Intro/","title":"01. Introduction to OOP","parent":"Object Oriented Programming","content":" 1. Contents 2. Computer Programming 3. Programming languages 3.1. Machine language 3.2 Assembly language 3.3 High-level languages 3.3.1. Classifying high-level languages 3.3.1.1 Procedure programming languages 3.3.1.2 Object oriented programming languages 1. Contents Brief history of computer programming. Procedure programming. Object oriented programming. 2. Computer Programming A computer program is a list of instructions that tell the computer what to do. Example of a simple Python program: print(\u0026#34;Hello World!\u0026#34;) 3. Programming languages 3 main categories of programming languages: 3.1. Machine language Composed of binary digits (0s and 1s). IS the \u0026ldquo;native\u0026rdquo; language of the computer, but is very difficult to write and understand. Example of machine codes 3.2 Assembly language Computer instructions are represented in symbolic codes. Needs to be translated into machine codes before processing. Example of assembly codes: MOV dx,msg2 ; Move the address of msg2 into dx mov cx,msg2len ; Move the length of msg2 into cx call PrintString ; Call the PrintString procedure Assembly language is a step towards easier programming. 3.3 High-level languages Syntax is similar to human languages. Need to be compiled into machine codes for executing. Example of high-level languages: #include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Hello World!\u0026#34;); return 0; } High-level language is a big step towards easier programming. 3.3.1. Classifying high-level languages Historically, high-level languages are divided into 2 categories: Procedure programming languages. Object oriented programming languages. 3.3.1.1 Procedure programming languages Procedural programming is a programming paradigm, based on the concept of the procedure call, consists of a sequential execution of a series of instructions to be performed by the computer. #include \u0026lt;stdio.h\u0026gt; int main() { int a, b, sum; printf(\u0026#34;Enter two numbers: \u0026#34;); scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;a, \u0026amp;b); sum = a + b; printf(\u0026#34;Sum = %d\u0026#34;, sum); return 0; } In procedural programming, computer programs divide into small parts called procedures or functions. 6 sequential computation steps Some procedure programming languages: C C++ Python JavaScript PHP Ruby \u0026hellip; 3.3.1.2 Object oriented programming languages Object-oriented programming (OOP) is a programming paradigm based on the concept of \u0026ldquo;objects\u0026rdquo;, which can contain data, in the form of fields, often known as properties; and code, in the form of procedures, often known as methods. Key idea: \u0026ldquo;The real world can be described as a collection of objects that interact.\u0026rdquo; In OOP, object is a \u0026ldquo;thing\u0026rdquo; that includes both data (properties) and code (methods). In OOP languages, programmers create programs using \u0026ldquo;blueprints\u0026rdquo; of data models called classes. Some OOP languages: Java C# Python JavaScript Perl \u0026hellip; ","description":"1. Contents 2. Computer Programming 3. Programming languages 3.1. Machine language 3.2 Assembly language 3.3 High-level languages 3.3.1. Classifying high-level languages 3.3.1.1 Procedure programming languages 3.3.1.2 Object oriented programming languages 1. Contents Brief history of computer programming. Procedure programming. Object oriented programming. 2. Computer Programming A computer program is a list of instructions that tell the computer what to do. Example of a simple Python program: print(\u0026#34;Hello World!\u0026#34;) 3. Programming languages 3 main categories of programming languages: 3."},{"id":4,"href":"/ProbStats/Exercises/02/","title":"02. Ex. Basic Prob. 2","parent":"Exercises","content":" Exercise 1 Exercise 2 Exercise 3 Exercise 4 Exercise 5 Exercise 6 Exercise 7 Exercise 8 Exercise 1 A bin contains 5 defective (that immediately fail when put in use), 10 partially defective (that fail after a couple of hours of use), and 25 acceptable transistors. A transistor is chosen at random from the bin and put into use. If it does not immediately fail, what is the probability it is acceptable?\nSolution ↕ Total number of transistors does not immediately fail: $10 + 25 = 40$. Prob of choosing an acceptable transistor: $P(A) = \\frac{25}{35} = \\frac{5}{7}$. Exercise 2 a) Tossing a coin n times, what\u0026rsquo;s the prob of getting at least 1 head?\nSolution ↕ Prob of getting no heads: $P(H) = \\frac{1}{2^n}$ Prob of getting at least 1 head: $P(H) = 1 - \\frac{1}{2^n}$ b) Tossing a coin 4 times, what\u0026rsquo;s the prob of getting at least 1 heads?\nSolution ↕ $\\Omega = 2^4 = 16$. The prob of getting 0 heads is 1: $\\text{\\{}T, T, T, T\\text{\\}}$. $P(H) = \\frac{15}{16}$. c) Rolling a dice 4 times, what is the probability of getting at least one 6?\nSolution ↕ Consider rolling once: $\\Omega = 6$. The prob of not getting a 6 is 5/6. 4 rolls are independent, so the prob of not getting a 6 is $(\\frac{5}{6})^4$. The prob of getting at least one 6 is $1 - (\\frac{5}{6})^4 = \\frac{671}{1296}$. d) How many attempts/tries are need to get the probability of getting at least one 6 of 0.99?\nSolution ↕ $P(H) = 1 - (\\frac{5}{6})^n = 0.99$. $\\Leftrightarrow (\\frac{5}{6})^n = 0.01$. $\\Leftrightarrow n = log_\\frac{5}{6}0.01 \\approx 25.26$. Exercise 3 A woman travels to work by bicycle $70%$ of the time and by scooter $30%$ of the time. If she uses her bicycle she is late 3% of the time but if she uses her scooter she is late only 2% of the time.\na) Find the probability that she is late for work on any given day.\nSolution ↕ $P(\\text{scooter late}) = \\frac{30}{100} \\times \\frac{2}{100} = \\frac{1}{150}$. $P(\\text{bicycle late}) = \\frac{70}{100} \\times \\frac{3}{100} = \\frac{1}{100}$. $P(\\text{late}) = P(\\text{scooter late}) + P(\\text{bicycle late}) = \\frac{1}{150} + \\frac{1}{100} = \\frac{11}{150}$. b) Given that the woman expects not to be late on approximately 223 days in a year, find the number of days in a year on which she works.\nSolution ↕ $P(\\text{not late}) = 1 - P(\\text{late}) = 1 - \\frac{11}{150} = \\frac{139}{150}$. $P(\\text{not late}) \\approx 0.92$. Number of days in a year: $223 \\times \\frac{1}{0.92} \\approx 243$. Exercise 4 Using a biased coin to make an unbiased decision. Minh and Nam want to choose between the Kpop music and US music by tossing a fair coin. Unfortunately, the only available coin is biased (about the bias is known by 40% and 60%). How can they use the biased coin to make a decision so that either option (Kpop music or US music) is equally likely to be chosen?\nSolution ↕ Assume that the coin is biased to heads. By tossing it twice, we can eliminate the bias of the coin. $P(\\text{\\{}H, H\\text{\\}}) = \\frac{60}{100} \\times \\frac{60}{100} = \\frac{36}{100}$. $P(\\text{\\{}T, T\\text{\\}}) = \\frac{40}{100} \\times \\frac{40}{100} = \\frac{16}{100}$. $P(\\text{\\{}H, T\\text{\\}}) = \\frac{60}{100} \\times \\frac{40}{100} = \\frac{24}{100}$. $P(\\text{\\{}T, H\\text{\\}}) = \\frac{40}{100} \\times \\frac{60}{100} = \\frac{24}{100}$. $\\Rightarrow P(\\text{\\{}H, H\\text{\\}}) = P(\\text{\\{}T, T\\text{\\}})$. Exercise 5 It is required to put 3-math, 2-history and 4-bio books placed on the shelf. Find the ways in cases:\na) no restriction on the order of books. Solution ↕ $9! = 362880$. b) all subjects must stay together. Solution ↕ # of ways to put: 3 math books: $3! = 6$. 2 history books: $2! = 2$. 4 bio books: $4! = 24$. 3 groups of books: $3!$. $\\Omega = (6+2+24) \\times 6 = 192$. c) only bio must stay together. Solution ↕ # of ways to put 4 bio books: $4! = 24$. Consider 4 bio books as one group, the # of ways to put 3 math + 2 history + 1 group of bio books: $3! \\times 2! \\times 1 = 12$. # of ways to put if bio books are together: $24 \\times 12 = 288$. Exercise 6 In how many ways can 6 people be seated at a round table if\na) they can sit in any order? Solution ↕ Anchor 1 person, the # of ways to seat the remaining 5 people: $5! = 120$. b) 2 people cannot sit next to each other? Solution ↕ Ignore 2 people, the # of ways to seat the remaining 4 people: $4! = 24$. Consider 2 people cannot sit together, anchor 1 person, the other one can sit in 3 positions. $\\Rightarrow \\Omega = 24 \\times 3 = 72$. Exercise 7 Draw top 7 cards from a deck of 52 cards well-shuffled. Find the probability of getting:\na) The 7 cards include 3 Aces Solution ↕ Ways to choose 3 Ace: $C\\binom{3}{4}$ Ways to choose 4 other cards (exclude the last Ace): $C\\binom{4}{48}$ Prob of choosing 7 cards containing 3 Ace: $P(\\text{3 Ace}) = \\frac{C\\binom{3}{4} \\times C\\binom{4}{48}}{C\\binom{7}{52}} = \\frac{4 \\times 48}{7 \\times 52} = \\frac{1}{13}$. b) The 7 cards include 2 Kings Solution ↕ Ways to choose 2 King: $C\\binom{2}{4}$ Ways to choose 5 other cards (exclude 2 other Kings): $C\\binom{5}{48}$ Prob of choosing 7 cards containing 2 King: $P(\\text{2 King}) = \\frac{C\\binom{2}{4} \\times C\\binom{5}{48}}{C\\binom{7}{52}} = \\frac{6 \\times 48}{7 \\times 52} = \\frac{2}{13}$. c) The 7 cards include 3 Aces or 2 Kings or both Solution ↕ Prob of choosing 7 cards containing 3 Ace: $P(\\text{3 Ace}) = \\frac{4 \\times 48}{7 \\times 52} = \\frac{1}{13}$. Prob of choosing 7 cards containing 2 King: $P(\\text{2 King}) = \\frac{6 \\times 48}{7 \\times 52} = \\frac{2}{13}$. Prob of choosing 7 cards containing 3 Ace and 2 King: $P(\\text{3 Ace and 2 King}) = \\frac{C\\binom{3}{4} \\times C\\binom{2}{4} \\times C\\binom{2}{48}}{C\\binom{7}{52}} = \\frac{4 \\times 6 \\times 48}{7 \\times 52} = \\frac{1}{13}$. Exercise 8 Box A: 3 red, 2 blue marbles. Box B: 2 red, 8 blue marbles. Toss a coin, if head then choose a marble from box A, else otherwise.\na) Find the probability of choosing a red marble.\nSolution ↕ $P(\\text{red from A}) = \\frac{3}{5}$. $P(\\text{red from B}) = \\frac{2}{10}$. $P(\\text{red}) = P(\\text{red from A}) \\times P(\\text{head}) + P(\\text{red from B}) \\times P(\\text{tail}) = \\frac{3}{5} \\times \\frac{1}{2} + \\frac{2}{10} \\times \\frac{1}{2} = \\frac{7}{20}$. b) Find the probability of the coin is head, given that the marble is red. Solution ↕ $P(\\text{red from I}) = 0.6 \\times 0.5$. $P(\\text{red}) = 0.6 \\times 0.5 + 0.2 \\times 0.5$. $P(\\text{box I}) = \\frac{P(\\text{red from I})}{P(\\text{red})} = \\frac{0.3}{0.4} = \\frac{3}{4}$. ","description":"Exercise 1 Exercise 2 Exercise 3 Exercise 4 Exercise 5 Exercise 6 Exercise 7 Exercise 8 Exercise 1 A bin contains 5 defective (that immediately fail when put in use), 10 partially defective (that fail after a couple of hours of use), and 25 acceptable transistors. A transistor is chosen at random from the bin and put into use. If it does not immediately fail, what is the probability it is acceptable?"},{"id":5,"href":"/OOP/02_Java/","title":"02. Introduction to Java","parent":"Object Oriented Programming","content":" 1. Brief history of Java 2. Java platforms and applications 3. Writing your first Java program Installing Java Editor/IDE: Running Java Codes Java Virtual Machine (JVM) Writing your first Java program 4. Compile and run your first Java program 5. Code structure Application with more than one class Compile and run 6. Basic data types and operators Data types Operators Unary operators Binary operators Ternary operators 7. Loop control and decision making Loop control statements Example of while loop Example of do...while loop Example of for loop Decision making statements Example of if statement What else we can do? 1. Brief history of Java 1991: developed by Sun Microsystems as a small programming language for embedded household devices. Initially called Oak. Java 1.0.2 (1996), Java 1.1 (1997) \u0026ldquo;Write once, debug run anywhere\u0026rdquo; very slow became popular with Web pages running Applets Java 2 (version 1.2 - 1.4 from 1988 - 2002) much faster, powerful 3 platforms: J2SE (desktop), J2EE (enterprise), J2ME (mobile) Java 5, 6, 7, 8 (version 1.5 - 1.8 in 2004, 2006, 2011, 2014) more powerful 2. Java platforms and applications Desktop Applications - Java Standard Edition (J2SE) Java Application: normal Java application running on desktops; console or GUI Java Applet: embedded application running within Web browsers Server Applications - Java Enterprise Edition (J2EE) Web Services, JavaServer Pages (JSP), Servlet Mobile Applications - Java Micro Edition (J2ME) Why Java?\nTIOBE Programming Community Index (tiobe.com) 3. Writing your first Java program Installing Java Download and install Java Development Kit (JDK) from Oracle. Java Development Kit (JDK): javac: compiler, convert Java source code into Java bytecode java: interpreter, convert Java bytecode into machine code javadoc: documentation generator jdb: debugger Editor/IDE: VS Code JetBrains IntelliJ IDEA Neovim Running Java Codes Java source code is compiled into byte-code Byte-code is executed in an interpreter environment, called Java Virtual Machine (JVM) Java Virtual Machine (JVM) Provide Java programs with a runtime environment. Normally, provided as a software: Java Runtime Environment (JRE) Depend on specific hardware and OS. Java platform: JVM + APIs (Application Programming Interfaces) Writing your first Java program In Java, everything goes in a class. When you run a program, you run a class: load the class then start executing the class\u0026rsquo;s main() method. each Java program MUST have a main() method. 4. Compile and run your first Java program public class HelloWorld { public static void main(String[] args) { System.out.println(\u0026#34;Hello World!\u0026#34;); } } To compile HelloWorld.java:\njavac HelloWorld.java To run HelloWorld.class:\njava HelloWorld 5. Code structure Application with more than one class Two classes are stored in two separated files:\nTestGreeting.java public class TestGreeting { public static void main(String[] args) { Greeting greeting = new Greeting(); greeting.sayHello(); } } Greeting.java public class Greeting { public void sayHello() { System.out.println(\u0026#34;Hello World!\u0026#34;); } } Compile and run Compile: javac TestGreeting.java Run: java TestGreeting 6. Basic data types and operators Data types Data Type Default Value Default size Range boolean false 1 bit true or false char \u0026lsquo;\\u0000\u0026rsquo; 2 bytes 0 to 65,535 byte 0 1 byte -128 to 127 short 0 2 bytes $-\\frac{2^16}{2}$ to $\\frac{2^16}{2}-1$ int 0 4 bytes $-\\frac{2^32}{2}$ to $\\frac{2^32}{2}-1$ long 0L 8 bytes $-\\frac{2^64}{2}$ to $\\frac{2^64}{2}-1$ float 0.0f 4 bytes $1.4 \\times 10^{-45}$ to $3.4 \\times 10^{38}$ double 0.0d 8 bytes $4.9 \\times 10^{-324}$ to $1.8 \\times 10^{308}$ Operators Unary operators ++ and -- are used to increment and decrement a variable by 1. Binary operators Arithmetic operators: +, -, *, /, % Relational operators: ==, !=, \u0026gt;, \u0026lt;, \u0026gt;=, \u0026lt;= Logical operators: \u0026amp;\u0026amp;, ||, ! Bitwise operators: \u0026amp;, |, ^, ~, \u0026lt;\u0026lt;, \u0026gt;\u0026gt;, \u0026gt;\u0026gt;\u0026gt; Assignment operators: =, +=, -=, *=, /=, %=, \u0026lt;\u0026lt;=, \u0026gt;\u0026gt;=, \u0026amp;=, ^=, |= Ternary operators condition ? expression1 : expression2 7. Loop control and decision making Loop control statements while loop do...while loop for loop Example of while loop class WhileLoopExample { public static void main(String[] args) { int i = 10; while (i \u0026gt; 0) { System.out.println(i); i--; } } } Example of do...while loop class DoWhileLoopExample { public static void main(String[] args) { int i = 10; do { System.out.println(i); i--; } while (i \u0026gt; 0); } } Example of for loop class ForLoopExample { public static void main(String[] args) { for (int i = 10; i \u0026gt; 0; i--) { System.out.println(i); } } } Decision making statements if statement if...else statement switch statement Example of if statement public class IfStatementExample { public static void main(String[] args) { int i = 10; if (i \u0026gt; 0) { System.out.println(\u0026#34;i is positive\u0026#34;); } else if (i \u0026lt; 0) { System.out.println(\u0026#34;i is negative\u0026#34;); } else { System.out.println(\u0026#34;i is zero\u0026#34;); } } } What else we can do? do-while? switch? int, long, float, double, boolean,...? other Java basics? $\\rightarrow$ Java Tutorial - w3schools.com\n","description":"1. Brief history of Java 2. Java platforms and applications 3. Writing your first Java program Installing Java Editor/IDE: Running Java Codes Java Virtual Machine (JVM) Writing your first Java program 4. Compile and run your first Java program 5. Code structure Application with more than one class Compile and run 6. Basic data types and operators Data types Operators Unary operators Binary operators Ternary operators 7. Loop control and decision making Loop control statements Example of while loop Example of do."},{"id":6,"href":"/ProbStats/Exercises/03/","title":"03. Ex. Discrete Uni. Law","parent":"Exercises","content":" A. Discrete Random Variables and Probability Mass Functions Exercise 1 Exercise 2 Exercise 3 B. Expectation of random variables Exercise 4 Exercise 5 Exercise 6 Exercise 7 Exercise 8 C. Variance and standard deviation Exercise 9 Exercise 10 Exercise 11 Exercise 12 A. Discrete Random Variables and Probability Mass Functions Exercise 1 Let X represent the number of heads that can come up when tossing a coin in two cases: twice and three times. For each case, find the $PMF (p_X(x))$ corresponding to the random variable X?\nSolution ↕ Case 1: Tossing a coin twice $X$ (number of heads) can take values 0, 1, 2 $P(X=0) = 1/4$ $P(X=1) = 1/2$ $P(X=2) = 1/4$ Case 2: Tossing a coin three times $X$ (number of heads) can take values 0, 1, 2, 3 $P(X=0) = 1/8$ $P(X=1) = 3/8$ $P(X=2) = 3/8$ $P(X=3) = 1/8$ Exercise 2 Suppose that a pair of dice are to be tossed, and let the random variable X denote the sum of the points.\na) Obtain the $PMF (P(X=x))$ for X$\nSolution ↕ $X$ (sum of points) can take values from 2 to 12 Call dice 1 $D_1$ and dice 2 $D_2$ $D_1 = 1$ $D_1 = 2$ $D_1 = 3$ $D_1 = 4$ $D_1 = 5$ $D_1 = 6$ $D_2 = 1$ 2 3 4 5 6 7 $D_2 = 2$ 3 4 5 6 7 8 $D_2 = 3$ 4 5 6 7 8 9 $D_2 = 4$ 5 6 7 8 9 10 $D_2 = 5$ 6 7 8 9 10 11 $D_2 = 6$ 7 8 9 10 11 12 $ PMF(P(X=x)) = \\begin{cases} \\frac{1}{36} \u0026 \\text{if } x = 2 \\\\ \\frac{2}{36} \u0026 \\text{if } x = 3 \\\\ \\frac{3}{36} \u0026 \\text{if } x = 4 \\\\ \\frac{4}{36} \u0026 \\text{if } x = 5 \\\\ \\frac{5}{36} \u0026 \\text{if } x = 6 \\\\ \\frac{6}{36} \u0026 \\text{if } x = 7 \\\\ \\frac{5}{36} \u0026 \\text{if } x = 8 \\\\ \\frac{4}{36} \u0026 \\text{if } x = 9 \\\\ \\frac{3}{36} \u0026 \\text{if } x = 10 \\\\ \\frac{2}{36} \u0026 \\text{if } x = 11 \\\\ \\frac{1}{36} \u0026 \\text{if } x = 12 \\end{cases} $ b) Draw the graph of $P(X=x)$.\nExercise 3 MIT team has 2 soccer games:\n0.4 not losing the first game 0.7 not losing the second game MIT receives: 2 points for winning a game 1 point for drawing a game 0 points for losing a game When not losing, prob of win = prob of draw = 0.5 Find the PMF of the number of points that MIT will receive.\nSolution ↕ $X$ (number of points) can take values 0, 1, 2, 3, 4 Result 1st game 2nd game Win $0.4/2=0.2$ $0.7/2=0.35$ Draw $0.4/2=0.2$ $0.7/2=0.35$ Lose $1-0.4=0.6$ $1-0.7=0.3$ $P(X=0) = \\text{2 lose} = 0.6 \\times 0.3 = 0.18$ $P(X=1) = \\text{1 draw + 1 lose} = 0.2 \\times 0.3 + 0.6 \\times 0.35 = 0.27$ $P(X=2) = \\text{2 draw} = 0.2 \\times 0.35 = 0.07$ $P(X=3) = \\text{1 win + 1 draw} = 0.2 \\times 0.35 + 0.2 \\times 0.35 = 0.14$ $P(X=4) = \\text{2 win} = 0.2 \\times 0.35 = 0.07$ B. Expectation of random variables Exercise 4 A random variable X is defined as follows:\n$$ X = \\begin{cases} -2 \u0026amp; \\text{prob } 1/3 \\\\ 3 \u0026amp; \\text{prob } 1/2 \\\\ 1 \u0026amp; \\text{prob } 1/6 \\end{cases} $$ Find $E[X], E[2X+5], E[X^2]$.\nSolution ↕ $E[X] = \\sum_{x \\in \\text{domain}(X)} x \\times P(X=x) = (-2 \\times \\frac{1}{3}) + (3 \\times \\frac{1}{2}) + (1 \\times \\frac{1}{6}) = 1$\n$E[2X+5] = \\sum_{x \\in \\text{domain}(X)} (2x+5) \\times P(X=x) \\\\ = [(-2 \\times 2 + 5) \\times \\frac{1}{3}] + [(3 \\times 2 + 5) \\times \\frac{1}{2}] + [(1 \\times 2 + 5) \\times \\frac{1}{6}] \\\\ = \\frac{1}{3} + \\frac{11}{2} + \\frac{7}{6} = 7$\n$E[X^2] = \\sum_{x \\in \\text{domain}(X)} x^2 \\times P(X=x) \\\\ = [(-2)^2 \\times \\frac{1}{3}] + [(3)^2 \\times \\frac{1}{2}] + [(1)^2 \\times \\frac{1}{6}] \\\\ = \\frac{4}{3} + \\frac{9}{2} + \\frac{1}{6} = 6$\nExercise 5 Find the expected value for the number of girls for a family of 3 children.\nSolution ↕ $X$ (number of girls) can take values 0, 1, 2, 3 Case $X=0$: $P(X=0) = \\binom{3}{0} \\times (0.5)^0 \\times (0.5)^3 = 0.125$ Case $X=1$: $P(X=0) = \\binom{3}{1} \\times (0.5)^1 \\times (0.5)^2 = 0.375$ Case $X=2$: $P(X=0) = \\binom{3}{2} \\times (0.5)^2 \\times (0.5)^1 = 0.375$ Case $X=3$: $P(X=0) = \\binom{3}{3} \\times (0.5)^3 \\times (0.5)^0 = 0.125$ $\\Rightarrow E[X] = 0.125 \\times 0 + 0.375 \\times 1 + 0.375 \\times 2 + 0.125 \\times 3 = 1.5$ (number of girls expected) Exercise 6 A dice is rolled.\n1, 2, 3: wins nothing 4, 5: wins $3 6: wins $9 If each round cost $1, find the expected value of the game.\nSolution ↕ Possible winnings ($X$) are 0, 3, 9 $P(X=0) = \\frac{3}{6} = \\frac{1}{2}$ $P(X=3) = \\frac{2}{6} = \\frac{1}{3}$ $P(X=9) = \\frac{1}{6} $\\Rightarrow E[X] = 0 \\times \\frac{1}{2} + 3 \\times \\frac{1}{3} + 9 \\times \\frac{1}{6} = 3$ (expected winnings per round)\nCost per round is $1 Exercise 7 In a lottery there are 200 prizes of 5 dollars, 20 prizes of 25 dollars, and 5 prizes of 100 dollars. Assuming that 10000 tickets are sold. What should be the fair price to pay for one ticket?\nSolution ↕ $X$ (prize) can take values 0, 5, 25, 100 $P(X=0) = \\frac{10000 - 200 - 20 - 5}{10000} = \\frac{9765}{10000}$ $P(X=5) = \\frac{200}{10000}$ $P(X=25) = \\frac{20}{10000}$ $P(X=100) = \\frac{5}{10000}$ $\\Rightarrow E[X] = 0 \\times \\frac{9765}{10000} + 5 \\times \\frac{200}{10000} + 25 \\times \\frac{20}{10000} + 100 \\times \\frac{5}{10000} = 0.2$\nThe fair price to pay for one ticket is $0.2 Exercise 8 St. Petersburg paradox. You toss independently a fair coin and you count the number of tosses until the first tail appears. If this number is $n$, you receive $2^n$ dollars. How much would you be willing to pay to play this game? What is the expected amount that you will receive?\nC. Variance and standard deviation Exercise 9 What is the mean and variance $var(X)$ when $X$ represents the outcome when we roll a fair dice?\nSolution ↕ $E[X] = \\frac{1}{6} \\times 1 + \\frac{1}{6} \\times 2 + \\frac{1}{6} \\times 3 + \\frac{1}{6} \\times 4 + \\frac{1}{6} \\times 5 + \\frac{1}{6} \\times 6 = \\frac{21}{6} = 3.5$ $var(X) = E[(X - E[X])^2] \\\\ = \\frac{1}{6} \\times [(1-3.5)^2 + (2-3.5)^2 + (3-3.5)^2 + (4-3.5)^2 + (5-3.5)^2 + (6-3.5)^2] \\\\ = \\frac{1}{6} \\times [2.25 + 0.25 + 0.25 + 0.25 + 0.25 + 2.25] \\\\ = \\frac{1}{6} \\times \\frac{35}{2} \\\\ = \\frac{35}{12} = 2.92$ Exercise 10 Find the variance and the standard deviation of the sum obtained in tossing a pair of fair dice?\nSolution ↕ $X$ (sum of dice) can take values 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\n$P(X=2) = \\frac{1}{36}$\n$P(X=3) = \\frac{2}{36}$\n$P(X=4) = \\frac{3}{36}$\n$P(X=5) = \\frac{4}{36}$\n$P(X=6) = \\frac{5}{36}$\n$P(X=7) = \\frac{6}{36}$\n$P(X=8) = \\frac{5}{36}$\n$P(X=9) = \\frac{4}{36}$\n$P(X=10) = \\frac{3}{36}$\n$P(X=11) = \\frac{2}{36}$\n$P(X=12) = \\frac{1}{36}$\n$E[X] = \\frac{1}{36} \\times 2 + \\frac{2}{36} \\times 3 + \\frac{3}{36} \\times 4 + \\frac{4}{36} \\times 5 + \\frac{5}{36} \\times 6 + \\frac{6}{36} \\times 7 + \\frac{5}{36} \\times 8 + \\frac{4}{36} \\times 9 + \\frac{3}{36} \\times 10 + \\frac{2}{36} \\times 11 + \\frac{1}{36} \\times 12 \\\\ = \\frac{2}{36} + \\frac{6}{36} + \\frac{12}{36} + \\frac{20}{36} + \\frac{30}{36} + \\frac{42}{36} + \\frac{40}{36} + \\frac{36}{36} + \\frac{30}{36} + \\frac{22}{36} + \\frac{12}{36} \\\\ = \\frac{252}{36} = 7$\n$var(E) = E[(X - E[X])^2] \\\\ = \\frac{1}{36} \\times [(2-7)^2 + (3-7)^2 + (4-7)^2 + (5-7)^2 + (6-7)^2 + (7-7)^2 + (8-7)^2 + (9-7)^2 + (10-7)^2 + (11-7)^2 + (12-7)^2] \\\\ = \\frac{1}{36} \\times [25 + 16 + 9 + 4 + 1 + 0 + 1 + 4 + 9 + 16 + 25] \\\\ = \\frac{1}{36} \\times 110 \\\\ = \\frac{110}{36} = 3.06$\n$\\sigma_X = \\sqrt{var(X)} = \\sqrt{\\frac{110}{36}} = \\sqrt{3.06} = 1.75$\nExercise 11 For the random variable $X$ with PMF\n$$ p_X(x) = \\begin{cases} \\frac{1}{9} \u0026amp; \\text{if } x \\text{ is an integer in the range } [-4;4] \\\\ 0 \u0026amp; \\text{otherwise} \\end{cases} $$\nFind the mean and the variance of $X$.\nSolution ↕ $P(X=-4) = \\frac{1}{9}$\n$P(X=-3) = \\frac{1}{9}$\n$P(X=-2) = \\frac{1}{9}$\n…\n$P(X=4) = \\frac{1}{9}$\n$E[X] = \\frac{1}{9} \\times (-4+(-3)+(-2)+(-1)+0+1+2+3+4) \\\\ = \\frac{1}{9} \\times 0 = 0$\n$var(X) = E[(X - E[X])^2] \\\\ = \\sum_{x=-3}^{3} (x - 0)^2 \\times \\frac{1}{9} \\\\ = \\frac{1}{9} \\times (4^2 + 3^2 + 2^2 + 1^2 + 0^2 + 1^2 + 2^2 + 3^2 + 4^2) \\\\ = \\frac{1}{9} \\times 60 \\approx 6.67$\nExercise 12 Let $X$ be a random variable with PMF\n$$ p_X(x) = \\begin{cases} \\frac{x^2}{a} \u0026amp; \\text{if } x \\text{ is an integer in the range } [-3;3] \\\\ 0 \u0026amp; \\text{otherwise} \\end{cases} $$\na) Find $a$ and E[X].\nSolution ↕ Prob of $X$ being in the range $[-3;3]$ is 1\n$P(X=-3) = \\frac{(-3)^2}{a}$ $P(X=-2) = \\frac{(-2)^2}{a}$ $P(X=-1) = \\frac{(-1)^2}{a}$ $P(X=0) = \\frac{0^2}{a}$ $P(X=1) = \\frac{1^2}{a}$ $P(X=2) = \\frac{2^2}{a}$ $P(X=3) = \\frac{3^2}{a}$ $\\sum_{x=-3}^{3} \\frac{x^2}{a} = 1$\n$\\Leftrightarrow \\frac{(-3)^2}{a} + \\frac{(-2)^2}{a} + \\frac{(-1)^2}{a} + \\frac{0^2}{a} + \\frac{1^2}{a} + \\frac{2^2}{a} + \\frac{3^2}{a} = 1$ $\\Leftrightarrow \\frac{9}{a} + \\frac{4}{a} + \\frac{1}{a} + \\frac{0}{a} + \\frac{1}{a} + \\frac{4}{a} + \\frac{9}{a} = 1$ $\\Leftrightarrow \\frac{28}{a} = 1$ $\\Leftrightarrow a = 28$ $E[X] = \\frac{1}{28} \\times (-3 + (-2) + (-1) + 0 + 1 + 2 + 3) \\\\ = \\frac{1}{28} \\times 0 \\\\ = 0$\n","description":"A. Discrete Random Variables and Probability Mass Functions Exercise 1 Exercise 2 Exercise 3 B. Expectation of random variables Exercise 4 Exercise 5 Exercise 6 Exercise 7 Exercise 8 C. Variance and standard deviation Exercise 9 Exercise 10 Exercise 11 Exercise 12 A. Discrete Random Variables and Probability Mass Functions Exercise 1 Let X represent the number of heads that can come up when tossing a coin in two cases: twice and three times."},{"id":7,"href":"/OOP/03_object_class/","title":"03. Objects and Classes","parent":"Object Oriented Programming","content":" I. Classes vs. Objects 1. Important OO concepts 2. Java program 3. Objects 3.1. State 3.2. Behavior 3.3. Identity 4. Classes 5. Class vs. Object II. Designing a Class 1. Designing a class 2. Writing a class Write the class Write a tester class 3. Object Reference 4. Messaging beween objects III. Methods and Instance Variables 1. Methods - how objects behave 2. State affects behavior and vice versa 3. Instant variables vs. Local variables IV. Encapsulation and Information Hiding 1. Encapsulation 2. Information hiding 3. Rule of thumb 4. Class Access Control 4. Implementation vs. Interface I. Classes vs. Objects 1. Important OO concepts Object and Class Object state and behavior Object identity Messages Encapsulation Inheritance Polymorphism Abstraction 2. Java program Greeting.java public class Greeting { public static void main(String[] args) { System.out.println(\u0026#34;Hi there!\u0026#34;); } } TestGreeting.java public class TestGreeting { public static void main(String[] args) { Greeting greeting = new Greeting(); greeting.(); } } A Java program, when we write it, is a collection of classes. A Java program, when we run it, is a collection of objects. They do things (their methods) and ask other objects to do things (calling methods of others). A Java library contains predefined classes that we can use in our programs. 3. Objects Object is a \u0026ldquo;thing\u0026rdquo; that includes both data (properties/attributes) and functions (methods/behaviors). In OOP, objects can either do something or have something done to them. Objects in OOP have 3 essential features: State: what object jave. Behavior: what object do in response to messages. Identity: what make object unique. 3.1. State Defined by the attributes of the object and by the values of these attributes. Changes over time \u0026ldquo;Name\u0026rdquo; attribute does not change over time. \u0026ldquo;Age\u0026rdquo; attribute changes over time. 3.2. Behavior Behavior is what the object do in responding to a message 3.3. Identity Identity is what make object unique. Defined by object address or object ID Used to distinguish between objects 4. Classes A class is a blueprint/template that is used to construct objects. 5. Class vs. Object Each object has the same structure and behavior as the class from which it was created. Each object is instantiated from a class. That object is called an instance of the class. In programming, relation between \u0026ldquo;Class and Object\u0026rdquo; is similar to relation between \u0026ldquo;Data type and variable\u0026rdquo; Dog.java class Dog { int size; String breed; String name; void bark() { System.out.println(\u0026#34;Ruff! Ruff!\u0026#34;); } } Person.java class Person { String name; Date birthday; String address; Dog petDog; } II. Designing a Class 1. Designing a class When you design a class, think about the object that will be created from that class. things the object knows about itself actions the object does ShoppingCart Button knows cartContents label\ncolor does addToCart()\nremoveFromCart()\ncheckOut() setColor()\nsetLabel()\ndePress()\nunDepress() Things the object knows about itself $\\rightarrow$ instance variables $\\rightarrow$ represent object state Action the object does $\\rightarrow$ methods $\\rightarrow$ represent object behavior Song instance variables (state) title\nartist\nduration know methods (behavior) setTitle()\nsetArtist()\nsetDuration()\nplay() does 2. Writing a class Write the class class Dog { int size; //} String breed; //} instance variables String name; //} void bark() { //} System.out.println(\u0026#34;Ruff! Ruff!\u0026#34;); //} a methods } //} } DOG size\nbreed\nname bark() Write a tester class Instance variable/methods belong to an object. Thus, when accessing them, you MUST specify which object they belong to. 3. Object Reference 3 steps to declare, create \u0026amp; assign an object: Declare a reference variable of the object type.\nDog myDog= new Dog(); Create an object of the object type.\nDog mydog =new Dog(); Link the object and the reference\nDog myDog=new Dog(); Dog\u0026nbsp;myDog\u0026nbsp;= new Dog(); Note:\u0026nbsp;Refernece\u0026nbsp;is not object! 4. Messaging beween objects Sending a message to and object is actually calling a method of the object. d.bark(); Syntax: III. Methods and Instance Variables 1. Methods - how objects behave Object have state (instance variables) behavior (methods) A method can use/change value of instance variable\n$\\rightarrow$ state of the object can be changed Song instance\nvariables\n(state) title\nartist\nduration knows methods\n(behavior) setTitle()\nsetArtist()\nsetDuration()\nplay() does 2. State affects behavior and vice versa class Dog { int size; String breed; String name; void bark() { if (size \u0026gt; 14) { // state affects behavior: dogs of different sizes behave differently System.out.println(\u0026#34;Ruff! Ruff!\u0026#34;); } else { System.out.println(\u0026#34;Yip! Yip!\u0026#34;); } } void getBigger() { size = size + 5; // method changes state } } DOG size\nbreed\nname bark()\ngetBigger() class DogTestDrive { public static void main(String[] args) { Dog one = new Dog(); // name: null, breed: null, size: 0 one.size = 7; // name: null, breed: null, size: 7 Dog two = new Dog(); two.size = 13; // name: null, breed: null, size: 13 two.bark(); // Yip! Yip! two.getBigger(); // name: null, breed: null, size: 18 two.bark(); // Ruff! Ruff! one.bark(); // Yip! Yip! } } 3. Instant variables vs. Local variables Instance variables\nbelongs to an object declared inside a class but NOT within a method have default values (0, 0.0, false, null,\u0026hellip;) class Dog { int size; String name; // ... void getBigger() { size = size + 5; } } Local variables\nbelong to an method declared within a method MUST be initialized before use public class DogTestDrive { public static void main(String[] args) { Dog d = new Dog(); d.name = \u0026#34;Bruno\u0026#34;; //... int size = d.size; } } IV. Encapsulation and Information Hiding 1. Encapsulation Group related things together\nFunctions encapsulated instructions. Objects encapsulate data and functions. Bad class Person { String name; Date birthday; String address; // about his/her dog String dogName; String dogBreed; int dogSize; } Better class Dog { int size; String breed; String name; //... } class Person { String name; Date birthday; String address; Dog petDog; } 2. Information hiding Encapsulated to hide internal implementation details from outsiders: Outsiders see only interfaces. Programmers implement details of the system. What\u0026rsquo;s wrong with this code? It\u0026rsquo;s allow for a supernatural dog. $\\rightarrow$ no verification of size Object\u0026rsquo;s data is exposed $\\rightarrow$ size is accessed directly from outsider class Dog { int size; String breed; String name; //... } Dog d = new Dog(); d.size = -1; Exposed instance variables can lead to invalid states of object. What to do about it? Write set methods (setters) for instance variables. Force other codes to use the set methods instead of accessing them directly. 3. Rule of thumb Mark instance variables private. Make getters and setters and mark them public. Don\u0026rsquo;t forget to check data validity in setters. class Dog { private int size; public int getSize() { return size; } public void setSize(int s) { if (s \u0026gt; 0) { size = s; } } } Example of encapsulation public class Person { private String name; // mark instance variables private private int age; public int getAge() { // mark getters and make them public return age; } public String getName() { return name; } public void setAge(int newAge) { // mark setters and make them public if (newAge \u0026gt; 0) { age = newAge; } } public void setName(String newName) { name = newName; } } public class PersonTest { public static void main(String[] args) { Person p = new Person(); p.setName(\u0026#34;John\u0026#34;); // Set attribute values from outsider p.setAge(20); System.out.println(\u0026#34;Name\u0026#34; + p.getName()); // Retrieve attribute values from outsider System.out.println(\u0026#34;Age\u0026#34; + p.getAge()); } } 4. Class Access Control Access modifiers: public: accessible anywhere by anyone private: only accessible within the current class protected: accessible only to the class itself and to its subclasses or other classes in the same package default (no keyword): accessible within the current package 4. Implementation vs. Interface DogTestDrive: a \u0026ldquo;client\u0026rdquo; of Dog class Implementation: Data structures and code that implement object features. Usually have complex inner workings, Clients don\u0026rsquo;t need to know. Interface: The controls exposed to the \u0026ldquo;client\u0026rdquo;. \u0026ldquo;Don\u0026rsquo;t expose internal data structure to end users or client modules\u0026rdquo; ","description":"I. Classes vs. Objects 1. Important OO concepts 2. Java program 3. Objects 3.1. State 3.2. Behavior 3.3. Identity 4. Classes 5. Class vs. Object II. Designing a Class 1. Designing a class 2. Writing a class Write the class Write a tester class 3. Object Reference 4. Messaging beween objects III. Methods and Instance Variables 1. Methods - how objects behave 2. State affects behavior and vice versa 3."},{"id":8,"href":"/ProbStats/Exercises/04/","title":"04. Ex. Discrete Rand. Var.","parent":"Exercises","content":" Exercise 1 Exercise 2 Exercise 3 Exercise 4 Exercise 5 Exercise 6 Exercise 7 Exercise 8 Exercise 9 Exercise 1 a) $X$: the roll of a fair 6-sided dice. $A$: the event that the roll is a number greater or equal to 4. $PMF_{p_{X|A}}(x) = ?$ Solution ↕ $ PMF_{p_{X|A}}(x) = P(X \\geq 4) = P(X = 4) + P(X = 5) + P(X = 6) = \\frac{1}{6} + \\frac{1}{6} + \\frac{1}{6} = \\frac{3}{6} = \\frac{1}{2} $ b) $X$: the toss of a coin 3 times. $B$: the toss get at least 2 heads. $PMF_{p_{X|B}}(x) = ?$ Solution ↕ Let $X_A$ be the prob of first toss gets head, $X_B$ be the prob of second toss gets head, $X_C$ be the prob of third toss gets head. Then $X_A = X_B = X_C = \\frac{1}{2}$ $ PMF(\\text{2 heads}) = P(X_A) \\times P(X_B) + P(X_A) \\times P(X_C) + P(X_B) \\times P(X_C) = \\frac{1}{2} \\times \\frac{1}{2} + \\frac{1}{2} \\times \\frac{1}{2} + \\frac{1}{2} \\times \\frac{1}{2} = \\frac{3}{4} $ $PMF(\\text{3 heads}) = P(X_A) \\times P(X_B) \\times P(X_C) = \\frac{1}{2} \\times \\frac{1}{2} \\times \\frac{1}{2} = \\frac{1}{8} $ $PMF_{p_{X|B}}(x) = PMF(\\text{2 heads}) + PMF(\\text{3 heads}) = \\frac{3}{4} + \\frac{1}{8} = \\frac{7}{8} $ c) $X$: the roll of a pair of fair dice, $C$: the event that the sum of the two dice is 7. $PMF_{p_{X|C}}(x) = ?$ Solution ↕ $+$ 1 2 3 4 5 6 1 2 3 4 5 6 (7) 2 3 4 5 6 (7) 8 3 4 5 6 (7) 8 9 4 5 6 (7) 8 9 10 5 6 (7) 8 9 10 11 6 (7) 8 9 10 11 12 Prob of getting 7 is $\\frac{6}{36} = \\frac{1}{6}$ Exercise 2 Messages transmitted by a computer in Boston through a data network are destined for New York with probability 0.5, for Chicago with probability 0.3, and for San Francisco with probability 0.2. The transit time X of a message is random. Its mean is 0.05 seconds if it is destined for New York, 0.1 seconds if it is destined for Chicago, and 0.3 seconds if it is destined for San Francisco. What is the transit time on average?\nSolution ↕ Let $X$ be the transit time of a message, $Y$ be the destination of the message. $E(X) = \\sum_{i} E(X_i|Y_i) \\times P(Y_i)$ $E(X_\\text{New York}|Y_\\text{New York}) = 0.05 \\times 0.5 = 0.025$ $E(X_\\text{Chicago}|Y_\\text{Chicago}) = 0.1 \\times 0.3 = 0.03$ $E(X_\\text{San Francisco}|Y_\\text{San Francisco}) = 0.3 \\times 0.2 = 0.06$ $\\Rightarrow E(X) = 0.025 + 0.03 + 0.06 = 0.115$ seconds is the transit time on average. Exercise 3 Average Speed Versus Average Time. If the weather is good (which happens with probability 0.6). Alice walks the 2 miles to class at a speed of $v = 5$ miles per hour, and otherwise rides her motorcycle at a speed of $v = 30$ miles per hour.\na) What is the average speed of Alice\u0026rsquo;s commute to class?\nSolution ↕ Let $X$ be the speed of Alice’s commute to class, $Y$ be the weather condition probability. $E(X) = \\sum_{i} E(X_i|Y_i) \\times P(Y_i)$ $E(X_\\text{Good weather}|Y_\\text{Good weather}) = 5 \\times 0.6 = 3$ $E(X_\\text{Bad weather}|Y_\\text{Bad weather}) = 30 \\times 0.4 = 12$ $\\Rightarrow E(X) = 3 + 12 = 15$ miles per hour is the average speed of Alice’s commute to class. b) What is the expected value of the time it takes Alice to get to class?\nSolution ↕ Let $X$ be the time it takes Alice to get to class, $Y$ be the weather condition probability. $E(X) = \\sum_{i} E(X_i|Y_i) \\times P(Y_i)$ $E(X_\\text{Good weather}|Y_\\text{Good weather}) = \\frac{2}{5} \\times 0.6 = \\frac{6}{25}$ $E(X_\\text{Bad weather}|Y_\\text{Bad weather}) = \\frac{2}{30} \\times 0.4 = \\frac{2}{75}$ $\\Rightarrow E(X) = \\frac{6}{25} + \\frac{2}{75} = \\frac{4}{15}$ hours is the expected value of the time it takes Alice to get to class. Exercise 4 The mean of the geometric. You write a software program over and over, and each time there is probability $p$ that it works correctly, independent of previous attempts. What is the mean of $X$, the number of tries until the program works correctly?\nSolution ↕ Let $X$ be the number of tries until the program works correctly, $Y$ be the probability of the program works correctly. $E(X) = \\sum{E(X_i|Y_i) \\times P(Y_i)} \\Rightarrow E(X_i|Y_i) = \\frac{1}{p}$ Exercise 5 Alice passes through four traffic lights on her way to work, and each light is equally likely to be green or red, independent of the others.\na) PMF, the mean, the variance of the red lights Alice encounters on her way to work.\nSolution ↕ $\\text {2 states, 4 lights} \\Rightarrow \\Omega = 2^4 = 16$ Ways $x$ red lights can occur out of $4$ lights: $C_4^x$ $PMF_{p_{X|Y}}(x) = \\frac{C_4^x}{16}$ Let X be the number of red lights Alice encounters on her way to work, Y be the color of the light. $X \\in \\text{\\{}0, 1, 2, 3, 4\\text{\\}}, Y \\in \\text{\\{}Red, Green\\text{\\}}$ $E(X) = \\sum_{i} E(X_i|Y_i) \\times P(Y_i)$ $E(X_\\text{0}|Y_\\text{Red}) = 0 \\times \\frac{C_4^0}{16} = 0$ $E(X_\\text{1}|Y_\\text{Red}) = 1 \\times \\frac{C_4^1}{16} = \\frac{4}{16}$ $E(X_\\text{2}|Y_\\text{Red}) = 2 \\times \\frac{C_4^2}{16} = \\frac{12}{16}$ $E(X_\\text{3}|Y_\\text{Red}) = 3 \\times \\frac{C_4^3}{16} = \\frac{12}{16}$ $E(X_\\text{4}|Y_\\text{Red}) = 4 \\times \\frac{C_4^4}{16} = \\frac{4}{16}$ $\\Rightarrow E(X) = 0 + \\frac{4}{16} + \\frac{12}{16} + \\frac{12}{16} + \\frac{4}{16} = \\frac{32}{16} = 2$ red lights Alice encounters on her way to work. $var(X) = E[(X-E[X])^2]$ $ = \\frac{1}{2} \\times [(0-2)^2+(1-2)^2+(2-2)^2+(3-2)^2+(4-2)^2]$ $ = \\frac{1}{2} \\times 10 = 5$ b) Suppose that each red light delays Alice by exactly two minutes. What is the variance of Alice’s commuting time?\nSolution ↕ Similar to part a, let $X$ be the minutes it takes to delay Alice, $Y$ be the color of the light. $X \\in \\text{\\{}0, 2, 4, 6, 8\\text{\\}}, Y \\in \\text{\\{}Red, Green\\text{\\}}$ $E(X) = \\sum_{i} E(X_i|Y_i) \\times P(Y_i)$ $E(X_\\text{0}|Y_\\text{Red}) = 0 \\times \\frac{C_4^0}{16} = 0$ $E(X_\\text{2}|Y_\\text{Red}) = 2 \\times \\frac{C_4^1}{16} = \\frac{8}{16}$ $E(X_\\text{4}|Y_\\text{Red}) = 4 \\times \\frac{C_4^2}{16} = \\frac{24}{16}$ $E(X_\\text{6}|Y_\\text{Red}) = 6 \\times \\frac{C_4^3}{16} = \\frac{24}{16}$ $E(X_\\text{8}|Y_\\text{Red}) = 8 \\times \\frac{C_4^4}{16} = \\frac{8}{16}$ $\\Rightarrow E(X) = 0 + \\frac{8}{16} + \\frac{24}{16} + \\frac{24}{16} + \\frac{8}{16} = \\frac{64}{16} = 4$ minutes it takes to delay Alice. $var(X) = E[(X-E[X])^2]$ $ = \\frac{1}{2} \\times [(0-4)^2+(2-4)^2+(4-4)^2+(6-4)^2+(8-4)^2]$ $ = \\frac{1}{2} \\times 20 = 10$ Exercise 6 The Hat Problem. Suppose that n people throw their hats in a box and then each picks one hat at random. Assuming each hat can be picked by only one person, and each assignment of hats to persons is equally likely. What is the expected value of X, the number of people that get back their own hat?\nSolution ↕ Prob a person can pick their own hat: $\\frac{1}{4}$ Let $X$ be the number of people that get back their own hat, $Y$ be the hat that a person picks. $X \\in \\text{\\{}0, 1, 2, 3, 4\\text{\\}}, Y \\in \\text{\\{}Own, Other\\text{\\}}$ $E(X) = \\sum_{i} E(X_i|Y_i) \\times P(Y_i)$ $E(X_\\text{0}|Y_\\text{Own}) = 0 \\times \\frac{1}{4} = 0$ $E(X_\\text{1}|Y_\\text{Own}) = 1 \\times \\frac{1}{4} = \\frac{1}{4}$ $E(X_\\text{2}|Y_\\text{Own}) = 2 \\times \\frac{1}{4} = \\frac{2}{4}$ $E(X_\\text{3}|Y_\\text{Own}) = 3 \\times \\frac{1}{4} = \\frac{3}{4}$ $E(X_\\text{4}|Y_\\text{Own}) = 4 \\times \\frac{1}{4} = \\frac{4}{4}$ $\\Rightarrow E(X) = 0 + \\frac{1}{4} + \\frac{2}{4} + \\frac{3}{4} + \\frac{4}{4} = \\frac{10}{4} = 2.5$ people that get back their own hat. Exercise 7 Consider 4 rolls of a 6-sided die. Let $X$ be the number of $1s$ and let $Y$ be the number of $2s$ obtained. What is the joint $PMF$ of $X$ and $Y$?\nSolution ↕ Let’s assume $x$, the number of $1s$, is already given. In case $x = 0$, the problem is just finding the $PMF$ of $Y$ out of 4 rolls of a 6-sided die. $$P_y = \\binom{4}{y} \\times \\frac{1}{6}^y \\times \\frac{5}{6}^{4-y}$$\nIn case $x \u003e 0$, we reserve $x$ rolls for $1$ and the actual number $1$ from the dice. The remaining rolls now is $4-x$ and the possible values are $2, 3, 4, 5, 6$. The problem is now finding the $PMF$ of $Y$ out of $4-x$ rolls of a 5-sided die. $$P_y = \\binom{4-x}{y} \\times \\frac{1}{5}^y \\times \\frac{4}{5}^{4-x-y}$$\nFor all $x$ and $y$ such that $x + y \\leq 4$, we have the joint $PMF$ of $X$ and $Y$ as follows: $$P_{X|Y}(x,y) = \\frac{4}{y} \\times \\frac{1}{6}^y \\times \\frac{5}{6}^{4-y} \\times \\frac{4-x}{y} \\times \\frac{1}{5}^y \\times \\frac{4}{5}^{4-x-y}$$\nExercise 8 The joint PMF of two discrete random variables X and Y is given by $$ p_{XY}(x,y) = \\begin{cases} c(2x+y) \u0026amp; \\text{where } 0 \\leq x \\leq 2, 0 \\leq y \\leq 3 \\\\ 0 \u0026amp; \\text{otherwise} \\end{cases} $$\na) Find the value of the constant c.\nSolution ↕ $x$ can takes 3 values, $y$ can takes 4 values, so the total number of possible outcomes is $3 \\times 4 = 12$. The probability of each outcome is $\\frac{1}{12}$. The total probability of all outcomes is $1$. $\\Rightarrow \\sum_{x=0}^{2} \\sum_{y=0}^{3} p_{XY}(x, y) = c \\times \\sum_{x=0}^{2} \\sum_{y=0}^{3} 2x+y = 42c = 1$ $\\Rightarrow c = \\frac{1}{42}$ b) Find $P(X=2; Y=1)$.\nSolution ↕ $P(X=2; Y=1) = p_{XY}(2, 1) = \\frac{1}{42}(2 \\times 2 + 1) = \\frac{1}{42} \\times 5 = \\frac{5}{42}$ c) Find $P(X \\geq 1, Y \\leq 2)$\nSolution ↕ $X$ can takes 2 values, $Y$ can takes 3 values, so the total number of possible outcomes is $2 \\times 3 = 6$. $P(X \\geq 1, Y \\leq 2) = \\sum_{x=1}^{2} \\sum_{y=0}^{2} p_{XY}(x, y) = \\frac{1}{42} \\times \\sum_{x=1}^{2} \\sum_{y=0}^{2} 2x+y = \\frac{1}{42} \\times 24 = \\frac{24}{42} = \\frac{2}{3}$ d) Find the marginal PMF of $X$, $Y$?\nSolution ↕ $X \\in \\text{\\{}0, 1, 2\\text{\\}}$ $P(X=0) = \\sum_{y=0}^{3} p_{XY}(0, y) = \\frac{1}{42} \\times \\sum_{y=0}^{3} 2 \\times 0 + y = \\frac{1}{42} \\times 6 = \\frac{6}{42}$ $P(X=1) = \\sum_{y=0}^{3} p_{XY}(1, y) = \\frac{1}{42} \\times \\sum_{y=0}^{3} 2 \\times 1 + y = \\frac{1}{42} \\times 14 = \\frac{14}{42}$ $P(X=2) = \\sum_{y=0}^{3} p_{XY}(2, y) = \\frac{1}{42} \\times \\sum_{y=0}^{3} 2 \\times 2 + y = \\frac{1}{42} \\times 22 = \\frac{22}{42}$ $\\Rightarrow P(X=x) = \\begin{cases} \\frac{6}{42} \u0026 \\text{where } x=0 \\\\ \\frac{14}{42} \u0026 \\text{where } x=1 \\\\ \\frac{22}{42} \u0026 \\text{where } x=2 \\end{cases}$\n$Y \\in \\text{\\{}0, 1, 2, 3\\text{\\}}$ $P(Y=0) = \\sum_{x=0}^{2} p_{XY}(x, 0) = \\frac{1}{42} \\times \\sum_{x=0}^{2} 2 \\times x + 0 = \\frac{1}{42} \\times 12 = \\frac{12}{42}$ $P(Y=1) = \\sum_{x=0}^{2} p_{XY}(x, 1) = \\frac{1}{42} \\times \\sum_{x=0}^{2} 2 \\times x + 1 = \\frac{1}{42} \\times 16 = \\frac{16}{42}$ $P(Y=2) = \\sum_{x=0}^{2} p_{XY}(x, 2) = \\frac{1}{42} \\times \\sum_{x=0}^{2} 2 \\times x + 2 = \\frac{1}{42} \\times 20 = \\frac{20}{42}$ $P(Y=3) = \\sum_{x=0}^{2} p_{XY}(x, 3) = \\frac{1}{42} \\times \\sum_{x=0}^{2} 2 \\times x + 3 = \\frac{1}{42} \\times 24 = \\frac{24}{42}$ $\\Rightarrow P(Y=y) = \\begin{cases} \\frac{12}{42} \u0026 \\text{where } y=0 \\\\ \\frac{16}{42} \u0026 \\text{where } y=1 \\\\ \\frac{20}{42} \u0026 \\text{where } y=2 \\\\ \\frac{24}{42} \u0026 \\text{where } y=3 \\end{cases}$\ne) Show that the random variable $X$ and $Y$ are dependent.\nSolution ↕ $P(X=0, Y=0) = p_{XY}(0, 0) = \\frac{1}{42} \\times 0 = 0$ $P(X=0) = \\frac{6}{42}$ $P(Y=0) = \\frac{12}{42}$ $\\Rightarrow P(X=0, Y=0) \\neq P(X=0) \\times P(Y=0)$ f) Find the conditional PMF of $Y$ given $X = 2$. Then, compute $P(Y=1|X=2)$.\nSolution ↕ $P(Y=0|X=2) = \\frac{P(X=2, Y=0)}{P(X=2)} = \\frac{\\frac{1}{42} \\times 4}{\\frac{22}{42}} = \\frac{4}{22}$ $P(Y=1|X=2) = \\frac{P(X=2, Y=1)}{P(X=2)} = \\frac{\\frac{1}{42} \\times 5}{\\frac{22}{42}} = \\frac{5}{22}$ $P(Y=2|X=2) = \\frac{P(X=2, Y=2)}{P(X=2)} = \\frac{\\frac{1}{42} \\times 6}{\\frac{22}{42}} = \\frac{6}{22}$ $P(Y=3|X=2) = \\frac{P(X=2, Y=3)}{P(X=2)} = \\frac{\\frac{1}{42} \\times 7}{\\frac{22}{42}} = \\frac{7}{22}$ Exercise 9 $$ p_{XY}(x, y) = \\begin{cases} c \\times x \\times y \u0026amp; \\text{where } x, y \\in \\text{\\{}1, 2, 3\\text{\\}} \\\\ 0 \u0026amp; \\text{otherwise} \\end{cases} $$\na) Find the value of the constant $c$. Solution ↕ There are 9 possible outcomes, so the probability of each outcome is $\\frac{1}{9}$. $p_{XY}(1, 1) = c \\times 1 \\times 1 = \\frac{1}{9}$ The total of all possible outcomes is $1$. $\\Rightarrow \\sum_{x=1}^{3} \\sum_{y=1}^{3} p_{XY}(x, y) = \\sum_{x=1}^{3} \\sum_{y=1}^{3} c \\times x \\times y = c \\times 36 = 1 \\Rightarrow c = \\frac{1}{36}$ b) Find $P(X=1; Y=3)$. Solution ↕ $P(X=1; Y=3) = p_{XY}(1, 3) = \\frac{1}{36} \\times 3 = \\frac{1}{12}$ c) Find $P(1 \\leq X \\leq 2; Y \\leq 2)$. Solution ↕ $X \\in \\text{\\{}1, 2\\text{\\}}, Y \\in \\text{\\{}1, 2\\text{\\}}$ $P(1 \\leq X \\leq 2; Y \\leq 2) = \\sum_{x=1}^{2} \\sum_{y=1}^{2} p_{XY}(x, y) = \\frac{1}{36} \\times \\sum_{x=1}^{2} \\sum_{y=1}^{2} x \\times y = \\frac{1}{36} \\times 9 = \\frac{1}{4}$ d) Find $P(X \\geq 2), P(Y \u0026lt; 2), P(Y = 3)$. Solution ↕ $P(X \\geq 2): X \\in \\text{\\{}2, 3\\text{\\}}$ $P(X \\geq 2) = \\sum_{x=2}^{3} \\sum_{y=1}^{3} p_{XY}(x, y) = \\frac{1}{36} \\times \\sum_{x=2}^{3} \\sum_{y=1}^{3} x \\times y = \\frac{1}{36} \\times 30 = \\frac{10}{13}$ $P(Y \u003c 2): Y \\in \\text{\\{}1\\text{\\}}$ $P(Y \u003c 2) = \\sum_{x=1}^{3} \\sum_{y=1}^{1} p_{XY}(x, y) = \\frac{1}{36} \\times \\sum_{x=1}^{3} \\sum_{y=1}^{1} x \\times y = \\frac{1}{36} \\times 3 = \\frac{1}{12}$ e) Find the marginal PMF of $X$ and $Y$. Solution ↕ $X \\in \\text{\\{}1, 2, 3\\text{\\}}$ $P(X=1) = \\sum_{y=1}^{3} p_{XY}(1, y) = \\frac{1}{36} \\times \\sum_{y=1}^{3} 1 \\times y = \\frac{1}{36} \\times 6 = \\frac{1}{6}$ $P(X=2) = \\sum_{y=1}^{3} p_{XY}(2, y) = \\frac{1}{36} \\times \\sum_{y=1}^{3} 2 \\times y = \\frac{1}{36} \\times 12 = \\frac{1}{3}$ $P(X=3) = \\sum_{y=1}^{3} p_{XY}(3, y) = \\frac{1}{36} \\times \\sum_{y=1}^{3} 3 \\times y = \\frac{1}{36} \\times 18 = \\frac{1}{2}$ f) Determine whether X and Y are independent. Solution ↕ $P(X=1, Y=1) = p_{XY}(1, 1) = \\frac{1}{36} \\times 1 = \\frac{1}{36}$ $P(X=1) = \\frac{1}{6}$ $P(Y=1) = \\frac{1}{6}$ $\\Rightarrow P(X=1, Y=1) = P(X=1) \\times P(Y=1)$ $X$ and $Y$ are independent. ","description":"Exercise 1 Exercise 2 Exercise 3 Exercise 4 Exercise 5 Exercise 6 Exercise 7 Exercise 8 Exercise 9 Exercise 1 a) $X$: the roll of a fair 6-sided dice. $A$: the event that the roll is a number greater or equal to 4. $PMF_{p_{X|A}}(x) = ?$ Solution ↕ $ PMF_{p_{X|A}}(x) = P(X \\geq 4) = P(X = 4) + P(X = 5) + P(X = 6) = \\frac{1}{6} + \\frac{1}{6} + \\frac{1}{6} = \\frac{3}{6} = \\frac{1}{2} $ b) $X$: the toss of a coin 3 times."},{"id":9,"href":"/OOP/04_object_ref/","title":"04. Objects and Object References","parent":"Object Oriented Programming","content":" I. Data types 1. Variables and Types 2. Primitive Data Types II. Objects 1. Object References - Controlling Objects 2. Object References 3. Object Equality 4. Object\u0026rsquo;s life on memory III. Instance variables vs local variables IV. Parameters 1. Parameter passing \u0026amp; return value 2. Parameter passing of primitive types 3. Parameter passing of object references IV. Methods 1. Method overloading 2. Remind 3. How about this case? V. The \u0026ldquo;this\u0026rdquo; reference VI. Input/Output 1. Standard I/O 2. Standard output and error streams Standard input Example Input from a text file Writing to a text file Command-line parameters VII. Package Create a package Use a package I. Data types 1. Variables and Types 2 kinds of variables: primitive and object reference. primitive variables hold fundamental data types (int, double, boolean, char, etc.) int x = 5; double y = 3.14; boolean z = true; char c = \u0026#39;a\u0026#39;; object reference variables hold references to objects (similar to pointers) Dog d = new Dog(); d.name = \u0026#34;Fido\u0026#34;; d.bark(); 2. Primitive Data Types 3 basic categories: Numerical: byte, short, int, long, float, double Logical: boolean (true or false) Character: char $\\rightarrow$ Primitive data are NOT objects.\nwrapper type in order to treat primitive values as objects Byte, Short, Integer, Long, Float, Double, Boolean, Character Integer count = new Integer(5); Provide utility functions: parseInt(), toString(), valueOf(), etc. Primitive Type Size Min Value Max Value Wrapper Type char 16 bits '\\u0000' '\\uffff' Character byte 8 bits $-128$ $127$ Byte short 16 bits $-32768$ $32767$ Short int 32 bits $-2^{31}$ $2^{31}-1$ Integer long 64 bits $-2^{63}$ $2^{63}-1$ Long float 32 bits $1.4 \\times 10^{-45}$ $3.4 \\times 10^{38}$ Float double 64 bits $4.9 \\times 10^{-324}$ $1.8 \\times 10^{308}$ Double boolean 1 bit false true Boolean II. Objects 1. Object References - Controlling Objects There is actually no such thing as an object variable There\u0026rsquo;s only object reference variables An object reference variable represents a way to access an object, something like a pointer. Think of an object reference as a remote control. 2. Object References Remind: References are not objects!\n3. Object Equality \u0026ldquo;==\u0026rdquo; and \u0026ldquo;!=\u0026rdquo; compares references (not objects) to see if they are referring to the same object. Integer b = new Integer(10); Integer c = new Integer(10); Integer a = b; $\\Rightarrow$ a == b is true and a == c is false Use the equals() method to see if two objects are equal. Integer b = new Integer(10); Integer c = new Integer(10); if (b.equals(c)) { System.out.println(\u0026#34;b and c are equal\u0026#34;); } Method equals() Pre-defined classes: ready to use Integer m1 = new Integer(10); Integer m2 = new Integer(10); System.out.println(m1.equals(m2)); // true User-defined classes: need to be defined by the programmer, otherwise it will always return false class MyInteger { private int value; public boolean equals (Object other) { if (!(other instanceof MyInteger)) return false; return (value == ((MyInteger)other).value); } } 4. Object\u0026rsquo;s life on memory Objects are created in the heap memory a constructor is automatically called to initialize it the set of parameters determine which constructor to call and the initial value of the object Book b = new Book() Book c = new Book(\u0026#34;Harry Potter\u0026#34;); When an object is no longer used, i.e. there\u0026rsquo;s no more reference to it, it will be collected and freed automatically by Java garbage collector Book b = new Book(); Book c = new Book(); b = c; There\u0026#39;s no way to reach Book object 1. It is ready to be collected Book b = new Book(); Book c = new Book(); b = c; c = null; Book object 1 is waiting to be de-allocated. Book object 2 is safe as b is still referring to it. In Java, un-used objects are automatically freed by the Java Virtual Machine (JVM), not manually by programmers. III. Instance variables vs local variables Instance variables\nbelong to an object located inside the object in the heap memory has the same lifetime as the object Local variables\nbelong to a method located inside the method\u0026rsquo;s frame in the stack memory has the same lifetime as the method call class Dog { int size; String breed; String name; } public class DogTestDrive { public static void main(String[] args) { Dog dog = new Dog(); dog.name = \u0026#34;Bart\u0026#34;; dog.bark(); }]) } IV. Parameters 1. Parameter passing \u0026amp; return value Parameter: used in method definition of declaration Argument: used in method call class Dog { // ... void bark(int numOfBarks) { // numOfBarks is a parameter while (numOfBarks \u0026gt; 0) { System.out.println(\u0026#34;Ruff!\u0026#34;); numOfBarks--; } } Dog d = new Dog(); d.bark(3); // 3 is an argument The return value is copied to the stack, then to the variable that get assigned (dogSize in the example below) 2 kinds of parameters: Primitive type: parameter\u0026rsquo;s value is copied parameters can be constant, e.g. 10, \u0026ldquo;abc\u0026rdquo;, \u0026hellip; Object references: the reference\u0026rsquo;s value is copied, NOT the referred object 2. Parameter passing of primitive types pass-by-copy Argument\u0026rsquo;s content is copied to the parameter A parameter is effectively a local variable that is initialized with the value of the corresponding argument 3. Parameter passing of object references Object reference\u0026rsquo;s value is copied, NOT the referred object IV. Methods 1. Method overloading Methods of the same class can have the same name but different parameters list 2. Remind Instance variables/methods belong to an object. Thus, when accessing them, you MUST specify which object they belong to.\n3. How about this case? V. The \u0026ldquo;this\u0026rdquo; reference this: the object reference referring to the current object - the owner of the current method. usage of this: explicit reference to object\u0026rsquo;s attributes and methods. often omitted parameter passing and return value. calling constructor from inside another constructor. VI. Input/Output In Java, input and output are often performed on data streams. A stream is a sequence of data. There are 2 kinds of streams: InputStream: to read data from a source. OuputStream: to write data to a destination. Most I/O classes are supported in java.io package. 1. Standard I/O 3 stream objects are automatically created when a Java program begins executing: System.out: standard output stream object enables a program to output data to the console System.err: standard error stream object enables a program to output error messages to the console System.in: standard input stream object enables a program to read data from the keyboard 2. Standard output and error streams System.out and System.err can be used directly System.out.println(\u0026ldquo;Hello world!\u0026rdquo;); System.err.println(\u0026ldquo;Error message\u0026rdquo;); Standard input System.in An InputStream object must be wrapped before use Scanner: wrapper that supports input of primitive types and character strings next(): get the next word separated by white spaces nextInt(), nextDouble(), ...: get the next data item hasNext(), hasNextInt(), hasNextDouble(), ...: check if there are data left to be read Example // import the wrapper class import java.util.Scanner; // ... // create Scanner to get input from keyboard Scanner scanner = new Scanner(System.in); // read a word String word = scanner.next(); // read an integer int number = scanner.nextInt(); // read a series of big integers while (scanner.hasNextLong()) { long bigNumber = scanner.nextLong(); // ... } Input from a text file import java.util.Scanner; import java.io.FileInputStrem; import java.io.IOException; // ... public static void main(String[] args) { try { // create Scanner to get input from a text file Scanner scanner = new Scanner(new FileInputStream(\u0026#34;input.txt\u0026#34;)); // open the file String word = scanner.next(); // read a word int number = scanner.nextInt(); // read an integer while (scanner.hasNextLong()) { // read a series of big integers long bigNumber = scanner.nextLong(); // ... scanner.close(); // close the file } } catch (IOException e) { // to deal with exceptions such as file not found System.err.println(\u0026#34;Error: \u0026#34; + e.getMessage()); } } Writing to a text file import java.io.PrintWriter; import java.io.FileWrite; import java.io.IOException; // ... public static void main(String[] args) { int i = 1; long l = 10; try { // create a PrintWriter to write output to a file stream PrintWriter writer = new PrintWriter(new FileWriter(\u0026#34;output.txt\u0026#34;)); writer.println(\u0026#34;Hello world!\u0026#34;); // write a line of text writer.close(); // close the file } catch (IOException e) { // to deal with exceptions such as file not found System.err.println(\u0026#34;Error: \u0026#34; + e.getMessage()); } } Command-line parameters // CmdLineParas.java: read all command-line parameters public static void main(String[] args) { for (int i = 0; i \u0026lt; args.length; i++) { System.out.println(args[i]); } } VII. Package A package is a grouping of related types (classes, interfaces,\u0026hellip;) to protect access or manage namespaces. 2 popular packages: java.lang: contains the fundamental classes of the Java language java.io: contains classes for input/output operations Create a package Task: create a package named \u0026ldquo;messagePkg\u0026rdquo; containing 2 following classes: public class HelloMessage { public void sayHello() { System.out.println(\u0026#34;Hello world!\u0026#34;); } } public class WelcomeMessage { public void sayWelcome() { System.out.println(\u0026#34;Welcome to Java!\u0026#34;); } } Step 1: declare the package which the class belongs to\nStep 2: compile javac -d \u0026lt;destination_folder\u0026gt; file_name.java Example: javac -d . HelloMessage.java javac -d . WelcomeMessage.java or\njavac -d . HelloMessage.java WelcomeMessage.java Use a package 2 ways: Use the import statement to make the name(s) in the package available, once for all\nimport messagePkg.HelloMessage; public class Hello { public static void main(String[] args) { HelloMessage hello = new HelloMessage(); hello.sayHello(); } } Use the fully qualified name to refer to the class\npublic class Hello { public static void main(String[] args) { messagePkg.HelloMessage hello = new messagePkg.HelloMessage(); hello.sayHello(); } } Compile: javac Hello.java Run: java Hello ","description":"I. Data types 1. Variables and Types 2. Primitive Data Types II. Objects 1. Object References - Controlling Objects 2. Object References 3. Object Equality 4. Object\u0026rsquo;s life on memory III. Instance variables vs local variables IV. Parameters 1. Parameter passing \u0026amp; return value 2. Parameter passing of primitive types 3. Parameter passing of object references IV. Methods 1. Method overloading 2. Remind 3. How about this case? V. The \u0026ldquo;this\u0026rdquo; reference VI."},{"id":10,"href":"/OOP/05_class_members/","title":"05. Class members","parent":"Object Oriented Programming","content":" 1. Class methods 2. Instance methods vs. class methods 3. Using class methods Correct code Better code 4. Class variables 5. Class variables vs instance variables 6. Using class (static) variables 1. Class methods Examples:\ndouble x = Math.round(3.14); int y = Math.abs(-5); Methods in the Math class don\u0026rsquo;t use any instance variable value. So they don;t need to know about a specific Math object. All we need is the Math class.\nMath functions were written as class methods, or static methods.\nA class method (static method) is one that runs without any instance of the class.\n2. Instance methods vs. class methods Instance (regular) methods\nclass Cow { String name; public String greeting() { return (\u0026#34;Hi, I am \u0026#34; + name); } } Behavior of the instance method greeting() is affected by instance variable name. Instance method is called using a reference variable\ns = cow1.greeting(); Class (static) methods\nclass Math { public static double round(double x) { return Math.floor(x + 0.5); } } Static method round() doesn\u0026rsquo;t use any instance variable value. Static method is called using the class name\nx = Math.round(3.14); 3. Using class methods Class (static) methods can\u0026rsquo;t use: instance variables instance methods public class Duck { private int size; public static void main(String[] args) { Duck d = new Duck(); System.out.println(\u0026#34;Size of the duck is \u0026#34; + size); } } -\u0026gt; java javac Duck.java Duck.java:6: error: non-static variable size cannot be referenced from a static context System.out.println(\u0026#34;Size of the duck is \u0026#34; + size); 1 error -\u0026gt; java public class Duck { private int size; public static void main(String[] args) { Duck d = new Duck(); setSize(10); } public void setSize(int s) { if (s \u0026gt; 0) size = s; } } -\u0026gt; java javac Duck.java Duck.java:6: error: non-static method setSize(int) cannot be referenced from a static context setSize(10); ^ 1 error -\u0026gt; java Correct code public class Duck { private int size; public void setSize(int s) { if (s \u0026gt; 0) size = s; } public static void main(String[] args) { Duck d = new Duck(); d.setSize(10); // the instance object d must be specified System.out.println(\u0026#34;Size of the duck is \u0026#34; + d.size); } } Better code The program is put in a seperate class: Class Duck should define Duck objects only Different programs can use the same Duck class public class Duck { private int size; public void setSize(int s) {...} } public class DuckProgram { public static void main(String[] args) { Duck d = new Duck(); d.setSize(10); System.out.println(\u0026#34;Size of the duck is \u0026#34; + d.size); } } 4. Class variables A class (static) variable belongs to the class, not any object. Need just one copy, but shared among all class instances. public class Duck { private int size; public static int count = 0; // each duck has its own size, but all ducks share the same attribute \u0026#34;count\u0026#34; public Duck() { count++; } } 5. Class variables vs instance variables Class/static variables\nbelong to a class need just one copy, but shared among all instances of the class initialized before any objects of the class Instance variables\nbelong to an instance each instance has its own copy initialized when the owner object is created public class Duck { private int size = 0; public static int count = 0; public Duck() { count++; size++; } } 6. Using class (static) variables Class (static) variables can be used by: static methods instance methods public class Duck { private int size; public static int count = 0; public void incCount() { count++; } } public class DuckTestDrive { public static void main(String[] args) { Duck d = new Duck(); d.incCount(); System.out.println(d.count); d.incCount(); System.out.println(Duck.count); } } -\u0026gt; java javac DuckTestDrive.java -\u0026gt; java DuckTestDrive 1 // static variable count is called by instance object d 2 // static variable count is called by class name Duck ","description":"1. Class methods 2. Instance methods vs. class methods 3. Using class methods Correct code Better code 4. Class variables 5. Class variables vs instance variables 6. Using class (static) variables 1. Class methods Examples:\ndouble x = Math.round(3.14); int y = Math.abs(-5); Methods in the Math class don\u0026rsquo;t use any instance variable value. So they don;t need to know about a specific Math object. All we need is the Math class."},{"id":11,"href":"/ProbStats/Exercises/05/","title":"05. Ex. Continuous Uni. Law","parent":"Exercises","content":" Exercise 1 Exercise 1 A probability density function $PDF$ such that $$ f_X(x) = \\begin{cases} cx^2 \u0026amp; \\text{if } 0 \u0026lt; x \u0026lt; 3 \\\\ 0 \u0026amp; \\text{otherwise} \\end{cases} $$\na) Find the constant $c$ Expand ↕ $\\int_{0}^{3} cx^2 dx = 1$\n$\\Leftrightarrow c \\times \\int_{0}^{3} x^2 = 1$\n$\\Leftrightarrow c \\times \\frac{x^3}{3} \\Bigg|_{0}^{3} = 1$\n$\\Leftrightarrow c \\times \\frac{3^3}{3} - \\frac{0^3}{3} = 1$\n$\\Leftrightarrow c \\times \\frac{27}{3} = 1$\n$\\Leftrightarrow c = \\frac{1}{9}$\nb) Compute $P(1 \u0026lt; X \u0026lt; 2)$ Expand ↕ $\\int_{1}^{2} \\frac{1}{9} x^2 dx = \\frac{1}{9} \\times \\frac{x^3}{3} \\Bigg|_{1}^{2} = \\frac{7}{27}$ c) Find CDF for the random variable $X$\nHint: $F_X(x) = \\int_{-\\infty}^{x} f_X(x) dx$ Expand ↕ $F_X(x) = \\int_{0}^{x} \\frac{1}{9} x^2 dx$ $F_X(x) = \\frac{1}{9} \\times \\frac{x^3}{3} \\Bigg|_{0}^{x}$ $F_x(x) = \\frac{1}{9} \\times \\frac{x^3}{3}$ $F_x(x) = \\frac{x^3}{27}$ d) Use the result from c) to find $P(X \u0026lt; 1 \\leq 2)$ Expand ↕ $P(X \u003c 1 \\leq 2) = F_X(2) - F_X(1) = \\frac{2^3}{27} - \\frac{1^3}{27} = \\frac{7}{27}$ ","description":"Exercise 1 Exercise 1 A probability density function $PDF$ such that $$ f_X(x) = \\begin{cases} cx^2 \u0026amp; \\text{if } 0 \u0026lt; x \u0026lt; 3 \\\\ 0 \u0026amp; \\text{otherwise} \\end{cases} $$\na) Find the constant $c$ Expand ↕ $\\int_{0}^{3} cx^2 dx = 1$\n$\\Leftrightarrow c \\times \\int_{0}^{3} x^2 = 1$\n$\\Leftrightarrow c \\times \\frac{x^3}{3} \\Bigg|_{0}^{3} = 1$\n$\\Leftrightarrow c \\times \\frac{3^3}{3} - \\frac{0^3}{3} = 1$\n$\\Leftrightarrow c \\times \\frac{27}{3} = 1$"},{"id":12,"href":"/OOP/06_intehritance_polymorphism/","title":"06. Inheritance and polymorphism","parent":"Object Oriented Programming","content":" Important OO concepts What is inheritance? Inheritance declaration Example Overriding - which method is called? Rules for overriding Wrong overriding IS-A \u0026amp; HAS-A relationships Protected access level Design an inheritance structure Case study Types of inheritance structure Important OO concepts What is polymorphism? Polymorphism example Polymorphic arguments and return types Why care about polymorphism? Object class Important OO concepts What is inheritance? Inheritance is a relationship where a child class inherits members, i.e. instance variables and methods, from a parent class. The child class is called a subclass or derived class. The parent class is called a superclass or base class. In inheritance: The superclass is more abstract. The subclass is more specific. In inheritance, the subclass specializes the superclass: It can add new variables and methods. It can override inherited methods. Inheritance declaration In Java, extends keyword is used to express inheritance relationship between two classes. Syntax: class Parent { // ... } class Child extends Parent { // ... } Example class Animal { String name; void makeNoise() { System.out.println(\u0026#34;Hmm\u0026#34;); } } class Cow extends Animal { boolean givesMilk; // newly added attribute void makeNoise() { // overridden method System.out.println(\u0026#34;Moo\u0026#34;); } } class Dog extends Animal { void chaseCats() { // newly added method System.out.println(\u0026#34;I\u0026#39;m coming, cat!\u0026#34;); } } Overriding - which method is called? Rules for overriding The principle: the subclass must be able to do anything the superclass declares. Overriding rules: Parameter types must be the same. whatever the superclass takes as an argument, the subclass overriding the method must be able to take that same argument. Return types must be compatible. whatever the superclass declares as return type, the subclass must return the same type of a subclass type. The method can\u0026rsquo;t be less accessible. a public method cannot be overridden by a private version. Wrong overriding IS-A \u0026amp; HAS-A relationships Triangle IS-A Shape. Cow IS-An Animal. Dog IS-An Animal. $\\Rightarrow$ Inheritance\nHouse HAS-A Kitchen. Kitchen HAS-A Sink. Kitchen HAS-A Stove. $\\Rightarrow$ Composition\nComposition - \u0026ldquo;HAS-A\u0026rdquo; relationship the new class is composed of objects of existing classes. reuse the functionality of the existing class, but not its form Inheritance - \u0026ldquo;IS-A\u0026rdquo; relationship create a new class as a type of an existing class. new class absorbs the existing class\u0026rsquo;s members and extends them with new of modified capabilities. Protected access level Modifier same class same package subclass other package private Y package (default) Y Y protected Y Y Y public Y Y Y Y Protected attributes/methods of a superclass are directly accessible from inside its subclasses.\npublic class Person { protected String name; protected String birthday; protected String getName() { // ... } } public class Employee extends Person { protected int salary; public String toString() { String s; s = name + \u0026#34;,\u0026#34; + birthday; // subclass can directly access superclass\u0026#39;s protected attribute s = s + \u0026#34;,\u0026#34; + salary; return s; } public String toString2() { String s; s = getName() + \u0026#34;,\u0026#34; + birthday; // subclass can directly access superclass\u0026#39;s protected method s = s + \u0026#34;,\u0026#34; + salary; return s; } } Design an inheritance structure Tiger HouseCat Which one should be subclass/superclass? Or, should they both be subclasses to some other class? How should you design an inheritance structure? Case study Having a number of animals of different species: tigers, lions, wolves, dogs, hippos, cats,\u0026hellip; $\\rightarrow$ how to design the corresponding inheritance structure?\nStep 1: figure out the common abstract characteristic that all animals have: instance variables food hunger location methods makeNoise() eat() sleep() roam() Step 2: design a class that represents all common states and behaviors. Step 3: decide if a subclass needs any behaviors that are specific to that particular subclass. Step 4: look for more inheritance levels: more common behaviors in subclasses. Types of inheritance structure Important OO concepts What is polymorphism? Polymorphism means \u0026ldquo;exist in many forms\u0026rdquo;. Object polymorphism: objects of subclasses can be treated as if they are all objects of the superclass. Example Dog dog = new Dog(); Animal dog = new Dog(); $\\rightarrow$ A Dog object can be seen as an Animal object as well.\nPolymorphism example Normally,\nDog dog = new Dog(); With polymorphism:\nAnimal dog = new Dog(); $\\rightarrow$ The reference type can be a superclass of the actual object type.\nAn array is declared of type animal. It can hold objects of Animal\u0026rsquo;s subclasses. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Animal[] animals = new Animal[5]; // We put objects of any subclasses of Animal in the Animal array animals[0] = new Dog(); animals[1] = new Cat(); animals[2] = new Hippo(); animals[3] = new Wolf(); animals[4] = new Lion(); // We can loop through the array and call Animal-class methods for (int i = 0; i \u0026lt; animals.length; i++) { // the cat runs Cat\u0026#39;s version of makeNoise(), the dog runs Dog\u0026#39;s version,... animals[i].makeNoise(); } Polymorphic arguments and return types Parameters of type Animal can take arguments of any subclasses of Animal class Pet { public void giveVaccine(Animal a) { // it takes arguments of types Dog and Cat a.makeNoise(); } } Pet p = new Pet(); Dog d = new Dog(); Cat c = new Cat(); p.giveVaccine(d); // the Dog\u0026#39;s MakeNoise() is called p.giveVaccine(c); // the Cat\u0026#39;s MakeNoise() is called 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Animal { String name; //... public void makeNoise() { System.out.println(\u0026#34;Hmm.\u0026#34;); } public void introduce() { makeNoise(); // polymorphism: the same message \u0026#34;makeNoise\u0026#34; is interpreted differently, depending on the type of the owner object. System.out.println(\u0026#34;I\u0026#39;m \u0026#34; + name); } } class Cat extends Animal { // ... public void makeNoise() { System.out.println(\u0026#34;Meow...\u0026#34;); } } class Cow extends Animal { // ... public void makeNoise() { System.out.println(\u0026#34;Moo...\u0026#34;); } } Animal pet1 = new Cat(\u0026#34;Tom Cat\u0026#34;); Animal pet2 = new Cow(\u0026#34;Mini Cow\u0026#34;); pet1.introduce(); pet2.introduce(); Meow...I\u0026#39;m Tom Cat Moo...I\u0026#39;m Mini Cow Why care about polymorphism? With polymorphism, you can write code that doesn\u0026rsquo;t have to change when you introduce new subclass types into the program. class Animal { //... public void makeNoise() { System.out.println(\u0026#34;Hmm.\u0026#34;); } public void introduce() { makeNoise(); System.out.println(\u0026#34;I\u0026#39;m \u0026#34; + name); } } class Pig extends Animal { public void makeNoise() { System.out.println(\u0026#34;Oink...\u0026#34;); } } class Duck extends Animal { public void makeNoise() { System.out.println(\u0026#34;Quack...\u0026#34;); } } ![](20_polymorphism_demo.webp \u0026ldquo;You can add as many new animal types as you want without having to modify the introduce() method.\nObject class All classes are subclasses to the class Object. Inherited methods: Class getClass() int hashCode() boolean equals() // equals() and toString() should be overridden to work properly String toString() Car c1 = new Car(); Car c2 = new Car(); System.out.println(c1.equals(c2)); // false System.out.println(c1.getClass() + c1.hashCode()); // class Car 123456 System.out.println(c1.toString()); // Car@123456 ","description":"Important OO concepts What is inheritance? Inheritance declaration Example Overriding - which method is called? Rules for overriding Wrong overriding IS-A \u0026amp; HAS-A relationships Protected access level Design an inheritance structure Case study Types of inheritance structure Important OO concepts What is polymorphism? Polymorphism example Polymorphic arguments and return types Why care about polymorphism? Object class Important OO concepts What is inheritance? Inheritance is a relationship where a child class inherits members, i."},{"id":13,"href":"/OOP/07_abstraction/","title":"07. Abstraction","parent":"Object Oriented Programming","content":" Important OO Concepts What is Abstraction? Abstraction vs Inheritance design Abstract classes Abstract vs Concrete Abstract methods Important OO Concepts What is Abstraction? Abstraction: simplify a complex system by breaking down into smaller, fundamental parts: naming the parts explaining their functionality Abstraction vs Inheritance design Dog d = new Dog(); Cat c = new Cat(); $\\rightarrow$ We can imagine how Dog object and Cat object look like.\nAnimal anim = new Animal(); $\\rightarrow$ But, what does a generic Animal object look like?\n$\\rightarrow$ Do we ever need an Animal object?\nWhat does a generic Shape object look like? How to draw() it? Do we ever need a Shape object? Abstract classes Abstract classes present generic classes. Abstract classes are not instantiated. Why care about abstract classes? We want Circle and Triangle objects, but no Shape object. We want Dogs and Cats, but no Animal objects. Declare abstract classes with the keyword \u0026ldquo;abstract\u0026rdquo;. public abstract class Animal { public void eat() { //... } } In an abstract class: The compiler will guarantee that no instances are created. But object references of abstract class types are allowed. public abstract class Animal { } public class Dog extends Animal { } Animal anim = new Animal(); // Error Animal anim = new Dog(); // no error Abstract vs Concrete A class that is not abstract is called a concrete class. How do we know when a class should be abstract?\nmobile phone - abstract smart phone - concrete iPhone - abstract iPhone 4 - concrete Abstract methods If Animal is an abstract class, how do we implement? Animal.makeNoise() or Animal.eat()? public void makeNoise() { System.out.println(\u0026#34;Hmm\u0026#34;); } If there any generic implementation that is useful? For this, wew mark those generic methods as \u0026ldquo;abstract methods\u0026rdquo; with no body. public abstract class Animal { public abstract void makeNoise(); // No method body! End it with a semicolon. } Abstraction rules: An abstract method mut belong to an abstract class. A concrete class cannot contains an abstract method. An abstract class means that it must be extended. An abstract method means that it must be overridden. A concrete subclass must have all the inherited abstract methods implemented. public abstract class Shape { protected int x, y; Shape (int _x, int -y) { x = _x; y = _y; } public abstract void draw(); public abstract void erase(); public void moveTo(int _x, int _y) { erase(); x = _x; y = _y; draw(); } } public class Circle extends Shape { private int radius; public Circle(int _x, int _y, int _radius) { super(_x, _y); radius = _radius; } public void draw() { System.out.println(\u0026#34;Drawing a circle at (\u0026#34; + x + \u0026#34;, \u0026#34; + y + \u0026#34;)\u0026#34;); } public void erase() { System.out.println(\u0026#34;Erasing a circle at (\u0026#34; + x + \u0026#34;, \u0026#34; + y + \u0026#34;)\u0026#34;); } } ","description":"Important OO Concepts What is Abstraction? Abstraction vs Inheritance design Abstract classes Abstract vs Concrete Abstract methods Important OO Concepts What is Abstraction? Abstraction: simplify a complex system by breaking down into smaller, fundamental parts: naming the parts explaining their functionality Abstraction vs Inheritance design Dog d = new Dog(); Cat c = new Cat(); $\\rightarrow$ We can imagine how Dog object and Cat object look like.\nAnimal anim = new Animal(); $\\rightarrow$ But, what does a generic Animal object look like?"},{"id":14,"href":"/OOP/08_interfaces/","title":"08. Interfaces in Java","parent":"Object Oriented Programming","content":" Important OO Concepts Why care about interfaces? What is Interface? Creating Interface Multiple inheritance with interface Extends vs Implements keyword Implement multiple interfaces Extend an interface with inheritance Important OO Concepts Why care about interfaces? What is Interface? In Java, interface is a special type of class which: Define a set of method prototypes. Does not provide the implementation for the prototypes. Can also define final constant. public interface Animal { public abstract void eat(); public abstract void travel(); } Creating Interface To define an interface: public interface Animal { // user keyword \u0026#34;interface\u0026#34; instead of \u0026#34;class\u0026#34; public abstract void eat(); // the methods are ALL abstract public abstract void travel(); } To implement an interface: public class Mammal implements Animal { // keyword \u0026#34;implements\u0026#34; public void eat() { System.out.println(\u0026#34;Mammal eats meat\u0026#34;); } // implement ALL methods in the interface public void travel() { System.out.println(\u0026#34;Mammal travels around\u0026#34;); // normal overriding methods } public int noOfLegs() { return 0; } } Multiple inheritance with interface Classes from difference inheritance trees can implement the same interface A class can implement multiple interfaces Extends vs Implements keyword A class Can \u0026ldquo;extend\u0026rdquo; only one class, i.e. ONE superclass Can \u0026ldquo;implement\u0026rdquo; MULTIPLE interfaces Implement multiple interfaces Class \u0026ldquo;SuperHero\u0026rdquo; \u0026ldquo;Extends\u0026rdquo; class \u0026ldquo;ActionCharacter\u0026rdquo;. \u0026ldquo;Implements\u0026rdquo; three interfaces \u0026ldquo;CanFight\u0026rdquo;, \u0026ldquo;CanSwim\u0026rdquo;, \u0026ldquo;CanFly\u0026rdquo;. interface CanFight { void fight(); } interface CanSwim { void swim(); } interface CanFly { void fly(); } class ActionCharacter { public void fight() { System.out.println(\u0026#34;Fight well\u0026#34;); } } class SuperHero extends ActionCharacter implements CanFight, CanSwim, CanFly { public void swim() { System.out.println(\u0026#34;Swim well\u0026#34;); } public void fly() { System.out.println(\u0026#34;Fly well\u0026#34;); } } Extend an interface with inheritance interface Monster { void menace(); } interface Lethal { void kill(); } interface Vampire extends Monster, Lethal { void drinkBlood(); } class VeryBadVampire implements Vampire { public void menace() { System.out.println(\u0026#34;menace\u0026#34;); } public void kill() { System.out.println(\u0026#34;kill\u0026#34;); } public void drinkBlood() { System.out.println(\u0026#34;drinkBlood\u0026#34;); } } ","description":"Important OO Concepts Why care about interfaces? What is Interface? Creating Interface Multiple inheritance with interface Extends vs Implements keyword Implement multiple interfaces Extend an interface with inheritance Important OO Concepts Why care about interfaces? What is Interface? In Java, interface is a special type of class which: Define a set of method prototypes. Does not provide the implementation for the prototypes. Can also define final constant. public interface Animal { public abstract void eat(); public abstract void travel(); } Creating Interface To define an interface: public interface Animal { // user keyword \u0026#34;interface\u0026#34; instead of \u0026#34;class\u0026#34; public abstract void eat(); // the methods are ALL abstract public abstract void travel(); } To implement an interface: public class Mammal implements Animal { // keyword \u0026#34;implements\u0026#34; public void eat() { System."},{"id":15,"href":"/OOP/09_exceptions/","title":"09. Exceptions","parent":"Object Oriented Programming","content":" What is Exception? Example: open file Example: invalid input Example: divide by zero Throwing Exceptions Throw point Catching exceptions How try and catch work? Finally block How finally block works? Eample: finally block Java Exception Hierarchy Handling exceptions Exception handling methods Rethrowing exceptiosn Tracing exceptions What is Exception? Exception is an indication of problem that arises during the execution of a program. Exception happens in case of: Designing errors. Programming errors. Data errors. System errors. \u0026hellip; Example: open file 1 2 3 4 5 6 7 8 9 10 11 12 import java.io.PrintWriter; import java.io.File; class FileWriter { public static void write(String path, String content) { File file = new File(path); PrintWriter out = new PrintWriter(file); // open file to write out.println(content); out.close(); } } -\u0026gt; javac FileWriter.java FileWriter.java:7:error: unsupported exception FileNotFoundException; must be caught or declared to be thrown PrintWriter out = new PrintWriter(file); # compile-time error 1 error Example: invalid input 1 2 3 4 5 6 7 8 9 10 11 12 13 import java.util.*; public class TestException { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.println(\u0026#34;Numerator: \u0026#34;); int numerator = scanner.nextInt(); // what happens if input isn\u0026#39;t integer System.out.println(\u0026#34;Denominator: \u0026#34;); int denominator = scanner.nextInt(); // what happens if input isn\u0026#39;t integer int result = numerator/denominator; System.out.println(\u0026#34;\\nResult: \u0026#34; + result); } } -\u0026gt; javac TestException.java -\u0026gt; java TestException Numerator: abc Exception in thread \u0026#34;main\u0026#34; java.util.InputMismatchException # runtime error by invalid integer input \u0026#34;abc\u0026#34; at java.util.Scanner.throwFor(Unknown source) at java.util.Scanner.next(Unknown source) at java.util.Scanner.nextInt(Unknown source) at java.util.Scanner.nextInt(Unknown source) at TestException.main(TestException.java:9) Example: divide by zero 1 2 3 4 5 6 7 8 9 10 11 12 13 import java.util.*; public class TestException { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.println(\u0026#34;Numerator: \u0026#34;); int numerator = scanner.nextInt(); System.out.println(\u0026#34;Denominator: \u0026#34;); int denominator = scanner.nextInt(); int result = numerator/denominator; // what happens if denominator is zero System.out.println(\u0026#34;\\nResult: \u0026#34; + result); } } -\u0026gt; javac TestException.java -\u0026gt; java TestException Numerator: 10 Denominator: 0 Exception in thread \u0026#34;main\u0026#34; java.lang.ArithmeticException: / by zero # runtime error by divide by zero at TestException.main(TestException.java:10) Throwing Exceptions Exception is thrown to an object that contains information about the error. throws clause - specifies types of exceptions a method may throw Thrown exceptions can be: in method\u0026rsquo;s body, or from method\u0026rsquo;s header class Fraction { private int numerator, denominator; public Fraction(int n, int d) throws ArithmeticException { // declare what type of exception the method might throw if (d == 0) { throw new ArithmeticException(\u0026#34;Denominator cannot be zero\u0026#34;); // an ArithmeticException object is created and thrown in method\u0026#39;s body } numerator = n; denominator = d; } } public class TestException { public static void main(String[] args) { try { Fraction f = new Fraction(10, 0); // an ArithmeticException object is thrown from method\u0026#39;s header } catch (ArithmeticException e) { System.out.println(e.getMessage()); } } } Throw point import java.util.*; public class TestException { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.println(\u0026#34;Numerator: \u0026#34;); int numerator = scanner.nextInt(); //... } } -\u0026gt; javac TestException.java -\u0026gt; java TestException Numerator: abc Exception in thread \u0026#34;main\u0026#34; java.util.InputMismatchException at java.util.Scanner.throwFor(Unknown source) # throw point at java.util.Scanner.next(Unknown source) at java.util.Scanner.nextInt(Unknown source) at java.util.Scanner.nextInt(Unknown source) at TestException.main(TestException.java:9) Catching exceptions Syntax: try { // throw an exception } catch (TypeOfException e) { // handle the exception } Seperate the code that describes what you want to do (program logic) from the code that is executed when things go wrong (error handling) try block - program logic: encloses code that might throw an exception and the code that should not be executed if an exception occur. catch block - error handling: catches and handles exceptions A catch block can catch: Exception of the declared type: catch (IOException e) { // catch exceptions of type IOException } Exception of subclass of the declared type: catch (IOException e) { // catch exceptions of type FileNotFoundException // or EOFException... } Uncaught exception: an exception that occurrs when no catch block matches. How try and catch work? Finally block Optional is a try statement. Placed after last catch block. Always executed, regardless of whether an exception is thrown or not, except when application exits (e.g. using System.exit()). Often contains resouce-release code (e.g. closing files, network connections, database connections, etc.) try { //... } catch (ExceptionType1 e) { //... } catch (ExceptionType2 e) { //... } finally { //... } How finally block works? Eample: finally block 1 2 3 4 5 6 7 8 9 10 11 12 public class TestFinallyBlock { public static void main(String[] args) { try { int[] myNumbers = {1, 2, 3}; System.out.println(myNumbers[10]); } catch (Exception e) { System.out.println(\u0026#34;Something went wrong.\u0026#34;); } finally { System.out.println(\u0026#34;The \u0026#39;try catch\u0026#39; is finished.\u0026#34;); } } } -\u0026gt; javac TestFinallyBlock.java -\u0026gt; java TestFinallyBlock Something went wrong. The \u0026#39;try catch\u0026#39; is finished. Java Exception Hierarchy Handling exceptions The goal is to resolve exceptions so that the program can continue to run or terminate gracefully. Handling exception enables programmers to write code that is more robust and reliable. Exception handling methods Three choices to put to a method:\ncatch and handle: try and catch blocks. pass it on to the methods\u0026rsquo;s caller: throws exceptions. catch, handle, then pass it on: re-thrown exceptions. Rethrowing exceptiosn Exeptions can be re-thrown when a catch block decides that: it cannot process the exception, or it can process the exception only partially. Example: try { //... } catch (ExceptionType1 e) { //... } catch (ExceptionType2 e) { System.out.println(e.getMessage()); throw e; } Tracing exceptions Can use printStackTrace() method to trace back to the point where the exception was thrown. 1 2 3 4 5 6 7 8 9 10 11 12 13 public class TestFinallyBlock { public static void main(String[] args) { try { String a = null; System.out.println(\u0026#34;a is \u0026#34; + a.toLowerCase()); } catch (NullPointerException e) { System.out.println(\u0026#34;Something went wrong.\u0026#34;); e.printStackTrace(); } finally { System.out.println(\u0026#34;The \u0026#39;try catch\u0026#39; is finished.\u0026#34;); } } } -\u0026gt; javac TestFinallyBlock.java -\u0026gt; java TestFinallyBlock Something went wrong. java.lang.NullPointerException at TestFinallyBlock.main(TestFinallyBlock.java:6) The \u0026#39;try catch\u0026#39; is finished. ","description":"What is Exception? Example: open file Example: invalid input Example: divide by zero Throwing Exceptions Throw point Catching exceptions How try and catch work? Finally block How finally block works? Eample: finally block Java Exception Hierarchy Handling exceptions Exception handling methods Rethrowing exceptiosn Tracing exceptions What is Exception? Exception is an indication of problem that arises during the execution of a program. Exception happens in case of: Designing errors. Programming errors."},{"id":16,"href":"/ProbStats/Exercises/09/","title":"09. Limit theorem","parent":"Exercises","content":" Exercise 1 Exercise 1 The independent random variables X and Y each have normal distributions. The means of X and Y are 8 and 14 respectively, and the variances are 7 and 16, respectively. Find the following probabilities, giving your answers correct to 3 significant figures.\na. $P(X \u0026lt; 10)$\nb. $P(X \u0026lt; ̄10)$, where X ̄is the mean of a sample 3 independent observations of X. c. $P(X \u0026lt; Y)$\nd. $P (2X \u0026gt; Y1 +Y2 +Y3)$, where $Y1$, $Y2$ and $Y3$ are 3 independent observations of Y.\n","description":"Exercise 1 Exercise 1 The independent random variables X and Y each have normal distributions. The means of X and Y are 8 and 14 respectively, and the variances are 7 and 16, respectively. Find the following probabilities, giving your answers correct to 3 significant figures.\na. $P(X \u0026lt; 10)$\nb. $P(X \u0026lt; ̄10)$, where X ̄is the mean of a sample 3 independent observations of X. c. $P(X \u0026lt; Y)$"},{"id":17,"href":"/ProbStats/1_BasicProb1/","title":"1. Basic Probability 1","parent":"Probability and Statistics","content":" I. Probability Theorem Overview 1. What is probability? 2. A probabilistic model II. Sample Space 1. Definition 2. Conditions 3. Set theorem Mathematical background: sets Probabilistic model III. Probability laws 1. Definition Probability Axiom 2. Uniform law Discrete uniform law Example A Continuous uniform law Probability calculation steps I. Probability Theorem Overview 1. What is probability? Provides rules for systematically thinking about uncertain situations. Definitions of probabilities:\nPhysical tendencies. Long-term frequency (repeatable). Degree of belief. The definitions complete each other. In this course, probabilities are viewed as a measure that satisfies the Kolmogorov axioms. Probability can be used to make predictions: data from real world $\\rightarrow$ inference/statistics $\\rightarrow$ good models for probability theory (aka analysis) $\\rightarrow$ prediction/decision to real world. 2. A probabilistic model A probabilistic model is a quantitative description of an experiment whose outcome is uncertain.\nTossing a coin: $\\Omega = {H, T}$. Rolling a die: $\\Omega = {1, 2, 3, 4, 5, 6}$. Take in an exam: $\\Omega = {A, B, C, D, F}$. Putting together a probabilistic model:\nStep 1: define the possible outcomes (a.k.a sample space) $\\Omega$. Step 2: specify a probability law, which describe the likelihood of each outcome. II. Sample Space 1. Definition A sett of all possible outcomes $\\Omega$. All elements must be\nmutually exclusive. collectively exhaustive. 2. Conditions All elements must be Mutually exclusive (no overlap). Collectively exhaustive (cover all possible outcomes). $\\Omega$ could be discrete, continuous, finite, infinite,\u0026hellip; Discrete/finite: two rolls of a 4-side dice: 4 x x x x 3 x x x x 2 x x x x 1 x x x x 1 2 3 4 Throw a dart at a rectangular board: $\\Omega = ((x, y) | 0 \u0026lt; x, y \u0026lt; 1| x, y \\in \\mathbb{R})$. 3. Set theorem Mathematical background: sets Empty set: $\\emptyset$, Universal set: $\\Omega$. Considering 5 sets: $\\Omega = {1, 2, \u0026hellip;, 10}$. $A = {1, 3, 5, 7, 9}$. $B = {2, 4, 6, 8, 10}$. $C = {1, 2, 3, 4, 5}$. $D = {4, 8}$. Notation: Intersection: $A \\cap C = {1, 3, 5, 7, 9} \\cap {1, 2, 3, 4, 5} = {1, 3, 5}$. Union: $A \\cup C = {1, 3, 5, 7, 9} \\cup {1, 2, 3, 4, 5} = {1, 2, 3, 4, 5, 7, 9}$. Compliment: $A^c = \\Omega \\setminus A = {2, 4, 6, 8, 10}$. Disjoint: $A \\cap B = \\emptyset$. Subset: $A \\subset \\Omega$. De Morgan\u0026rsquo;s laws: $(A \\cup B)^c = A^c \\cap B^c$. $(A \\cap B)^c = A^c \\cup B^c$. Probabilistic model Is a mathematical description of a random phenomenon.\nRoll a die: $\\Omega = {1, 2, 3, 4, 5, 6}$. Splitting a deck of cards into two piles: $\\Omega = {1, 2, \u0026hellip;, 52}$. Putting together such a model involves 2 key steps\nDefine the sample space $\\Omega$. Define the probability distribution $P$. III. Probability laws 1. Definition Probability Axiom Event is a subset of the sample space. Probability is assigned to an outcome event. Example when rolling a dice: $\\Omega = {1, 2, 3, 4, 5, 6}$. An outcome: one of the six numbers. An event: \u0026ldquo;when the outcomes are even\u0026rdquo;, \u0026ldquo;when the outcomes are odd\u0026rdquo;, \u0026ldquo;when the outcomes are 1 or 2\u0026rdquo;, \u0026ldquo;when the outcomes are 1 or 2 or 3\u0026rdquo;,\u0026hellip; Probabilities must satisfy the following properties:\nNormalization: $P(\\Omega) = 1$. Non-negative: $P(A) \\geq 0$. Additivity: $P(A \\cup B) = P(A) + P(B)$ if $A \\cap B = \\emptyset$. $P(A) \\leq 1$. $P(\\emptyset) = 0$. $P(A^c) = 1 - P(A)$. If $A \\cap B \\cap C$ then $A \\cup B \\cup C = P(A) + P(B) + P(C)$. If $A \\subset B$ then $P(A) \\leq P(B)$. $P(A \\cup B) = P(A) + P(B) - P(A \\cap B)$. 2. Uniform law Discrete uniform law $\\Omega$ consists of $n$ equally likely elements. $A$ consists of $k$ elements. $\\rightarrow$ Then $P(A) = \\frac{\\text{number of elements in A}}{\\text{number of elements in }\\Omega} = \\frac{k}{n}$. Example Two rolls of a fair 4-sided dice:\n4 x x x x 3 x x x x 2 x x x x 1 x x x x 1 2 3 4 X: First roll\nY: Second roll\nEvery possible outcome has probability $\\frac{1}{16}$.\n$P(X = 1) = P(Y = 1) = \\frac{1}{16}$. $Z = min(X, Y) = \\text{\\{}1, 2, 3, 4\\text{\\}}$ $P(Z = 1) = P(X = 1 \\cap Y = 1) = P(X = 1)P(Y = 1) = \\frac{1}{16} \\times \\frac{1}{16} = \\frac{1}{256}$. $P(Z = 2) = P(X = 2 \\cap Y = 2) = P(X = 2)P(Y = 2) = \\frac{1}{16} \\times \\frac{1}{16} = \\frac{1}{256}$. A Continuous uniform law $(x, y)$ such that $0 \u0026lt; x, y \u0026lt; 1$ and $x, y \\in \\mathbb{R}$.\\\nUniform law: Probability = Aree. Let\u0026rsquo;s calculate:\n$P((x, y) | x+y \\leq \\frac{1}{2}) = \\frac{1}{2} \\times \\frac{1}{2} = \\frac{1}{4}$. $P({0.3, 0.7}) = \\frac{0.3}{1} \\times \\frac{0.7}{1} = \\frac{21}{100}$. Probability calculation steps Specify the sample space $\\Omega$. Specify the probability law $P$. Identify an event of interest $A$. Calculate the desired probability $P(A)$. Given $|a| \u0026lt; 1$ $$\\sum_{i=0}^{\\infty} \\alpha^i = \\frac{1}{1-\\alpha}$$\n","description":"I. Probability Theorem Overview 1. What is probability? 2. A probabilistic model II. Sample Space 1. Definition 2. Conditions 3. Set theorem Mathematical background: sets Probabilistic model III. Probability laws 1. Definition Probability Axiom 2. Uniform law Discrete uniform law Example A Continuous uniform law Probability calculation steps I. Probability Theorem Overview 1. What is probability? Provides rules for systematically thinking about uncertain situations. Definitions of probabilities:\nPhysical tendencies. Long-term frequency (repeatable)."},{"id":18,"href":"/AlgebraicStructures/1_Introduction/","title":"1. Introduction to Algebraic Structures","parent":"Algebraic Structures","content":" I. Introduction 1. Algebra (meaning: \u0026lsquo;reunion of broken parts\u0026rsquo;) 2. Why study algebra? II. Applications with Algebra 1. Information 2. Applications 3. Cryptography 4. Coding theory III. Terminology IV. Number system 1. Properties of $\\text{ }\\mathbb{R}$ 2. Properties of $\\text{ }\\mathbb{C}$ 3. Properties of $\\text{ }\\mathbb{Q}$ 4. Properties of $\\text{ }\\mathbb{Z}$ V. The integers VI. Mathematical induction I. Introduction 1. Algebra (meaning: \u0026lsquo;reunion of broken parts\u0026rsquo;) Algebra is the study of mathematical symbols and the rules for manipulating these symbols. It includes the everything from elementary equation solving to the study of abstractions such as groups, rings, and fields. 2. Why study algebra? Algebra is a powerful tool, its use is widely applied in many domains. All modern technologies relies on mathematics and algebra. Numerical methods, image processing, machine learning, etc. Studying algebraic helps your mind to think logically and break down problems into smaller pieces to solve them. II. Applications with Algebra 1. Information The values of the variables are the truth values true and false, usually denoted 1 and 0 respectively (or bit in computer). The basic operations:\nAND (conjunction, ∧) OR (disjunction, ∨) NOT (negation, ¬) bit $\\rightarrow$ byte\n2. Applications Data transfer: bits and bytes are transmitted one at a time in serial transmission. Storage: bits and bytes are used to store data in digital devices. Bar code: barcode is a visual, machine-readable representation of data. 3. Cryptography Cryptography is the study of sending and receiving secret messages.\nThe message to be sent is called the plaintext. The disguised message is called the ciphertext. The plaintext and the cipher-text are both written in an alphabet, consisting of letters or characters. A crypto-system, or cipher:\nEncryption: the process of transforming plaintext into ciphertext message. Decryption: the reverse transformation of changing ciphertext into plaintext message. One of the first and most famous private key cryptosystems was the shift code used by Julius Caesar:\nDigitize the alphabet by letting: $A = 00, B = 01, C = 02, \\dots, Z = 25$. Encoding function: $E(x) = (x + k) \\mod 26$. That is, $A \\rightarrow D, B \\rightarrow E, \\dots, Z \\rightarrow C$. Suppose we receive the encoded message DOJHEUD. To decode this message, we have to digitize it: $$3; 14; 9; 7; 4; 20; 3$$ Next we apply the inverse transformation to get $$0; 11; 6; 4; 1; 17; 0$$ $\\rightarrow$ RSA Cryptosystem.\n4. Coding theory A problem is raised when sending a message over a channel that could be affected by noise. THe task is to encode and decode the information in a manner tha will allow the detection, and possibly the correction, of errors caused by noise. Suppose that the message to be encoded is a binary n-tuple ($x_1, x_2, \\dots, x_n$) The message is encoded into a binary 3n-tuple by simply repeating the message three times: $(x_1, x_2, \\dots, x_n) \\rightarrow (x_1, x_2, \\dots, x_n; x_1, x_2, \\dots, x_n; x_1, x_2, \\dots, x_n)$ The original message is (0110), then the transmitted message will be (0110 0110 0110). If the received codeword will be (0110 1110 0110), which will be correctly decoded as (0110). III. Terminology A statement in logic or mathematics is an assertion that is either true or false.\n$5+3-1 \\times 0$ All cats are black $5\u0026lt;0$ $2x=6$ when $x=4$ $f(x)=x^3+2x+10$ A mathematical proof is nothing more than a convincing argument about the accuracy of a statement. Often a complex statement: If p, then q where p and q are both statements.\np - hypothesis q - conclusion Consider the following example: if $ax^2 + bc + c = 0$ and $a \\neq 0$, then: $$ x = \\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}$$ If this entire statement is true and we can show that the hypothesis $ax^2 + bx+ c = 0$ with $a = 0$ is true, then the conclusion must be true.\nDefinition: a precise and unambiguous description of the meaning of a mathematical term. It characterizes the meaning of a word by giving all the properties and only those properties that must be true. Axiom: a statement that is assumed to be true without proof. These are the basic building blocks from which all theorems are proved. Theorem: a mathematical statement that is proved using rigorous mathematical reasoning. In a mathematical paper, the term theorem is often reserved for the most important results. Lemma: a minor result whose sole purpose is to help in proving a theorem. It is a stepping stone on the path to proving a theorem. Proposition: a proved and often interesting result, but generally less important than a theorem. IV. Number system Consider the traditional number systems\n$\\mathbb{N} = {0; 1; 2; \\dots} \\rightarrow \\text{the natural numbers}$ $\\mathbb{Z} = {\\dots, -2, -1, 0, 1, 2, \\dots} \\rightarrow \\text{the integers}$ $\\mathbb{Q} = \\frac{\\mathbb{Z}}{\\mathbb{Z}} \\rightarrow \\text{the rational numbers}$ $\\mathbb{R} \\rightarrow \\text{the real numbers}$ $\\mathbb{C} \\rightarrow \\text{the complex numbers}$ $$\\text{and}$$ $$\\mathbb{N} \\subset \\mathbb{Z} \\subset \\mathbb{Q} \\subset \\mathbb{R} \\subset \\mathbb{C}$$ 1. Properties of $\\text{ }\\mathbb{R}$ Addition for each pair of real numbers a and b there exists a unique real number a + b such that:\n$+$ is a commutative and associative operation. There exists in $\\mathbb{R}$ a zero, 0, for addition: $a + 0 = 0 + a = a$ for all $a \\in \\mathbb{R}$. For each $a \\in \\mathbb{R}$, there exists an additive inverse $a \\in \\mathbb{R}$ such that $a + (a) = (a) + a = 0$. Multiplication for each pair of real numbers a and b there exists a unique real number $a \\times b$ such that:\n$\\times$ is a commutative and associative operation. There exists in $\\mathbb{R}$ an identity, 1, for multiplication: $a \\times 1 = 1 \\times a = a$ for all $a \\in \\mathbb{R}$. For each $a \\in \\mathbb{R}$, there exists an additive inverse $a^{-1} \\in \\mathbb{R}$ such that $a \\times a^{-1} = a^{-1} \\times a = 1$. Order properties: $\\mathbb{R}$ come with an order relation: for all $a, b \\in \\mathbb{R}$, we have exactly one of the following three possibilities:\n$a \u0026lt; b$ $a = b$ $a \u0026gt; b$ COmpleteness axiom: equivalent to statement that any infinite string of decimal digits.\n2. Properties of $\\text{ }\\mathbb{C}$ $\\mathbb{C}$ has arithmetic properties just the same as those for $\\mathbb{R}$, except order.\nPolynomials (with real or complex coefficients) always have a full complement of roots in $\\mathbb{C}$ or $\\mathbb{C}$ (working for quadratic polynomials function when $\\Delta \u0026lt; 0$).\n3. Properties of $\\text{ }\\mathbb{Q}$ $\\mathbb{Q}$ has the same arithmetic properties and order as those for $\\mathbb{R}$ except completeness order.\n4. Properties of $\\text{ }\\mathbb{Z}$ In $\\mathbb{Z}$, multiplication doesn\u0026rsquo;t have the same properties, e.g. there is no $n \\in \\mathbb{Z}$ such that $2 \\times n = 1$.\nV. The integers The integers mod n also partition $\\mathbb{Z}$ into n different equivalence classes; we will denote the set of these equivalence classes by $\\mathbb{Z}_n$. We can have a table called a Cayley table.\n$$\\text{Multiplication table for }\\mathbb{Z}_8$$\n$\\times$ $0$ $1$ $2$ $3$ $4$ $5$ $6$ $7$ $0$ $0$ $0$ $0$ $0$ $0$ $0$ $0$ $0$ $1$ $0$ $1$ $2$ $3$ $4$ $5$ $6$ $7$ $2$ $0$ $2$ $4$ $6$ $0$ $2$ $4$ $6$ $3$ $0$ $3$ $6$ $1$ $4$ $7$ $2$ $5$ $4$ $0$ $4$ $0$ $4$ $0$ $4$ $0$ $4$ $5$ $0$ $5$ $2$ $7$ $4$ $1$ $6$ $3$ $6$ $0$ $6$ $4$ $2$ $0$ $6$ $4$ $2$ $7$ $0$ $7$ $6$ $5$ $4$ $3$ $2$ $1$ Build a Cayley table for addition in $\\mathbb{Z}_5$.\n$$\\text{Addition table for }\\mathbb{Z}_5$$\n$\\times$ $0$ $1$ $2$ $3$ $4$ $0$ $0$ $1$ $2$ $3$ $4$ $1$ $1$ $2$ $3$ $4$ $0$ $2$ $2$ $3$ $4$ $0$ $1$ $3$ $3$ $4$ $0$ $1$ $2$ $4$ $4$ $0$ $1$ $2$ $3$ The following examples illustrate integer arithmetic modulo n.\n$$ 7 + 1 \\equiv 1 (\\text{mod } 5)$$ $$ 7 + 1 \\equiv 0 (\\text{mod } 8)$$ $$ 7 + 1 \\equiv 8 (\\text{mod } 9)$$\nVI. Mathematical induction A mathematical proof technique requires:\nThe base case proves that the property holds for a certain number (often $n = 0$ or $1$). The induction step proves that, if the property holds for one natural number $n$, then it holds for the next natural number $n + 1$. We wish to prove that: $$ 1 + 2 + \\dots + n = \\frac{n(n + 1)}{2}$$ This formula is true for $n = 1$ since: $$ 1 = \\frac{1(1 + 1)}{2}$$ We suppose that it is true for the first $n$ cases, $$ 1 + 2 + \\dots + n = \\frac{n(n + 1)}{2}$$ then we have to prove that it is true for $(n+1)$th case $$ 1 + 2 + \\dots + (n + 1) = \\frac{n(n + 1) + 1}{2} + n + 1$$ $$ = frac{n^2 + 3n + 2}{2}$$ $$ = \\frac{(n+1)((n+1)+1)}{2}$$ Intuitively, a function is a process that associates to each element of a set X a single element of a set Y. $$\\text{Domain } X = \\text{\\{}1, 2, 3\\text{\\}} \\text{ and codomain } y = \\text{\\{} A, B, C, D \\text{\\}}$$ $$\\text{the function } f: X \\rightarrow Y \\text{is defined by the set of pairs} \\text{\\{} (1, D), (2, C), (3, C) \\text{\\}}$$\nIntuitively, an injective (or one-to-one) function never maps distinct elements of its domain to the same element of its co-domain. $$\\text{Which one is injection?}$$\nA surjective (or onto) function is defined if for every element y in the co-domain Y, there is at least one element X in the domain X such that $f(x) = y$. $$\\text{Which one is surjection?}$$\n","description":"I. Introduction 1. Algebra (meaning: \u0026lsquo;reunion of broken parts\u0026rsquo;) 2. Why study algebra? II. Applications with Algebra 1. Information 2. Applications 3. Cryptography 4. Coding theory III. Terminology IV. Number system 1. Properties of $\\text{ }\\mathbb{R}$ 2. Properties of $\\text{ }\\mathbb{C}$ 3. Properties of $\\text{ }\\mathbb{Q}$ 4. Properties of $\\text{ }\\mathbb{Z}$ V. The integers VI. Mathematical induction I. Introduction 1. Algebra (meaning: \u0026lsquo;reunion of broken parts\u0026rsquo;) Algebra is the study of mathematical symbols and the rules for manipulating these symbols."},{"id":19,"href":"/FundamentalsDatabases/1_Overview/","title":"1. Overview","parent":"Fundamentals of Databases","content":" I. Introduction, basic definitions 1. Why study databases? 2. Database application examples 3. Databases are everywhere 4. Basic definitions 5. A sample database 6. Main Characteristics of a Database Approach II. History of databases 1. History of DB Technology III. Trends in database technology 1. DB Technology\u0026rsquo;s Trends 3-Tier Architecture Client-Server Model IV. Database management systems 1. What is DBMS? 2. Relational database 3. Typical DMBS functionalities 4. Database users 5. Database languages 6. DBMS structure 7. RDBMS products dominate the DBMS industry 8. Advantages of using the database approach: 9. When not to use a DBMS I. Introduction, basic definitions 1. Why study databases? Beside computation we need to store and exploit data to get desired information. Databases relate to most of domains in Computer Science: Information system, OS, languages, data-mining, multimedia, \u0026hellip; Datasets increasing in diversity and volume. Airline Reservation, Banking, Medicine, Corporate Digital libraries, interactive video, Human Genome project, EOS project \u0026hellip; 2. Database application examples Contact list Items on e-commerce sites 3. Databases are everywhere Applications: Online retailers: e-commerce, order tracking, customized recommendations Banking: transaction Airlines: reservation, schedules Universities: registration, grades Sales: customers, products, purchases Manufacturing: inventory, production, orders, supply chain Human resources: employees records, salaries, tax deductions Social networks platforms 4. Basic definitions Data: Known facts that can be recorded and have an implicit meaning Anything in a form suitable for use with a computer Distinguished from program (Wikipedia) Database: Nothing more than a collection of data existing over a long period of time Purposes To store data To provide an organizational structure for data To provide a mechanism for creating, modifying, deleting, and querying data Database Management System (DBMS) A software package/ system to facilitate the creation and maintenance of a computerized database. Database System The DBMS software together with the data itself. Sometimes, the applications are also included. 5. A sample database 6. Main Characteristics of a Database Approach Self-describing nature of a database system: A DBMS catalog stores the description of the database. (The description of the database is called metadata.) Isolation between programs and data: program-data independence. Allows changing data storage structures and operations without having to change the DBMS access programs. Data Abstraction: A data model is used to hide storage details and present the users with a conceptual view of the database. Support of multiple view of the data: Each user may see a different view of the database, which describes only the data of interest to that user. II. History of databases 1. History of DB Technology The first DBMS evolved from file systems. Late 60s: 199: Charles Bachman network data model. IBM IMS hierarchical data model. 70s: Edgar Codd relational data model. SQL was developed by IBM. 1979: Oracle Version 2, the first commercial RDBMS product using SQL. 80s: SQL IBM R was introduced in 1981 (based on Codd\u0026rsquo;s research) Late 80s-90s: DB2, Oracle, Informix, Sybase. OODBMS: Object-oriented DBMS was introduced. 90s: SQL was standardized by ANSI and ISO in 1992. From 2000: XML. db4o. NoSQL: ScyllaDB, MongoDB, CouchDB, Redis, Cassandra, HBase, Neo4j, Riak, \u0026hellip; III. Trends in database technology 1. DB Technology\u0026rsquo;s Trends Smaller and Smaller Systems Past: DBMSs were large, complex, costly and can only run on large computers. Today: DBMSs are small, simple, cheap and can run anywhere, even on mobile devices. Bigger and Bigger Systems Parallelism: DBMSs can now run on large clusters of computers. Distributed DBMSs: DBMSs can now run on multiple computers. Client-server and multi-tier architectures DBMSs are servers, clients are applications. 2-tier: client and server are on the same machine. 3-tier: client and server are on different machines. Multimedia data: Common form: images, audio, video, \u0026hellip; Large file sizes. Information integration: Data warehouse: a large database that stores data from multiple sources. Data mining: extracting useful information from large databases. 3-Tier Architecture Client-Server Model Data on the Web and E-commerce applications XML: eXtensible Markup Language \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;BARS\u0026gt; \u0026lt;BAR\u0026gt; \u0026lt;NAME\u0026gt;Joe\u0026#39;s Bar\u0026lt;/NAME\u0026gt; \u0026lt;BEER\u0026gt; \u0026lt;NAME\u0026gt;Bud\u0026lt;/NAME\u0026gt; \u0026lt;PRICE\u0026gt;2.5\u0026lt;/PRICE\u0026gt; \u0026lt;/BEER\u0026gt; \u0026lt;BEER\u0026gt; \u0026lt;NAME\u0026gt;Miller\u0026lt;/NAME\u0026gt; \u0026lt;PRICE\u0026gt;3.0\u0026lt;/PRICE\u0026gt; \u0026lt;/BEER\u0026gt; \u0026lt;/BAR\u0026gt; \u0026lt;BAR\u0026gt;...\u0026lt;/BAR\u0026gt; \u0026lt;/BARS\u0026gt; New demand, new functionality Scientific applications. Image storage and management. Audio and video data management. Data mining. Time series and historical data management. $\\rightarrow$ Need more research and development DB systems. IV. Database management systems 1. What is DBMS? A DBMS is a software package designed to maintain and utilize databases. A very large, integrated collection of data. Models real-world enterprises. Entities (people, places, things) Relationships (how students are related to courses) Software that enables users to define, maintain the database and provide controlled access to the database. 2. Relational database Base on Codd\u0026rsquo;s theory. Is database that conforms to the relational model. The most commom DB model today. 3. Typical DMBS functionalities Define a database: in terms of data types, structures and constraints. Construct or load the database on a secondary storage medium. Manipulating the database: querying, generating, reports, insertions, deletions and modifications to its content. Concurrent processing and sharing by a set of users and programs - yet, keeping all data valid and consistent. 4. Database users Actors on the scene: Database administrators (DBA): responsible for authorizing access to the database, for co-ordinating and monitoring its use, acquiring software, and hardware resources, controlling its use and monitoring efficiency of operations. Database Designers: responsible to define the content, the structure, the constraints, and functions or transactions against the database. They must communicate with the end-users and understand their needs. End-users: they use the data for queries, reports and some of them actually update the database content. Workers behind the scene: DBMS system designers and implementers: design and implement the DBMS modules and interfaces as a software package. Tool developers: design and implement tool - the software packages that facilitate database system design and use, and help improve performance. Operators and maintenance personnel: system administration personnel who are responsible for the actual running and maintenance of the hardware and software environment for the database system. 5. Database languages DDL (Data Definition Language): Is computer language for defining the database structure. Initial: a subset of SQL: CREATE, ALTER, DROP, TRUNCATE, COMMENT, RENAME, \u0026hellip; Generic sense: any formal language for describing data or information structures, like XML, JSON, \u0026hellip; DML (Data Manipulation Language): Computer language used by computer programs or database users to retrieve, insert, delete and update data. Most Popular is SQL: SELECT, INSERT, UPDATE, DELETE Other: IMS/DLI, CODASYL databases (such as IDMS) 6. DBMS structure Single box: system components. Double box: memory data structures. Solid line: control \u0026amp; data flow. Dash line: data flow. 7. RDBMS products dominate the DBMS industry Relational databases are organized in tables. IBM bas DB2. Oracle has 9i. Microsoft has SQL Server. Sybase has SQLAnywhere,\u0026hellip; Teradata has V2R5.0 Teradata is also one of the industry leaders in data warehouse/store software and data mining. 8. Advantages of using the database approach: Providing backup and recovery services. Providing multiple interfaces to different classes of users. Representing complex relationships among data. Enforcing integrity constraints on the database. Drawing Inferences and Actions using rules 9. When not to use a DBMS Main inhibitors (costs) of using a DBMS: High initial investment and possible need for additional hardware. Overhead for providing generality, security, concurrency control, recovery, and integrity functions. When a DBMS may be unnecessary: If the database and applications are simple, well defined, and not expected to change. If there are stringent real-time requirements that may not be met because of DBMS overhead. If access to data by multiple users is not required. When no DBMS may suffice: If the database system is not able to handle the complexity of data because of modeling limitations. If the database users need special operations not supported by the DBMS. ","description":"I. Introduction, basic definitions 1. Why study databases? 2. Database application examples 3. Databases are everywhere 4. Basic definitions 5. A sample database 6. Main Characteristics of a Database Approach II. History of databases 1. History of DB Technology III. Trends in database technology 1. DB Technology\u0026rsquo;s Trends 3-Tier Architecture Client-Server Model IV. Database management systems 1. What is DBMS? 2. Relational database 3. Typical DMBS functionalities 4. Database users 5."},{"id":20,"href":"/SignalSystem/Exercises/01/","title":"1. Signal","parent":"Exercises","content":" 1.4 P.79 1.5 P.79 1.6 P.79 1.21 P.81 1.22 P.81 1.4 P.79 Let $x[n]$ be a signal with $x[n] = 0$ for $n\u0026lt;2$ and $n\u0026gt;4$. For each signal given below, detemine the values of $n$ for which it is guaranteed to be zero.\na. $x[n-3]$\nSolution 🧈 $x[n] = 0 \\forall n\u003c2$ and $n\u003e4$ $\\Rightarrow x[n-3] = 0 \\forall n-3\u003c2$ and $n-3\u003e4 \\\\ \\Leftrightarrow n\u003c5$ and $n\u003e7$ b. $x[n+4]$\nSolution 🧈 $x[n] = 0 \\forall n\u003c2$ and $n\u003e4$ $\\Rightarrow x[n+4] = 0 \\forall n+4\u003c2$ and $n+4\u003e4 \\\\ \\Leftrightarrow n\u003c-2$ and $n\u003e0$ c. $x[-n]$\nSolution 🧈 $x[n] = 0 \\forall n\u003c2$ and $n\u003e4$ $\\Rightarrow x[-n] = 0 \\forall -n\u003c2$ and $-n\u003e4 \\\\ \\Leftrightarrow n\u003e2$ and $n\u003c4$ d. $x[-n+2]$\nSolution 🧈 $x[n] = 0 \\forall n\u003c2$ and $n\u003e4$ $\\Rightarrow x[-n+2] = 0 \\forall -n+2\u003c2$ and $-n+2\u003e4$\n$\\Leftrightarrow -n\u003c0$ and $-n\u003e2$\n$\\Leftrightarrow n\u003e0$ and $n\u003c2$ e. $x[-n-2]$\nSolution 🧈 $x[n] = 0 \\forall n\u003c2$ and $n\u003e4$ $\\Rightarrow x[-n-2] = 0 \\forall -n-2\u003c2$ and $-n-2\u003e4$\n$\\Leftrightarrow -n\u003c4$ and $-n\u003e6$\n$\\Leftrightarrow n\u003e4$ and $n\u003c6$ 1.5 P.79 Let $x(t)$ be a signal with $x(t) = 0$ for $t\u0026lt;3$. For each signal given below, determine the value of $t$ for which it is guaranteed to be zero.\na. $x(1-t)$\nSolution 🧈 $x(t) = 0 \\forall t\u003c3$ $\\Rightarrow x(1-t) = 0 \\forall 1-t\u003c3$\n$\\Leftrightarrow -t\u003c2$\n$\\Leftrightarrow t\u003e2$ b. $x(1-t)+x(2-t)$\nSolution 🧈 $\\text{For } x(1-t)+x(2-t) = 0 \\text{ then } x(1-t) = 0$ and $x(2-t) = 0$ $x(1-t) = 0 \\forall 1-t\u003c3$\n$\\Leftrightarrow -t\u003c2$\n$\\Leftrightarrow t\u003e2$ $x(2-t) = 0 \\forall 2-t\u003c3$\n$\\Leftrightarrow -t\u003c1$\n$\\Leftrightarrow t\u003e1$ $\\Rightarrow x(1-t)+x(2-t) = 0 \\forall t\u003e2$ c. $x(1-t)x(2-t)$\nSolution 🧈 $\\text{For } x(1-t)x(2-t) = 0 \\text{ then } x(1-t) = 0$ or $x(2-t) = 0$ $x(1-t) = 0 \\forall 1-t\u003c3$\n$\\Leftrightarrow -t\u003c2$\n$\\Leftrightarrow t\u003e2$ $x(2-t) = 0 \\forall 2-t\u003c3$\n$\\Leftrightarrow -t\u003c1$\n$\\Leftrightarrow t\u003e1$ $\\Rightarrow x(1-t)x(2-t) = 0 \\forall t\u003e1$ d. $x(3t)$\nSolution 🧈 $x(t) = 0 \\forall t\u003c3$ $\\Rightarrow x(3t) = 0 \\forall 3t\u003c3$\n$\\Leftrightarrow t\u003c1$ e. $x(\\frac{t}{3})$\nSolution 🧈 $x(t) = 0 \\forall t\u003c3$ $\\Rightarrow x(\\frac{t}{3}) = 0 \\forall \\frac{t}{3}\u003c3$\n$\\Leftrightarrow t\u003c9$ 1.6 P.79 Determine whether or not each of the following signals in periodic:\na. $x_1(t) = 2e^{j(t+\\frac{\\pi}{4})}u(t)$\nb. $x_2[n] = u[n] + u[-n]$\nc. $x_3[n] = \\sum^{\\infty}_{k = -\\infty} \\delta[n-4k] - \\delta[n-1-4k]$\n1.21 P.81 A continuous-time signal $x(t)$ is shown in fig. P1.21. Sketch and label carefully each of the following signals:\nP1.21 a. $x(t-1)$\nb. $x(2-t)$\nc. $x(2t+1)$\nd. $x(4 - \\frac{t}{2})$\ne. $[x(t)+x(-t)]u(t)$\nf. $x(t)[\\delta(t+\\frac{3}{2})-\\delta(t-\\frac{3}{2})]$\n1.22 P.81 A discrete-time signal is shown in fig. P1.22. Sketch and label carefully each of the following signals:\nP1.22 a. $x[n-4]$\nb. $x[3-n]$\nc. $x[3n]$\nd. $x[3n+1]$\ne. $x[n]u[3-n]$\nf. $x[n-2]\\delta[n-2]$\ng. $\\frac{1}{2}x[n] + \\frac{1}{2}(-1)^n x[n]$\nh. $x[(n-1)^2]$\n","description":"1.4 P.79 1.5 P.79 1.6 P.79 1.21 P.81 1.22 P.81 1.4 P.79 Let $x[n]$ be a signal with $x[n] = 0$ for $n\u0026lt;2$ and $n\u0026gt;4$. For each signal given below, detemine the values of $n$ for which it is guaranteed to be zero. a. $x[n-3]$ Solution 🧈 $x[n] = 0 \\forall n\u003c2$ and $n\u003e4$ $\\Rightarrow x[n-3] = 0 \\forall n-3\u003c2$ and $n-3\u003e4 \\\\ \\Leftrightarrow n\u003c5$ and $n\u003e7$ b. $x[n+4]$"},{"id":21,"href":"/SignalSystem/1_Signals/","title":"1. Signals","parent":"Signals and Systems","content":" I. Objectives II. Classifying signals 1. Continuous-time and discrete-time signals 2. Analog vs digital signals 3. Periodic and aperiodic signals 4. Even and odd signals 5. Energy and power signals III. Signals\u0026rsquo; transformation 1. Time shift Time shift transformation Time shift summary 2. Time reversal Time reversal transformation Time reversal summary 3. Time scaling Time scaling transformation Time scaling summary IV. Elementary signals 1. Delta signal 2. Unit signal 3. Real exponential signal A signal is a function of one or more variables.\n1-dimensional signal: a speech signal. 2-dimensional signal: an image. 3-dimensional signal: a video. I. Objectives At the end of this lesson, you should be able to\nDistinguish different kinds of signals: continuous, discrete, analog, digital,\u0026hellip; Apply signals\u0026rsquo; transformation: time shift, time reversal, scaling II. Classifying signals There are many ways in which signals can be classified.\nContinuous-time and discrete-time signals. Alanog and digital signals. Periodic and aperiodic signals. Even and odd signals. Energy and power signals. 1. Continuous-time and discrete-time signals 2. Analog vs digital signals Continuous-valued vs discrete-valued signals.\n![](03_summary.webp \u0026ldquo;A quick summary\n3. Periodic and aperiodic signals A signal $x(t)$ is said to be periodic if for a positive constant $T_0$: $$x(t) = x(t + T_0) \\forall t$$\n4. Even and odd signals A signal $x(t)$ is said to be even if: $$x(t) = x(-t) \\forall t$$ and odd if: $$x(t) = -x(-t) \\forall t$$\n5. Energy and power signals Energy of a continuous-time signal $x(t)$ is defined as: $$E_x = \\int_{-\\infty}^{\\infty} |x(t)|^2 dt$$\nEnergy of a discrete-time signal $x[n]$ is defined as: $$E_x = \\sum_{n=-\\infty}^{\\infty} |x[n]|^2$$\nA signal having finite energy is called energy signal. Power of a signal is defined as the average energy of that signal over time. Power of a continuous-time signal $x(t)$ is defined as: $$P_x = \\lim_{T \\to \\infty} \\frac{1}{T} \\int_{-T/2}^{T/2} |x(t)|^2 dt$$\nPower of a discrete-time signal $x[n]$ is defined as: $$P_x = \\lim_{N \\to \\infty} \\frac{1}{2N+1} \\sum_{n=-N}^{N} |x[n]|^2$$\nIII. Signals\u0026rsquo; transformation 1. Time shift Time shift transformation Given a discrete signal $x(n)$, the time-shifted signal $x(n - \\tau)$ is defined as:\n$$y(n) = x(n - n_0)$$\nGiven $x(n) = [1, 3_{\\uparrow}, 2, 5]$, determine:\n$x(n - 2)$: shift the origin of the signal to the left by 2 samples.\n$\\Rightarrow [0_{\\uparrow}, 1, 3, 2, 5]$ $x(n + 3)$: shift the origin of the signal to the right by 3 samples.\n$\\Rightarrow [1, 3, 2, 5, 0_{\\uparrow}]$ Time shift summary Discrete Continuous 2. Time reversal Time reversal transformation Given a discrete signal $x(n)$, the time-reversed signal is defined as: $$y(n) = x(-n)$$\nGiven $x(n) = [1, 3_{\\uparrow}, 2, 5]$, determine:\n$x(-n)$: flip the signal around the origin. $\\Rightarrow [5, 2, 3_{\\uparrow}, 1]$ $x(3-n)$: $x(-n)$: flip the signal around the origin.\n$\\Rightarrow [5, 2, 3_{\\uparrow}, 1]$ $x(-n+3)$: shift the origin of the signal to the right by 3 samples.\n$\\Rightarrow [5, 2, 3, 1, 0, 0_{\\uparrow}]$ $x(-1-n)$ $x(-n)$: flip the signal around the origin.\n$\\Rightarrow [5, 2, 3_{\\uparrow}, 1]$ $x(-n-1)$: shift the origin of the signal to the left by 1 sample.\n$\\Rightarrow [5, 2_{\\uparrow}, 3, 1]$ Time reversal summary Discrete Continuous 3. Time scaling Time scaling transformation Given a signal x(t), the time scaling signal is defined as: $$y(t) = x(kt)$$\nGiven $x(t)$\nDetermine $x(\\frac{3}{2}t)$\nTime scaling summary IV. Elementary signals 1. Delta signal Other names: dirac delta, impulse $$\\delta[n] = \\begin{cases} 1 \u0026amp; n = 0 \\\\ 0 \u0026amp; n \\neq 0 \\end{cases}$$ 2. Unit signal Other names: step signal, unit step $$u[n] = \\begin{cases} 1 \u0026amp; n \\geq 0 \\\\ 0 \u0026amp; n \u0026lt; 0 \\end{cases}$$ 3. Real exponential signal Definition: the continuous-time real exponential signal is of the form: $$x(t) = Ce^{at}$$\nwhere $C$ and $a$ are real numbers.\n","description":"I. Objectives II. Classifying signals 1. Continuous-time and discrete-time signals 2. Analog vs digital signals 3. Periodic and aperiodic signals 4. Even and odd signals 5. Energy and power signals III. Signals\u0026rsquo; transformation 1. Time shift Time shift transformation Time shift summary 2. Time reversal Time reversal transformation Time reversal summary 3. Time scaling Time scaling transformation Time scaling summary IV. Elementary signals 1. Delta signal 2. Unit signal 3."},{"id":22,"href":"/ProbStats/Exercises/10/","title":"10. Review","parent":"Exercises","content":" Exercise 1 Exercise 2 Exercise 3 Exercise 4 Exercise 5 Exercise 6 Exercise 7 Exercise 8 Exercise 1 Find the number of different arrangements of the letters in the word \u0026ldquo;PERSEVERE\u0026rdquo; if\na. no 2 \u0026ldquo;E\u0026quot;s can be next to each other\nb. each arrangement must start and end with \u0026ldquo;S\u0026rdquo; and \u0026ldquo;P\u0026rdquo; with no 2 \u0026ldquo;E\u0026rdquo; together\nExercise 2 7 people, 4 women, 3 men, are forming a queue. Find how many different queues can be formed if\na. All 4 women stand next to each other.\nb. No 2 men stand next to each other.\nExercise 3 A fair 6-sided dice is thrown twice. Events A and B are defined as follows:\nA: The sum of the numbers on the 2 dice is 4. B: The first score is 2 or 5. Are A and B independent? Justify your answer.\nExercise 4 2 fair 6-sided dice are thrown. Events A and B are defined as follows:\nA: The sum of the numbers is even. B: The sum of the numbers either \u0026lt; 6 or a multiple of 4 or both. Are A and B independent? Justify your answer.\nExercise 5 Alice has 7 sweets in a tin: 6 coffee + 1 chocolate. She picks 1 sweet at random, her friend add 3 chocolates to the tin, then Alice picks another sweet at random.\na. Draw a tree diagram to show the possible outcomes.\nb. Let X be the number of coffee sweets picked by Alice. Find PMF of X.\nc. Find the mean of X.\nd. Find the probability that the first sweet is chocolate, given that the second sweet is coffee.\nExercise 6 Every year a freelance artist draws a large number of paintings and submits them for an art competition. Every painting has 0.952 chance of being judged as \u0026ldquo;excellent\u0026rdquo;.\na. Using suitable approximations, find the probability that more than 100 out of 110 paintings are judged as \u0026ldquo;excellent\u0026rdquo;.\nb. more than 78 out of 80 paintings are judged as \u0026ldquo;excellent\u0026rdquo;.\nExercise 7 What\u0026rsquo;s the shortest time within which at least 75% of reported lift breakdowns can be dealt with? Given that the time taken to deal with a breakdown follows a normal distribution with a mean of 65 minutes and a standard deviation of 60 minutes.\nExercise 8 The masses of honeydews are normally distributed with mean $\\mu$ kg and standard deviation 2 kg. The masses of rock melons are normally distributed with mean 1.5 kg and standard deviation 3 kg.\na. Given that $51%$ o the honeydews weigh less than $1.05kg$, show that $\\mu = 1$.\nb. Find the probability that:\n2 honeydews are more than twice as heavy as a rock melon. The difference between the mass of a honeydew and a rock melon is less than $0.5kg$.\nc. Honeydews are sold at $\\text{\\textdollar}2$ per kg and rock melons at $\\text{\\textdollar}3$ per kg. Find the probability that 2 honeydews and 1 rock melon are sold for more than $\\text{\\textdollar}10$. ","description":"Exercise 1 Exercise 2 Exercise 3 Exercise 4 Exercise 5 Exercise 6 Exercise 7 Exercise 8 Exercise 1 Find the number of different arrangements of the letters in the word \u0026ldquo;PERSEVERE\u0026rdquo; if\na. no 2 \u0026ldquo;E\u0026quot;s can be next to each other\nb. each arrangement must start and end with \u0026ldquo;S\u0026rdquo; and \u0026ldquo;P\u0026rdquo; with no 2 \u0026ldquo;E\u0026rdquo; together\nExercise 2 7 people, 4 women, 3 men, are forming a queue."},{"id":23,"href":"/OOP/10_streams_and_files/","title":"10. Streams and Files","parent":"Object Oriented Programming","content":" Data streams Types of streams InputStream hierarchy Methods of InputStream OutputStream hierarchy Methods of OutputStream Reader hierarchy Methods of Reader Writer hierarchy Methods of Writer Important types of streams Input/output stream object Use of buffered streams: Standard I/O streams The file class Create a File object File\u0026rsquo;s methods Manipulate text file Read from a text file Write to a text file Manipulate binary file DataInputStream/DataOutputStream Write primitive data Read primitive data File of objects The class RandomAccessFile Data streams Data are stored as a sequence of bytes: But, we can cosnider data as having some higher-level structure as being a sequence of characters or objects. Streams: a sequence of data that is read from a source or written to a destination. Source: file, memory, keyboard,\u0026hellip; Destination: file, memory, screen,\u0026hellip; Java programs send and receive data via objecs of some datat stream types. Streams: may be connected to a file on a floppy, a file on a hard disk, a network connection or may even just be in memory. We abstract away what the stream is connected to, and just focus on performing I/O operations on the stream. Types of streams Byte streams: manipulate data in bytes. 2 abstract classes are provided: InputStream OutputStream Character streams: manipulate data as Unicode text streams. 2 abstract classes are provided: Reader Writer InputStream hierarchy Methods of InputStream Method Description int read() reads next byte of data from input stream int read(byte[] b) reads \u0026ldquo;b.length\u0026rdquo; bytes from input stream to array \u0026ldquo;b\u0026rdquo; int read(byte[] b, int off, int len) reads \u0026ldquo;length\u0026rdquo; bytes from input stream to array \u0026ldquo;b\u0026rdquo;, starting from the \u0026ldquo;offset\u0026rdquo; address void close() closes input stream OutputStream hierarchy Methods of OutputStream Method Description void write(int b) writes the single byte \u0026ldquo;c\u0026rdquo; to output stream int write(byte[] b) write \u0026ldquo;b.length\u0026rdquo; bytes from array \u0026ldquo;b\u0026rdquo; to output stream int write(byte[] b, int off, int len) writes \u0026ldquo;length\u0026rdquo; bytes of array \u0026ldquo;b\u0026rdquo;, starting from the \u0026ldquo;offsett\u0026rdquo; address to output stream void close() closes output stream void flush() flushes the data stream from buffer to output stream Reader hierarchy Methods of Reader Method Description int read() reads next character of data from input stream int read(char[] c) reads \u0026ldquo;c.length\u0026rdquo; characters from input stream to array \u0026ldquo;c\u0026rdquo; int read(char[] c, int off, int len) reads \u0026ldquo;length\u0026rdquo; characters from input stream to array \u0026ldquo;c\u0026rdquo;, starting from the \u0026ldquo;offset\u0026rdquo; address void close() closes input stream Writer hierarchy Methods of Writer Method Description void write(int c) writes the single character \u0026ldquo;c\u0026rdquo; to output stream int write(char[] c) write \u0026ldquo;c.length\u0026rdquo; characters from array \u0026ldquo;c\u0026rdquo; to output stream int write(char[] c, int off, int len) writes \u0026ldquo;length\u0026rdquo; characters of array \u0026ldquo;c\u0026rdquo;, starting from the \u0026ldquo;offsett\u0026rdquo; address to output stream void close() closes output stream void flush() flushes the data stream from buffer to output stream Important types of streams InputStream/OuputStream: Base class streams with few features. FileInputSteam/FileOutputStream: Specifically for connecting to files. BufferedInputStream/BufferedOutputStream: Improve I/O performance by adding buffers. BufferedReader/BufferedWriter: Convert bytes to Unicode Char and String data. Input/output stream object To read or write data, we need a strweam object. The I/O stream objecet needs to be attached to a data source of a destination. BufferedReader in = new BufferedReader(new FileReader(\u0026lt;file_name\u0026gt;)); Use of buffered streams: Buffering is a technique for improving I/O performance. Read and write data in blocks. Reduce number of accesses to I/O devices. The program writes data to the buffer instead of output devices. When the buffer is full, data in buffer is pushed to the device in blocks. We can force data to be pushed by calling flush() method. The program reads data from the buffer instead of input devices. When the buffer is empty, data is retrieved from the input device in blocks. Standard I/O streams In java.lang package. System.out and System.err are PrintStream objects. Can be used directly: System.out.println(\u0026#34;Hello\u0026#34;); System.err.println(\u0026#34;Invalid day of month!\u0026#34;); System.in is an InputStream object. Used with InputStreamReader (character stream) and BufferedReader (stream with buffer) BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); The file class In java.io package. Provides basic operations on files and directories. Create files, open files, query directories information. Files are not streams. Create a File object File myFile; myFile = new File(\u0026lt;file_name\u0026gt;); myFile = new File(\u0026lt;directory_name\u0026gt;, \u0026lt;file_name\u0026gt;); Directories are treated the same as files. File myDir = new File(\u0026lt;directory_name\u0026gt;); File myFile = new File(myDir, \u0026lt;file_name\u0026gt;); File\u0026rsquo;s methods File/directory name String getName() String getPath() String getAbsolutePath() String getParent() boolean renameTo(File f) File/directory status boolean exists() boolean canWrite() boolean canRead() boolean isFile() boolean isDirectory() long lastModified() long length() boolean delete() Directory: boolean mkdir() String[] list() Manipulate text file Read from files: FileReader: read characters from text files. BufferedReader: buffered, read in lines. Write to files: FileWriter: write characters to text files. BufferedWriter: buffered, write in lines. Read from a text file public static void main(String[] args) { try { BufferedReader in = new BufferedReader(new FileReader(\u0026lt;file_name\u0026gt;)); String line; while ((line = in.readLine()) != null) { System.out.println(line); } in.close(); } catch (IOException e) { e.printStackTrace(); } } Write to a text file public static void main(String[] args) { try { BufferedWriter out = new BufferedWriter(new FileWriter(\u0026lt;file_name\u0026gt;)); out.write(\u0026#34;Hello\u0026#34;); out.newLine(); out.write(\u0026#34;World\u0026#34;); out.close(); } catch (IOException e) { e.printStackTrace(); } } Manipulate binary file Read: FileInputStream: read data from files. DataInputStream: read primitive data. ObjectInputStream: read objects. Write: FileOutputStream: write data to files. DataOutputStream: write primitive data. ObjectOutputStream: write objects. DataInputStream/DataOutputStream DataInputStream: read primitive data. readBoolean, readByte, readChar, readDouble, readFloat, readInt, readLong, readShort, readUTF DataOutputStream: write primitive data. writeBoolean, writeByte, writeChar, writeDouble, writeFloat, writeInt, writeLong, writeShort, writeUTF Write primitive data 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import java.io.*; public class WriteData { public static void main(String[] args) { int a[] = {1, 2, 3, 4, 5}; try { DataOutputStream out = new DataOutputStream(new FileOutputStream(\u0026lt;file_name\u0026gt;)); for (int i = 0; i \u0026lt; a.length; i++) { out.writeInt(a[i]); } out.close(); } catch (IOException e) { e.printStackTrace(); } } } Read primitive data 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import java.io.*; public class ReadData { public static void main(String[] args) { int a[] = new int[5]; try { DataInputStream in = new DataInputStream(new FileInputStream(\u0026lt;file_name\u0026gt;)); for (int i = 0; i \u0026lt; a.length; i++) { a[i] = in.readInt(); } in.close(); } catch (IOException e) { e.printStackTrace(); } for (int i = 0; i \u0026lt; a.length; i++) { System.out.println(a[i]); } } } File of objects Objects can be stored. Data classes must implement Serializable interface. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import java.io.Serializable; public class Record implements Serializable { private String name; private int age; public Record(String name, int age) { this.name = name; this.age = age; } public String getName() { return name; } public int getAge() { return age; } public String toString() { return name + \u0026#34; \u0026#34; + age; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import java.io.*; public class TestObjectOutputStream { public static void main(String[] args) { Record r[] = {new Record(\u0026#34;John\u0026#34;, 20), new Record(\u0026#34;Mary\u0026#34;, 21)}; try { ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(\u0026lt;file_name\u0026gt;)); for (int i = 0; i \u0026lt; r.length; i++) { out.writeObject(r[i]); } out.close(); } catch (IOException e) { e.printStackTrace(); } } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import java.io.*; public class TestObjectInputStream { public static void main(String[] args) { Record r[] = new Record[2]; try { ObjectInputStream in = new ObjectInputStream(new FileInputStream(\u0026lt;file_name\u0026gt;)); for (int i = 0; i \u0026lt; r.length; i++) { r[i] = (Record) in.readObject(); } in.close(); } catch (IOException e) { e.printStackTrace(); } catch (ClassNotFoundException e) { e.printStackTrace(); } for (int i = 0; i \u0026lt; r.length; i++) { System.out.println(r[i]); } } } The class RandomAccessFile Implement DataInput interface to read data randomly. Implement DataOutput interface to write data randomly. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import java.io.*; public class WriteRandomFile { public static void main(String[] args) { try { RandomAccessFile out = new RandomAccessFile(\u0026lt;file_name\u0026gt;, \u0026#34;rw\u0026#34;); out.writeInt(1); out.writeDouble(1.1); out.writeUTF(\u0026#34;John\u0026#34;); out.writeInt(2); out.writeDouble(2.2); out.writeUTF(\u0026#34;Mary\u0026#34;); out.close(); } catch (IOException e) { e.printStackTrace(); } } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import java.io.*; public class ReadRandomFile { public static void main(String[] args) { try { RandomAccessFile in = new RandomAccessFile(\u0026lt;file_name\u0026gt;, \u0026#34;r\u0026#34;); for (int i = 0; i \u0026lt; 2; i++) { System.out.println(in.readInt()); System.out.println(in.readDouble()); System.out.println(in.readUTF()); } in.close(); } catch (IOException e) { e.printStackTrace(); } } } ","description":"Data streams Types of streams InputStream hierarchy Methods of InputStream OutputStream hierarchy Methods of OutputStream Reader hierarchy Methods of Reader Writer hierarchy Methods of Writer Important types of streams Input/output stream object Use of buffered streams: Standard I/O streams The file class Create a File object File\u0026rsquo;s methods Manipulate text file Read from a text file Write to a text file Manipulate binary file DataInputStream/DataOutputStream Write primitive data Read primitive data File of objects The class RandomAccessFile Data streams Data are stored as a sequence of bytes: But, we can cosnider data as having some higher-level structure as being a sequence of characters or objects."},{"id":24,"href":"/ProbStats/2_BasicProb2/","title":"2. Basic Probability 2","parent":"Probability and Statistics","content":" I. Conditional probability 1. Definition Conditional probability Multiplication rule 2. Total probability theorem Definition 3. Bayes\u0026rsquo; rule Bayesian Inference - A flash introduction II. Independence 1. Definition Intuition explanation Intuition \u0026ldquo;definition\u0026rdquo; Definition of independence 2. Conditional independence III. Counting 1. Counting principle Discrete Uniform Law Counting principle Examples 2. Combinations I. Conditional probability 1. Definition Consider 2 experiments:\nRoll a fair 6-sided dice:\n$\\Omega = {1, 2, 3, 4, 5, 6}$. Prob $P(1) = \\frac{1}{6}$, $P(2) = \\frac{1}{6}$ Roll a fair 6-sided dice, knowing the outcome is even\nEvent $A = {2, 4, 6}$. Prob $P(1|A) = 0$, $P(2|A) = \\frac{1}{3}$, $P(3|A) = 0$, $P(4|A) = \\frac{1}{3}$, $P(5|A) = 0$, $P(6|A) = \\frac{1}{3}$. Another example\n$P(A) = \\frac{1}{12}$ on left. $P(A|B) = \\frac{1}{6}$ on right. Conditional probability $$ P(A|B) = \\frac{P(A \\cap B)}{P(B)} $$ Multiplication rule $$ P(A \\cap B) = P(A|B)P(B) = P(B|A)P(A) $$ 2. Total probability theorem Partition into $A_1, A_2, A_3,\u0026hellip; $A_1 \\cup A_2 \\cup A_3 = \\Omega$ Have $P(A_i) \u0026gt; 0$ for all $i$. Have $P(B|A_i) \u0026gt; 0$ for all $i$. Definition $$P(B) = \\sum_{i=1}^n P(A_i)P(B|A_i)$$ 3. Bayes\u0026rsquo; rule Have $P(A_i)$ for every $i$ initial belief. Revised belief after observing $B$. $$P(A_i|B) = \\frac{\\text{multiplication rule}}{\\text{total probability theorem}}$$\n$$ P(A_i|B) = \\frac{P(A_i)P(B|A_i)}{\\sum_{j=1}^n P(A_j)P(B|A_j)} $$ Bayesian Inference - A flash introduction Initial beliefs $P(A_i)$ on possible causes of an observed event $B$. Model of the world under each $A_i$ $$ A_i\\ + \\text{model } P(B|A_i) \\rightarrow B $$ Draw inference about causes $$ B + \\text{inference } P(A_i|B) \\rightarrow A_i $$ II. Independence 1. Definition Intuition explanation $$P(\\text{roll a fair dice and get 6 | it is raining}) = \u0026hellip;$$\nIntuition \u0026ldquo;definition\u0026rdquo; $$P(A|B) = P(A)$$\nDefinition of independence $$P(A|B) = P(A)$$ $$\\rightarrow P(A \\cap B) = P(A)P(B)$$\nQuick check: two disjoint events, independent? $$A = {1, 2, 3}$$ $$B = {4, 5, 6}$$ $$P(A \\cap B) = 0 \\rightarrow \\text{yes}$$ $A$ and $B$ are independent, what about $A$ and $B^c$ $$P(A \\cap B^c) = P(A)P(B^c) = P(A)$$ $$P(A|B^c) = P(A)$$ $$P(A|B^c) = P(A) \\neq P(A|B)$$ $$A \\text{ and } B^c \\text{ are not independent}$$ 2. Conditional independence $$P(A \\cap B) = P(A)P(B)$$\nConditional independence, given C\n$$P(A \\cap B|C) = P(A|C)P(B|C)$$ Quiz: Does independence imply conditional independence?\nNo, consider $A = {1, 2, 3}$, $B = {4, 5, 6}$, $C = {1, 2, 3, 4, 5, 6}$. $P(A \\cap B) = 0$, $P(A \\cap B|C) = \\frac{1}{6}$. III. Counting 1. Counting principle Discrete Uniform Law $\\Omega$ consists of $n$ equally likely elements. $A$ consists of $k$ elements. Then\n$$P(A) = \\frac{k}{n}$$\nCounting principle 4 shirts 3 ties 2 jackets In how many ways can you dress up? Consider a sequence of $r$ stages, each stage has $n_i$ options. Then the number of possible choice is $n_1 \\times n_2 \\times \\cdots \\times n_r$. Examples Consider license plates that consist of 2 letters followed by 3 digits. How many license plates are there?\nIf there\u0026rsquo;s no repetition, then $26 \\times 26 \\times 10 \\times 10 \\times 10 = 676,000$. Number of ways ordering $n$ elements: $n!$ Number of subsets of $\\text{\\{}1, 2, \\cdots, n\\text{\\}}$: $2^n$ 2. Combinations Given a set of $n$ elements. We want to construct a subset with exactly $k$ elements. How many ways can this be done?\n$k$ elements are chosen from $n$ elements. $k$ elements are chosen from $n-1$ elements. $k$ elements are chosen from $n-2$ elements. $\\cdots$ $k$ elements are chosen from $n-k+1$ elements. $k$ elements are chosen from $0$ elements. $\\rightarrow C_n^k = \\frac{n!}{k!(n-k)!}$\n","description":"I. Conditional probability 1. Definition Conditional probability Multiplication rule 2. Total probability theorem Definition 3. Bayes\u0026rsquo; rule Bayesian Inference - A flash introduction II. Independence 1. Definition Intuition explanation Intuition \u0026ldquo;definition\u0026rdquo; Definition of independence 2. Conditional independence III. Counting 1. Counting principle Discrete Uniform Law Counting principle Examples 2. Combinations I. Conditional probability 1. Definition Consider 2 experiments:\nRoll a fair 6-sided dice:\n$\\Omega = {1, 2, 3, 4, 5, 6}$."},{"id":25,"href":"/AlgebraicStructures/2_Groups/","title":"2. Groups","parent":"Algebraic Structures","content":" I. Binary Operations Binary operations Properties II. Groups Definition 1 Proposition 1 Proposition 2 Proposition 3 Proposition 4 Definition 2 III. Subgroups Definition 1 Proposition 1 IV. Cyclic Groups Definition 1 Definition 2 Proposition 1 V. Cosets 1. Definition 1 2. Definition 2 3. Definition 3 Proposition 1 Proposition 2 Proposition 3 VI. Lagrange\u0026rsquo;s Theorem VII. Normal Subgroups 1. Definition } In mathematics, algebraic structure consists of a non-empty set A, a collection of operations on A (typically binary operations such as addition and multiplication), and a finite set of identities, known as axioms, that these operations must satisfy.\nGroups, Rings, Fields Lattice, Module Group Permutation\nI. Binary Operations Binary operations $$ *: S \\times S \\rightarrow S, (a, b) \\rightarrow a * b$$\nA map is called a binary operation on S. So $*$ takes 2 inputs $a, b$ from $S$ and produces a single output $a * b \\in S$\nProperties Let $*$ be a binary operation on a set $S$. There exists several properties:\n$*$ is commutative if, $\\forall a, b \\in S$ $$a * b = b * a$$ $*$ is associative if, $\\forall a, b, c \\in S$ $$a * (b * c) = (a * b) * c$$ Examples ☕ Addition, $+$, is a commutative and associative binary operation in $\\mathbb{N, Z, Q, R, C}, M_{m,n} \\in R^2$ Is addition, $+$, a commutative and associative binary operation in $S = \\text{\\{}0, 1\\text{\\}}$? Is subtraction, $-$, is a commutative and associative binary operation in $\\mathbb{N, Z, Q, R, C}$? Multiplication, $.$, is a commutative and associative binary operation in $\\mathbb{N, Z, Q, R, C}$ but not $M_{m,n} \\in \\mathbb{R}^2$ Scalar product on $\\mathbb{R}^2$ is given by $(a_1, a_2) . (b_1, b_2)$ = $a_1b_1 + a_2b_2$. Is it binary operation and commutative or associative? Vector product on $\\mathbb{R}^2$ is given by $(a_1, a_2) . (b_1, b_2)$ = $(a_1b_1, a_2b_2)$. Is it binary operation and commutative or associative? II. Groups Definition 1 Let G be a non-empty set and let $*$ be a binary operation on G: $$ *: G \\times G \\rightarrow G, (a, b) \\rightarrow a * b$$ Then $(G; *)$ is called a group if: the following axioms are satisfied:\n$G_1$ - associative: $\\forall a, b, c \\in G, a * (b * c) = (a * b) * c$ $G_2$ - identity element: $\\exists e \\in G, \\forall a \\in G, e * a = a * e = a$ $G_3$ - inverse element: $\\forall a \\in G, \\exists a^{-1} \\in G, a * a^{-1} = a^{-1} * a = e$ $(G; *)$ is called an abelian group, or simply a commutative group, if $\\forall a, b \\in G, a * b = b * a$\nExamples ☕ $(\\mathbb{Z}, +)$\nG1 - + is associativeL $\\forall a, b, c \\in \\mathbb{Z}, a + (b + c) = (a + b) + c$ G2 - 0 is identity element: $a + 0 = 0 + a = a, \\forall a \\in \\mathbb{Z}$ G3 - inverse element: for any $a \\in \\mathbb{Z}$, there exists $-a$ such that $a+(-a) = (-a)+a = 0$ G4 - $+$ is commutative: $\\forall a, b \\in \\mathbb{Z}, a + b = b + a$ Same for $(\\mathbb{Z}, +)$, all $(\\mathbb{R}, +)$, $(\\mathbb{Q}, +)$ and $(\\mathbb{C}, +)$. $(\\mathbb{Z},.), (\\mathbb{R},.), (\\mathbb{Q},.) \\text{ and } (\\mathbb{C},.)$ are abelian groups? We use $\\mathbb{M}_2(\\mathbb{R})$ to denote the set of all $2 \\times 2$ matrices.\n$(\\mathbb{M}_2(\\mathbb{R}), +)$ is an abelian group? $(\\mathbb{M}_2(\\mathbb{R}), .)$ is an abelian group? Proposition 1 The identity element in a group $G$ is unique. That is, there exists only one element $e \\in G$ such that $e * g = g * e = g, \\forall g \\in G$.\nIf $e$ is not unique, we suppose to have another identity element $e'$ then we have both: $$ e * g = g * e = g \\text{ and } e' * g = g * e' = g$$ so\nif $e$ is identity element then $e * e' = e'$ if $e'$ is identity element then $e' * e = e$ $G$ is a group then $e * e' = e' * e = e'$ (Q.E.D.) Proposition 2 If $g$ is any element in group $G$, then the inverse of $g$, $g'$, is unique.\nif the inverse of $g$ is not unique, we suppose to have $g'$ and $g''$ are inverse of $g$: $$g * g' = g' * g = e \\text{ and } g * g'' = g'' * g = e$$ but we have associative property in $G$, thus $$g' = g' * e = g' * (g * g'') = (g' * g) * g'' = e * g'' = g''$$ Proposition 3 Let $G$ be a group. If $a, b \\in G$ then $(a * b)^{-1} = a^{-1} * b^{-1}$\nWe have $$a * b * b^{-1} * a^{-1} = a * e * a^{-1} = a * a^{-1} = e$$ Similarly, we have $$(a * b) * (a * b)^{-1} = e$$ Due to Proposition 2, inverse is unique $$(a * b)^{-1} = b^{-1} * a^{-1}$$ Proposition 4 Let $x$ be an element of a group $G$, then $x^{m+n} = x^m * x^n$ for all integers $m, n$. We also define $x^0 = e$. We denote here $x^n = x * x * \\dots * x$ ($n$ times)\nHint: use induction on $n$. Definition 2 The order of an algebraic structure $(G, *)$ is the cardinality of its underlying set, and is denoted by $|G|$.\nFor a finite set $G$, the order of $(G, *)$ is the # of elements in $G$. For a finite set $G$, the order of $(G, *)$ is the smallest integer such that $a^m = e, \\forall a \\in G$. III. Subgroups Definition 1 Let $G$ be a group, a subset $H$ of $G$ is called a subgroup of $G$ if:\nThe identity element of $G$ is also the identity element of $H$. If $h_1, h_2 \\in H$, then $h_1 * h_2 \\in H$. If $h \\in H$, then $h^{-1} \\in H$. A subgroup $H$ of $G$ is said to be proper if $H \\neq G$. The subgroup $H = \\text{\\{}e\\text{\\}}$ of a group G is called the trivial subgroup. Proposition 1 Let $H$ and $K$ e subgroups of a group $G$, then $H \\in K$ is also subgroup of $G$\n$H$ and $K$ must have the same identity from $G$, then the identity element belong to $H \\in K$ If $x and y$ are elements of $H \\in K$ then $x * y$ is an element of $H$ since $x$ and $y$ are elements of $H$. Same goes for $x * y \\in K$. Thus $x * y \\in H \\in K$. Same proof for the inverse $x^{-1}$ of an element as required. Examples ☕ The group of integers is a subgroup of the groups of rational numbers, real numbers and complex numbers under addtion. Consider the set of non-zero real numbers, $\\mathbb{R}^{*}$, with the group operation of multiplication. The identity of this group is 1 and the inverse of any element $a \\in \\mathbb{R}^{*}$ is just $\\frac{1}{a}$.\n$\\mathbb{Q}^{*}$ is a subgroup of $\\mathbb{R}^{*}$.\nthe identity of $\\mathbb{Q}^{*}$ is $\\frac{1}{1} = 1 \\in \\mathbb{R}^{*}$. let 2 numbers $\\frac{q}{r}$ and $\\frac{s}{t} \\in \\mathbb{Q}^{*}$, then $\\frac{q}{r}.\\frac{s}{t} \\in \\mathbb{Q}^{*}$ the inverse of $\\frac{q}{r}$ is $(\\frac{q}{r})^{-1} = \\frac{r}{q} \\in \\mathbb{Q}^{*}$ The group of all $2 \\times 2$ matrices of real numbers with determinant equal to 1 is a subgroup of the group of all $2 \\times 2$ matrices of real numbers with non-zero determinant under the operation of matrix multiplication. Let $H = \\text{\\{} -1;1;i;-i \\text{\\}} is a subgroup of $C$. IV. Cyclic Groups Definition 1 $|G|$ (the order of $G$) is the cardinality of $G$ a.k.a. the # of elements in $G$.\nDefinition 2 If every element of G is of the form $$g^n = g * g * \\dots * g$$ for some integer $n$, then $G$ is called a cyclic group with generator $g$.\nDenote: $G = \\langle g \\rangle$ or $(g)$\nExamples ☕ The group $\\mathbb{Z}_n$ is cyclic with generator 1. The set $\\mathbb{Z}_n$ of integers modulo $n$ is a cyclic group of order $n$ with respect to the operation of addition. $$\\mathbb{Z}_n = \\text{\\{}0, 1, 2, \\dots, n-1\\text{\\}}$$ For example, $\\mathbb{Z}_4 = \\text{\\{}0, 1, 2, 3\\text{\\}}$ is a cyclic group with generator 1. Let a subgroup $U_9 \\in \\mathbb{Z}_9$ with $U_9 = \\text{\\{}1, 2, 4, 5, 7, 8\\text{\\}}$ is a cyclic group. Every member of this set is generated by 2.\n$$ 2^1 = 2 (\\text{mod}) 9, 2^2 = 4 (\\text{mod}) 9$$\n$$ 2^3 = 8 (\\text{mod}) 9, 2^4 = 7 (\\text{mod}) 9$$\n$$ 2^5 = 5 (\\text{mod}) 9, 2^6 = 1 (\\text{mod}) 9$$\nProposition 1 Every cyclic group is abelian.\nLet G be a cyclic group and $a \\in G$ be a generator for G. If $g, h \\in G$, then they can written as powers of $a$, denoted bt $g = a^m$ and $h = a^n$. If $G$ is abelian, $g \\times h = h \\times g$. We have: $$g * h = a^m * a^n = a^{m+n} = a^{n+m} = a^n * a^m = h * g$$ V. Cosets 1. Definition 1 Let $H$ be a subgroup of $G$. A left coset of $H$ in $G$ is a set of the form $x * H$, where $x \\in G$\n$$ x * H = \\text{\\{}y \\in G: y = x * h, \\text{ for some } h \\in H\\text{\\}}$$\n2. Definition 2 Similarly, a right coset of $H$ in $G$ is a set of the form $H \\times x$, where $x \\in G$\n$$ H * x = \\text{\\{}y \\in G: y = h * x, \\text{for some } h \\in H\\text{\\}}$$\nExample ☕ $H = \\text{\\{}0, 3\\text{\\}}$ is a subgroup of $\\mathbb{Z}_6$. The cosets are:\n$$0 + H = 3 + H = \\text{\\{} 0, 3 \\text{\\}}$$ $$1 + H = 4 + H = \\text{\\{} 1, 4 \\text{\\}}$$ $$2 + H = 5 + H = \\text{\\{} 2, 5 \\text{\\}}$$\n3. Definition 3 The index of a subgroup $H$ in $G$ is the number of right (left) cosets. It is a positive number of $\\infty$ and is denoted by $[G:H]$.\nExample ☕ Let $H$ be a subgroup $\\mathbb{Z}_6$ consisting of elements $0$ and $3$ or $H \\in \\text{\\{} 0, 3 \\text{\\}}$, the cosets are\n$$0 + H = 3 + H = \\text{\\{} 0, 3 \\text{\\}}$$ $$1 + H = 4 + H = \\text{\\{} 1, 4 \\text{\\}}$$ $$2 + H = 5 + H = \\text{\\{} 2, 5 \\text{\\}}$$\nThe index of $H$ is $3$.\nProposition 1 Let $H$ be a subgroup of a group $G$. Then each left coset of $H$ in $G$ has the same number of elements as $H$.\nLet $H = \\text{\\{} h_1, h_2, \\dots, h_m \\text{\\}}$ where $h_1, h_2, \\dots, h_m$ are distinct. Let $x$ be elements in $G$, then the left coset if $x * H$. We suppose to have $x * h_i = x * h_j \\in x * H$ where $i, j$ are integers from $1$ to $m$, and we expect that $h_i \\neq h_j$. But\n$$ h_i = x^{-1} * x * h_i = x^{-1} * x * h_j = h_j$$\nThus $i = j$ so $x * H$ have distinct elements.\nProposition 2 Let $H$ be a subgroup of a group $G$. The number of left cosets of $H$ in $G$ is the same as the number of right cosets of $H$ in $G$.\nLet $r$ be exactly different leftt cosets of $H$ in $G$, thus we have the left cosets:\n$g_1 * h, g_2 * H, \\dots, g_r * H : g_1, g_2, \\dots, g_r \\in G$\n$x \\in H * g_i^{-1}\\text{ (Proposition 1)}$ $\\Leftrightarrow x * (g_j^{-1})^{-1} \\in H * g_j^{-1} * (g_j^{-1})^{-1}$ $\\Leftrightarrow x * g_j \\in H * e$ $\\Leftrightarrow (x^{-1})^{-1} * g_i \\in H$ $\\Leftrightarrow x^{-1} \\in g_i * H \\text{ (Proposition 1)}$ Proposition 3 Let $H$ be subgroups of a group G, then the left cosets of $H$ in $G$ have the following properties:\n$x \\in x * H, for all x \\in G$ if $x$ and $y$ are elements of $G$, and if $y = x * g$ for some $g \\in H$ then $x * H = y * H$ Let $x \\in G$, then $x = x * e$ where $e$ is the identity element of $G$ and $e \\in H$, thus $x \\in x * H$ (according to subgroups definition). Let $x$ and $y$ be elements of $G$ where $y = x * g$ for some $g \\in H$ then $y * h = x * g * h$ and $x * h = y * (g^{-1}) * h \\forall h \\in H$ moreover $g * h \\in H$, thus $y * H \\subseteq x * H$ and $g^{-1} * h \\in H$ thus $x * H \\subseteq y * H$ $\\Leftrightarrow x * H = y * H$ VI. Lagrange\u0026rsquo;s Theorem Theorem:\nLet $G$ be a finite group and $H$ be a subgroup of $G$, then $|H|$ divides $|G|$ where $|H|$ and $|G|$ are order of $H$ and $G$ respectively. Or $[G:H] = \\frac{G}{H}$ where $[G:H]$ is the index of $H$ in $G$. Each element of $G$ belongs to at least one left coset of $H$ in $G$, and no element can belong to two distinct left cosets of $H$ in $G$. (Lemma 1) Therefore every element of $G$ belongs to exactly one left coset of $H$ in $G$. Moreover each left coset of $H$ contains exactly $|H|$ elements. (Lemma 2) Therefore $|G| = n|H|$ where $n$ is the number of left cosets of $H$ in $G$. The result follows. VII. Normal Subgroups 1. Definition A subgroup $H$ of a group $G$ is normal in $G$ if $g * H = H * g$ for all $g \\in G$.\nA normal subgroup of a group $G$ is one in which the right and left cosets are percisely the same. Example ☕ Let $G$ be an abelian group. Every subgroup $H$ of $G$ is a normal subgroup. Since $g * h = h * g \\forall g \\in G$ and $h \\in H$, it will always be the case that $g * H = H * g$. ","description":"I. Binary Operations Binary operations Properties II. Groups Definition 1 Proposition 1 Proposition 2 Proposition 3 Proposition 4 Definition 2 III. Subgroups Definition 1 Proposition 1 IV. Cyclic Groups Definition 1 Definition 2 Proposition 1 V. Cosets 1. Definition 1 2. Definition 2 3. Definition 3 Proposition 1 Proposition 2 Proposition 3 VI. Lagrange\u0026rsquo;s Theorem VII. Normal Subgroups 1. Definition } In mathematics, algebraic structure consists of a non-empty set A, a collection of operations on A (typically binary operations such as addition and multiplication), and a finite set of identities, known as axioms, that these operations must satisfy."},{"id":26,"href":"/SignalSystem/2_Systems/","title":"2. System","parent":"Signals and Systems","content":" I. Objectives II. An introduction to systems 1. System types 2. System interconnections Series and parallel Feedback III. Systems\u0026rsquo; properties 1. Causality 2. Stability 3. Time-invariance 4. Linearity IV. LTI systems 1. Delta signal 2. A simple system I. Objectives At the end of this lesson, you should be able to\nRecognize basic system types and system interconnections Deermine (and justify) properties of a system Causality Stability Time-invariance Linearity Have some feeling about LTI systems II. An introduction to systems 1. System types Continuous-time vs discrete-time systems Single-variable vs multi-variable systems Single-input, single-output (SISO) systems Single-input, multiple-output (SIMO) systems Multiple-input, single-output (MISO) systems Multiple-input, multiple-output (MIMO) systems 2. System interconnections Series and parallel Feedback III. Systems\u0026rsquo; properties 1. Causality Causal systems: output signal depends only on the present and/or the past values of the input signal $y(t) = x(t)sin(t)$ is causal because $y(t)$ depends only on the present and past values of $x(t)$ $y[n] = x[-n]$ is not causal because $y[n]$ depends on the future values of $x[n]$ (i.e. $y[-3] = x[3]$) $y[n] = x[n] - x[n+1]$ is not causal because $y[n]$ depends on the future values of $x[n]$ (i.e. $y[5] = x[5] - x[6]$) 2. Stability Stable systems: the output signal is bounded whenever the input signal is bounded $y(t) = tx(t)$ is stable because $y(t)$ is bounded whenever $x(t)$ is bounded $y[n] = n[-n]$ is not stable because $y[n]$ is not bounded whenever $x[n]$ is bounded $y[n] = \\sum_{k= - \\infty}^{n} u[k]$ where $u[n]$ is the unit step: $u[n] = \\begin{cases} 0 \u0026amp; n \u0026lt; 0 \\\\ 1 \u0026amp; n \\geq 0 \\end{cases}$ is stable because $y[n]$ is bounded whenever $x[n]$ is bounded 3. Time-invariance Time-invariant systems: the input-output relation doe not depend on the time origin, i.e. the systems are fixed over time. $y(t) = sin[x(t)]$ $y_1(t) = sin[x_1(t)]$ $x_2 = x_1(t-T)$ $y_2(t) = sin[x_2(t)] = sin[x_1(t-T)]$ $y_3(t) = y_1(t-T) = sin[x_1(t-T)]$ $\\Rightarrow y_2(t) = y_3(t)$ for all $t$ $\\Rightarrow$ system is time-invariant.\n$y[n] = nx[n]$ $y_1[n] = n_1x_1[n]$ $x_2[n] = x_1[n-n_0]$ $y_2[n] = n_1x_2[n] = n_1x_1[n-n_0]$ $y_3[n] = y_1[n-n_0] = n_1x_1[n-n_0]$ $\\Rightarrow y_2[n] = y_3[n]$ for all $n$ $\\Rightarrow$ system is time-invariant.\n$y[n] = x[-n]$ Shifted of $x_1$: $x_2[n] = x_1[n-T]$ Respect of $x_1$: $y_1[n] = x_1[-n]$ Respect of $x_2$: $y_2[n] = x_2[-n] = x_1[n-T]$ Respect of $y_2$: $y_3[n] = y_2[-n] = x_1[n-T]$ If system is time-invariant, we expect $y_1[n] = y_3[n]$ $y_3[n] = y_1[n-T] = x_1[-(-n-T)] = x_1[-n+T]$ $y_2[n] = x_2[-n] = x_1[+(-n)-T] = x_1[n+T]$ Because $y_2[n] \\neq y_3[n]$, the system is not time-invariant. 4. Linearity Linear systems: if an input consists of the weighted sum of several signals, then the output is the weighted sum of the responses of the system to each of those signals. Given a system in which: $y_1(t)$ is the response of the system to $x_1(t)$ $y_2(t)$ is the response of the system to $x_2(t)$ Then the system in linear if: The response to $x_1(t) + x_2(t)$ is $y_1(t) + y_2(t)$\nAdditivity The response to $a_1x_1(t)$ is $a_1y_1(t)$, where $a$ is a constant\nScaling $y(t) = tx(t)$ Additivity: $x(t) = x_1(t) + x_2(t)$ $y(t) = tx(t) = t(x_1(t) + x_2(t)) = y_1(t) + y_2(t)$ Scaling: $x(t) = 7x_1(t)$ $y(t) = t7x_1(t) = 7tx_1(t) = 7y_1(t)$ $\\Rightarrow$ system is linear.\n$y[n] = x[-n]$ Additivity: $x[n] = x_1[n] + x_2[n]$ $y[n] = x[-n] = x_1[-n] + x_2[-n] = y_1[n] + y_2[n]$ Scaling: $x[n] = 5x_1[n]$ $y[n] = x[-n] = 5x_1[-n] = 5y_1[n]$ $\\Rightarrow$ system is linear.\n$y[n] = 2x[n] + 5$ Additivity: $x[n] = x_1[n] + x_2[n]$ $y[n] = 2x[n] + 5 = 2(x_1[n] + x_2[n]) + 5 = 2y_1[n] + 2y_2[n] + 5$ Scaling: $x[n] = 5x_1[n]$ $y[n] = 2x[n] + 5 = 2(5x_1[n]) + 5 = 10y_1[n] + 5$ $\\Rightarrow$ system is not linear.\nIV. LTI systems 1. Delta signal Other names: Dirac Delta, unit impulse $$\\delta[n] = \\begin{cases} 1 \u0026amp; n = 0 \\\\ 0 \u0026amp; n \\neq 0 \\end{cases}$$\nDelta is the building block of all signals. It helps to define a Linear Time-Invariant (LTI) system. 2. A simple system Consider a discrete-time system with input x(n) and output y(n) given by:\n$$y(n) = x(n+1)-2x(n)$$\nDetermine whether the system is:\nCausal: $y(2) = x(3) - 2x(2) \\Rightarrow$ system is not causal because $x(3)$ is not defined. Stable $y(n) = x(n+1) - 2x(n) = x(n+1) - 2x(n) + 2x(n) - 2x(n-1) = x(n+1) - x(n-1) \\Rightarrow$ system is stable because $x(n-1)$ is defined for all $n$. Time-invariant $y(n) = x(n+1) - 2x(n) = x(n+1-T) - 2x(n-T) = y(n-T)$ $y(n) = y(n-T)$ for all $n$ $\\Rightarrow$ system is time-invariant. Linear Additivity: $x(n) = x_1(n) + x_2(n)$ $y(n) = x(n+1) - 2x(n) = (x_1(n) + x_2(n)) + 1 - 2(x_1(n) + x_2(n)) = y_1(n) + y_2(n)$ Scaling: $x(n) = 5x_1(n)$ $y(n) = x(n+1) - 2x(n) = 5x_1(n+1) - 2(5x_1(n)) = 5y_1(n)$ $\\Rightarrow$ system is linear. $$y(n) = x(n+1) - 2x(n)$$\nDetermine $y(n)$ given\n$x(n) = \\delta(n)$ $y(n) = x(n+1) - 2x(n) \\\\ = \\delta(n+1) - 2\\delta(n) \\\\ = \\delta(n+1) - 2\\delta(n) + 2\\delta(n) - 2\\delta(n-1) \\\\ = \\delta(n+1) - \\delta(n-1)$ $x(n) = \\delta(n-2)$ $y(n) = x(n+1) - 2x(n) \\\\ = \\delta(n+1-2) - 2\\delta(n-2) \\\\ = \\delta(n-1) - 2\\delta(n-2) \\\\ = \\delta(n-1) - 2\\delta(n-2) + 2\\delta(n-2) - 2\\delta(n-2-1) \\\\ = \\delta(n-1) - \\delta(n-3)$ $x(n) = [1_{\\uparrow}, 1, 3]$ $y(0) = x(0+1) - 2x(0) \\\\ = 1 - 2\\cdot 1 \\\\ = -1$ $y(1) = x(1+1) - 2x(1) \\\\ = 3 - 2\\cdot 1 \\\\ = 1$ $y(2) = x(2+1) - 2x(2) \\\\ = 0 - 2\\cdot 3 \\\\ = -6$ $\\Rightarrow y[n] = [-1_{\\uparrow}, 1, -6]$ ","description":"I. Objectives II. An introduction to systems 1. System types 2. System interconnections Series and parallel Feedback III. Systems\u0026rsquo; properties 1. Causality 2. Stability 3. Time-invariance 4. Linearity IV. LTI systems 1. Delta signal 2. A simple system I. Objectives At the end of this lesson, you should be able to\nRecognize basic system types and system interconnections Deermine (and justify) properties of a system Causality Stability Time-invariance Linearity Have some feeling about LTI systems II."},{"id":27,"href":"/SignalSystem/Exercises/02/","title":"2. System","parent":"Exercises","content":" 1.15 P.80 1.17 P.81 1.18 P.81 1.27 P.83 1.28 P.84 1.31 P.85 1.42 P.90 1.15 P.80 Consider a system $S$ with input $x[n]$ and output $y[n]$. This system is obtained through a series interconnection of a system $S_1$ followed by a system $S_2$. The input-output relationship of the system $S$ is given by\n$$S_1: y_1[n] = 2x_1[n] + 4x_1[n-1]$$ $$S_2: y_2[n] = x_2[n-2] + \\frac{1}{2}x_2[n-3]$$\nwhere $x_1[n]$ and $x_2[n]$ denote input signals.\na. Determine the input-output relationship of the system $S$.\nb. Does the input-output relationship of system S change if the order in which $S_1$ and $S_2$ are connected in series is reversed?\n1.17 P.81 Consider a continuous-time system with input $x(t)$ and output $y(t)$ related by\n$$y(t)=x(sin(t))$$\na. Is this system causal? b. Is this system linear?\n1.18 P.81 Consider a discrete-time system with input $x[n]$ and output $y[n]$ related by\n$$y[n] = \\sum^{n+n_0}_{k=n-n_0}x[k]$$\nwhere $n_0$ is a positive integer.\na. Is this system linear?\nb. Is this system time-invariant?\nc. If x[n] is known to be bounded by a finite integer $B$ (i.e., $|x[n]| \u0026lt; B \\forall n$), it can be shown that $|y[n]|$ is bounded by a finite number $C$. We conclude that the given system is stable. Express $C$ in terms of $B$ and $n_0$.\n1.27 P.83 In this chapter, we introduced a number of general properties of systems. In particular, a system may or may not be:\nMemoryless Time invariant Linear Causal Stable Determine which of these properties hold and which do not hold for each of the following continuous-time systems. Justify your answer. In each example, $y(t)$ denotes the output of the system and $x(t)$ is the system input.\na. $y(t) = x(t-2) + x(2-t)$\nb. $y(t) = [cos(3t)]x(t)$\nc. $y(t) = \\integral_{-\\infty}^{2t}x(\\tau)d\\tau$\nd. $y(t) = \\begin{cases} 0 \u0026amp; t \u0026lt; 0 \\\\ x(t) + x(t-2) \u0026amp; t \\geq 0 \\end{cases}$\ne. $y(t) = \\begin{cases} 0 \u0026amp; x(t) \u0026lt; 0 \\\\ x(t) + x(t-2) \u0026amp; x(t) \\geq 0 \\end{cases}$\nf. $y(t) = x(t/3)$\ng. $y(t) = \\frac{dx(t)}{dt}$\n1.28 P.84 Determine which of the properties listed in problem 1.27 hold and which do not hold for each of the following discrete-time systems. Justify your answers. In each example, y[n] denotes the system output and x[n] is the system input.\na. $y[n] = x[-n]$\nb. $y[n] = x[n-2]-2x[n-8]$\nc. $y[n] = nx[n]$\nd. $y[n] = \\Epsilon v\\text{\\{} x[n-1] \\text{\\}}$\ne. $y[n] = \\begin{cases} x[n] \u0026amp; n \\geq 1 \\\\ 0 \u0026amp; n = 0 \\\\ x[n+1] \u0026amp; n \\leq -1 \\end{cases}$\nf. $y[n] = \\begin{cases} x[n] \u0026amp; n \\geq 1 \\\\ 0 \u0026amp; n = 0 \\\\ x[n] \u0026amp; n \\leq -1 \\end{cases}$\ng. $y[n] = x[4n+1]$\n1.31 P.85 In this problem, we illustrate one of the most important consequences of the properties of linearity and time invariance. Specifically, once we know the response of a linear system or a LTI system to a single input or the responses to several inputs, we can directly compute the responses to many other input signals. Much of the remainder of this book deals with a thorough exploitation of this fact in order to develop results and techniques for analyzing and synthesizing LTI systems.\na. Consider an LTI system whose response to the signal $x_1(t)$ in fig. P1.31(a) is the signal $y_1(t)$ illustrated in fig. P1.31 (b) Determine and sketch carefully the response of the system to the input $x_2(t)$ depicted in fig. P1.31\nb. Determine and sketch the response of the system considered in part (a) to the input $x_3(t)$ shown in fig. P1.31(d).\nP1.31 1.42 P.90 a. Is the following statement true or false?\nThe series interconnection of two LTI systems is itself a linear, time-invariant system.\nJustify your answer.\nb. Is the following statement true or false?\nThe series inter-connection of two nonlinear systems is itself nonlinear\nJustify your answer.\nc. Consider three systems with the following input-output relationships:\nSystem 1: $\\begin{cases} x[n/2] \u0026amp; \\text{n is even} \\\\ 0 \u0026amp; \\text{n is odd} \\end{cases}$\nSystem 2: $y[n]=x[n]+\\frac{1}{2}x[n-1]+\\frac{1}{4}x[n-2]$\nSystem 3: $y[n] = x[2n]$\nSuppose that these systems are connected in series as depicted in fig. P1.42. Find the input-output relationship for the overall interconnected systems. Is this system linear? Is it time-invariant?\nP1.42 ","description":"1.15 P.80 1.17 P.81 1.18 P.81 1.27 P.83 1.28 P.84 1.31 P.85 1.42 P.90 1.15 P.80 Consider a system $S$ with input $x[n]$ and output $y[n]$. This system is obtained through a series interconnection of a system $S_1$ followed by a system $S_2$. The input-output relationship of the system $S$ is given by\n$$S_1: y_1[n] = 2x_1[n] + 4x_1[n-1]$$ $$S_2: y_2[n] = x_2[n-2] + \\frac{1}{2}x_2[n-3]$$\nwhere $x_1[n]$ and $x_2[n]$ denote input signals."},{"id":28,"href":"/SignalSystem/3_DiscreteLTI/","title":"3. Discrete Linear Time-Invariant Systems","parent":"Signals and Systems","content":" I. Lesson objectives II. Convolution sum Signal representation using impulses Remind: delta impulse Weighted Sum of Shifted Impulses Convolution III. Properties Commutative Distributive Associative Invertibility Causality Stability IV. Exercises I. Lesson objectives At the end of this chapter, you should be able to:\nUnderstand the input-output relationship of a LTI system. Calculate the convolution sum using different approaches. Determine (and justify) properties of a LTI system: Causality Stability \u0026hellip; II. Convolution sum Signal representation using impulses Remind: delta impulse $$\\delta[n] = \\begin{cases} 1 \u0026amp; \\text{if } n = 0 \\\\ 0 \u0026amp; \\text{otherwise} \\end{cases}$$ Delta is the building block of all signals. It helps to define a Linear Time-Invariant (LTI) system. Weighted Sum of Shifted Impulses $$x[n] = \\sum_{k=-\\infty}^{\\infty} x[k]\\delta[n-k]$$ Convolution III. Properties Commutative $$x[n] * h[n] = h[n] * x[n]$$ Distributive $$x[n] * (h[n] + g[n]) = x[n] * h[n] + x[n] * g[n]$$ Parallel interconnection Associative $$x[n] * (h[n] * g[n]) = (x[n] * h[n]) * g[n]$$ Series Interconnection Associative \u0026amp; Commutative Invertibility Identity system $h[n] = \\delta[n]$, an example of telecommunication.\nGiven a system with impulse response $$h_1[n] = u[n]$$\nVerify that its inverse system has $h_2[n] = \\delta[n] - \\delta[n-1]$\nCausality A LTI system is causal if its impulse response satisfy the condition: $$h[n] = 0 \\text{ for } n \u0026lt; 0$$\nStability A LTI system is stable if its impulse response is absolutely summable: $$\\sum |h[n]| \u0026lt; \\infty$$\nIV. Exercises In an $n^{th}$ semester, $x[n]$ students enroll in a course requiring a certain textbook. The publisher sells $y[n]$ new copies of the book in the $n^{th}$ semester. On the average, one-quarter of students with books in salable condition resell the texts at the end of the semester, and the book life is three semesters. Write the equation relating $y[n]$ to $x[n]$, assuming that every student buys a book.\nResult 🍵 $$y[n] = x[n] + \\frac{1}{4}y[n-3]$$ ","description":"I. Lesson objectives II. Convolution sum Signal representation using impulses Remind: delta impulse Weighted Sum of Shifted Impulses Convolution III. Properties Commutative Distributive Associative Invertibility Causality Stability IV. Exercises I. Lesson objectives At the end of this chapter, you should be able to:\nUnderstand the input-output relationship of a LTI system. Calculate the convolution sum using different approaches. Determine (and justify) properties of a LTI system: Causality Stability \u0026hellip; II."},{"id":29,"href":"/ProbStats/3_DiscreteRandVar/","title":"3. Discrete Random Variables 1","parent":"Probability and Statistics","content":" I. Discrete Random Variables 1. Definition Discrete random variables 2. Probability Mass Function II. Common random variables 1. Bernoulli 2. Uniform 3. Binomial 4. Geometric III. Expectation 1. The Mean Bernoulli random variable Linearity of expectation: 2. Expected Value Rule 3. The Variance Bernoulli random variable Properties of variance I. Discrete Random Variables 1. Definition Discrete random variables An example: A fair coin is tossed 3 times. The random variable $X$ is the number of heads. $X$ is a discrete random variable. Formal definition $X$: sample space $\\Omega \\rightarrow \\mathbb{R}$. outcome $\\omega \\mapsto x$. Notation: random variable $X$, numerical value $x$. Some notes:\nOne sample space could have multiple random variables. A function of random variable(s) is also a random variable. 2. Probability Mass Function PMF = probability law = probability distribution $$p_{X}(x) = P(X = x)$$ $p_{X}(x) \\geq 0$. $\\sum_{x \\in \\mathbb{R}} p_{X}(x) = 1$. II. Common random variables 1. Bernoulli Bernoulli with parameter $p \\in [0, 1]$:\n$$X = \\begin{cases} 1 \u0026amp; \\text{with probability } p \\\\ 0 \u0026amp; \\text{with probability } 1 - p \\end{cases}$$\nPlot the PMF? Indicator of an event A. 2. Uniform Uniform with parameters $a, b$\nExperiment: pick one of $a, a + 1, \\dots, b$ at random equally likely. Sample space: $\\text{\\{} a, a + 1, \\dots, b \\{}}$. Random variable $X$: $X(\\omega) = \\omega$. 3. Binomial Binomial with parameters positive integers $n, p \\in [0, 1]$\nExperiment: $n$ independent tosses of a coin with $P(\\text{head}) = p$. Sample space: sequence of H and T, of length $n$. Random variable $X$: number of heads. $$p_X(k) = \\binom{n}{k} p^k (1 - p)^{n - k}$$\n$\\binom{n}{k} = C_n^k = \\frac{n!}{k! (n - k)!}$: from $n$ objects, choose $k$. 4. Geometric Geometric with parameter $0 \u0026lt; p \u0026lt; 1$\nExperiment: infinite independent tosses of a coin with $P(\\text{head}) = p$. Sample space: infinite sequence of H and T. Random variable $X$: number of tosses until the first head. $$p_X(k) = (1 - p)^{k - 1} p$$ III. Expectation 1. The Mean The expected value (also called the expectation or the mean) of a random variable $X$, with $PMF$ $p_X(x)$, is defined as: $$\\mathbb{E}[X] = \\sum_{x \\in \\mathbb{R}} x p_X(x)$$ Bernoulli random variable With parameter $p \\in [0, 1]$:\n$$X = \\begin{cases} 1 \u0026amp; \\text{with probability } p \\\\ 0 \u0026amp; \\text{with probability } 1 - p \\end{cases}$$\nLinearity of expectation: Given a random variable $X$: $$\\mathbb{E}[aX + b] = a \\mathbb{E}[X] + b$$ 2. Expected Value Rule Let $X$ be a random variable, and $Y = g(X)$ be a function of $X$. By definition: $$\\mathbb{E}[g(X)] = \\mathbb{E}[Y] = \\sum_{y} y p_Y(y)$$\n$$\\mathbb{E}[g(X)] = \\sum_{x} g(x) p_X(x)$$ 3. The Variance Average distance from the mean? Variance is the expected value of the random variable $g(X) = (X - \\mathbb{E}[X])^2$: $$\\text{var}(X) = \\mathbb{E}[(X - \\mathbb{E}[X])^2] = \\mathbb{E}[X^2] - \\mathbb{E}[X]^2$$ $$\\sigma_X = \\sqrt{\\text{var}(X)}$$ Bernoulli random variable Bernoulli with parameter $p \\in [0, 1]$: $$X = \\begin{cases} 1 \u0026amp; \\text{with probability } p \\\\ 0 \u0026amp; \\text{with probability } 1 - p \\end{cases}$$ Properties of variance Given a random variable $X$:\n$\\text{var}[aX + b] = a^2 \\text{var}[X]$. $\\text{var}[X] = \\mathbb{E}[X^2] - \\mathbb{E}[X]^2$. ","description":"I. Discrete Random Variables 1. Definition Discrete random variables 2. Probability Mass Function II. Common random variables 1. Bernoulli 2. Uniform 3. Binomial 4. Geometric III. Expectation 1. The Mean Bernoulli random variable Linearity of expectation: 2. Expected Value Rule 3. The Variance Bernoulli random variable Properties of variance I. Discrete Random Variables 1. Definition Discrete random variables An example: A fair coin is tossed 3 times. The random variable $X$ is the number of heads."},{"id":30,"href":"/SignalSystem/Exercises/03/","title":"3. LTI []","parent":"Exercises","content":" 2.3 2.4 2.7 2.24 2.3 Consider an input $x[n]$ and unit impulse response $h[n]$ given by\n$$x[n] = (\\frac{1}{2})^{n-2}u[n-2]$$\n$$h[n] = u[n+2]$$\nDetermine and plot the output $y[n] = x[n] * h[n]$.\nSolution We have $y[n] = x[n] * h[n] = \\sum_{k = -\\infty}^{\\infty} x[k]h[n-k]$\n$x[n] = (\\frac{1}{2})^{n-2}u[n-2]$\n$h[n] = u[n+2] \\implies h[n-k] = u[n-k+2]$\n$y[n] = \\sum_{k = -\\infty}^{\\infty} (\\frac{1}{2})^{k-2}u[k-2]u[n-k+2]$\nSet $m = k-2$\n$y[n] = \\sum_{m = -\\infty}^{\\infty} (\\frac{1}{2})^{m}u[m]u[n-m-2]$\nThen $y[n] = \\sum_{m = -\\infty}^{\\infty} (\\frac{1}{2})^{m}u[m]u[n-m-2]$\n2.4 Compute and plot the output $y[n] = x[n] * h[n]$, where\n$$x[n] = \\begin{cases} 1 \u0026amp; \\text{if } 3 \\leq n \\leq 8 \\\\ 0 \u0026amp; \\text{otherwise} \\end{cases}$$\n$$h[n] = \\begin{cases} 1 \u0026amp; \\text{if } 4 \\leq n \\leq 15 \\\\ 0 \u0026amp; \\text{otherwise} \\end{cases}$$\n2.7 A linear system $S$ has the relation ship\n$$y[n] = \\sum_{k = -\\infty}^{\\infty} x[k]g[n-2k]$$\nbetween its input $x[n]$ and its output $y[n]$, where $g[n] = u[n] - u[n-4]$\na. Determine $y[n]$ when $x[n] = \\delta[n-1]$\nb. Determine $y[n]$ when $x[n] = \\delta[n-2]$\nc. Is $S$ LTl? If not, why not?\nd. Determine $y[n]$ when $x[n] = u[n]$\n2.24 Consider the cascade interconnection of 3 causal LTI systems, illustrated in fig 2.24(a). The impulse response $h_2[n]$ is\n$$h_2[n] = u[n] - u[n-2]$$\nand the overall impulse response is as shown in fig 2.24(b).\nP2.24 a. Find the impulse response $h_1[n]$.\nb. Find the respond of the overall system to the input $$x[n] = \\delta[n] - \\delta[n-1]$$\n","description":"2.3 2.4 2.7 2.24 2.3 Consider an input $x[n]$ and unit impulse response $h[n]$ given by\n$$x[n] = (\\frac{1}{2})^{n-2}u[n-2]$$\n$$h[n] = u[n+2]$$\nDetermine and plot the output $y[n] = x[n] * h[n]$.\nSolution We have $y[n] = x[n] * h[n] = \\sum_{k = -\\infty}^{\\infty} x[k]h[n-k]$\n$x[n] = (\\frac{1}{2})^{n-2}u[n-2]$\n$h[n] = u[n+2] \\implies h[n-k] = u[n-k+2]$\n$y[n] = \\sum_{k = -\\infty}^{\\infty} (\\frac{1}{2})^{k-2}u[k-2]u[n-k+2]$\nSet $m = k-2$\n$y[n] = \\sum_{m = -\\infty}^{\\infty} (\\frac{1}{2})^{m}u[m]u[n-m-2]$"},{"id":31,"href":"/AlgebraicStructures/3_map_func/","title":"3. Mapping and functions","parent":"Algebraic Structures","content":" Cartesian products Mapping Function Applications Cartesian products Given sets A and B, we can define a new set $A \\times B$, called the Cartesian product of A and B, as a set of ordered pairs. That is,\n$$A \\times B = \\text{\\{} (a, b): a \\in A \\text{ and } b \\in B \\text{\\}}$$\nLet $A = \\text{\\{} 1, 2, 3 \\text{\\}}, B = \\text{\\{} x, y \\text{\\}}$, and $C = \\emptyset$. Then\n$$A \\times B = \\text{\\{} (1, x), (1, y), (2, x), (2, y), (3, x), (3, y) \\text{\\}}$$\n$$A \\times C = \\emptyset$$\nWe define the Cartesian product of n sets to be\n$$A_1 \\times A_2 \\times \\cdots \\times A_n = \\text{\\{} (a_1, a_2, \\cdots, a_n): a_i \\in A_i \\text{ for } i = 1, 2, \\cdots, n \\text{\\}}$$\n$\\mathbb{R}^3$ consists of all of 3-tuples of real numbers. Subsets of $A \\times B$ are called relations. A mapping or a function $f \\subset A \\times B$ from a set $A$ to a set $B$ to be the special type of relation such that.\n$$a \\in A, \\text{ there exists a unique} b \\in B, (a, b) \\in f$$\nWe often write $f(a) = b$ instead of $(a, b) \\in A \\times B$.\nMapping Definition: each element of a set X (domain) is associated with one and only one element of another set Y (range/co-domain). A map is often used as a synonym for a function. Only a one-to-one and many-to-one mapping can be called a function.\nDomain $X = \\text{\\\\{} 1, 2, 3 \\text{\\\\}}$, codomain $Y = \\text{\\\\{} A, B, C, D \\text{\\\\}}$. The function $f: X \\rightarrow Y$ is defined by the set of pairs $f = \\text{\\{} (1, A), (2, B), (3, C) \\text{\\}}$.\nFunction A function is a mapping from a set X to a set Y such that each element of X is associated with one and only one element of Y. For a function to exist, the domain and the co-domain must be non-empty.\nConsider another function:\n$$y = \\sqrt{x+1}$$\nInterval notation: If $x \\in \\mathbb{R}$\n$(a, b) = ]a, b[ \\rightarrow a \u0026lt; b x \u0026lt; b$ $(a, b] = ]a, b] \\rightarrow a \u0026lt; b x \\leq b$ $[a, b) = [a, b[ \\rightarrow a \\leq b x \u0026lt; b$ $[a, b] = [a, b] \\rightarrow a \\leq b x \\leq b$ Operations on functions\n$$(f+g)(x) = f(x) + g(x)$$\n$$(fg)(x) = f(x)g(x)$$\n$$(f-g)(x) = f(x) - g(x)$$\n$$(\\frac{f}{g})(x) = \\frac{f(x)}{g(x)}$$\nSuppose $D_f$ is the domain of $f$ and $D_g$ is the domain of $g$. Then the domain of $f + g$, $f - g$, $f \\cdot g$ are the same and equal to the $D_f \\cap D_g$. While the domain of $\\frac{f}{g}$ is $x \\in D_f \\cap D_g$ such that $g(x) \\neq 0$.\nHow to find the inverse function $f^{-1}(x)$ of the function $f(x)$?\nDomain $f(x)$ is equal to Range $f^{-1}$ Range $f(x)$ is equal to Domain $f^{-1}$ According to the definition, the inverse function does not always exist.\nCheck the mapping, Define the domain and range. $$f(x) = 2x+1; f^{-1}(x) = \\frac{x-1}{2}$$\n$$f(x) = x^2; f^{-1}(x) = \\sqrt{x}$$\nDo the inverse function exist?\n$$(f \\circ f^{-1})(x) = f(f^{-1} \\circ f)(x) = x$$\nNote: functions composition $f(g(x)) = (f \\circ g)(x)$\nThe domain of $f \\circ g$ is $\\text{\\{} x \\in D_g: g(x) \\in D_f \\text{\\}}$, all values $x$ in the domain of $g$ such that $g(x)$ is in the domain of $f$.\nLet $f(x) = x^2$ and $g(x) = 2x+5$ then calculate $(f \\circ g)(x) and (g \\circ f)(x)$. Conclude? Let $f(x) = x^3+1$ and $g(x) = \\sqrt{x}-2$ then find the domain of $(f \\circ g)(x)$ and $(g \\circ f)(x)$. Conclude? Applications For encoding and decoding\nEncode a message using a bijective function so that the receiver can decode the encoded message. If there is no inverse function, the encoded message can be decoded with another meaning. This principle is used for data conversion, transformation, projection, etc.\nConversion between Fahrenheit and Celsius. Fourier transform/inverse Fourier transform (analog and digital signal processing). ","description":"Cartesian products Mapping Function Applications Cartesian products Given sets A and B, we can define a new set $A \\times B$, called the Cartesian product of A and B, as a set of ordered pairs. That is,\n$$A \\times B = \\text{\\{} (a, b): a \\in A \\text{ and } b \\in B \\text{\\}}$$\nLet $A = \\text{\\{} 1, 2, 3 \\text{\\}}, B = \\text{\\{} x, y \\text{\\}}$, and $C = \\emptyset$."},{"id":32,"href":"/SignalSystem/4_ContinuousLTI/","title":"4. Continuous Linear Time-Invariant (LTI) System","parent":"Signals and Systems","content":" I. Lesson objectives II. Continuous-time Delta 1. Weighted Sum of Shifted Impulses Delta in Continuous-time Domain Weighted Sum of Shifted Impulses 2. Definition Summary: Continuous-time Delta Impulse 3. Discrete vs Continuous $\\delta(t)$ and $u(t)$ III. Convolution Integral Definition Convolution Integral of a LTI system Example IV. Properties I. Lesson objectives At the end of this chapter, you should be able to:\nUnderstand the origin of the Delta signal in continuous-time domain. Calculate convolution integral. II. Continuous-time Delta 1. Weighted Sum of Shifted Impulses Delta in Continuous-time Domain Question: how should we define the continuous Delta signal? Let\u0026rsquo;s start with $$\\delta_{\\Delta} (t) = \\begin{cases} 1 \u0026amp; \\text{if } t = 0 \\\\ 0 \u0026amp; \\text{otherwise} \\end{cases}$$ Weighted Sum of Shifted Impulses $$\\hat{x}(t) = \\sum_{k=-\\infty}^{\\infty} x(k \\Delta) \\delta_{\\Delta} (t-k \\Delta) \\Delta$$ The smaller the $\\Delta$, the more accurate the approximation.\n$$x(t) = \\int_{-\\infty}^{\\infty} x(\\tau) \\delta(t - \\tau) d\\tau$$ 2. Definition Summary: Continuous-time Delta Impulse $$\\delta(t) = \\begin{cases} \\infty \u0026amp; \\text{if } t = 0 \\\\ 0 \u0026amp; \\text{otherwise} \\end{cases}$$ Properties:\n$\\int_{-\\infty}^{\\infty} \\delta(t) dt = 1$ $\\int_{-\\infty}^{\\infty} x(t) \\delta(t - \\tau) dt = x(\\tau)$ 3. Discrete vs Continuous Discrete Delta Continuous Delta $\\delta[n] = \\begin{cases} 1 \u0026amp; \\text{if } n = 0 \\\\ 0 \u0026amp; \\text{otherwise} \\end{cases}$ $\\delta(t) = \\begin{cases} \\infty \u0026amp; \\text{if } t = 0 \\\\ 0 \u0026amp; \\text{otherwise} \\end{cases}$ $\\sum_{n=-\\infty}^{\\infty} \\delta[n] = 1$ $\\int_{-\\infty}^{\\infty} \\delta(t) dt = 1$ $\\sum_{n=-\\infty}^{\\infty} x[n] \\delta[n - n_0] = x[n_0]$ $\\int_{-\\infty}^{\\infty} x(t) \\delta(t - \\tau) dt = x(\\tau)$ $x[n] = \\sum_{k=-\\infty}^{\\infty} x[k] \\delta[n - k]$ $x(t) = \\int_{-\\infty}^{\\infty} x(\\tau) \\delta(t - \\tau) d\\tau$ $\\delta(t)$ and $u(t)$ $$u(t) = \\inf_{-\\infty}^{t} \\delta(t - \\tau) d\\tau$$\nIII. Convolution Integral Definition Convolution Integral of a LTI system Impulse response $h(t)$\nConvolution integral example - graphical method\nExample IV. Properties ","description":"I. Lesson objectives II. Continuous-time Delta 1. Weighted Sum of Shifted Impulses Delta in Continuous-time Domain Weighted Sum of Shifted Impulses 2. Definition Summary: Continuous-time Delta Impulse 3. Discrete vs Continuous $\\delta(t)$ and $u(t)$ III. Convolution Integral Definition Convolution Integral of a LTI system Example IV. Properties I. Lesson objectives At the end of this chapter, you should be able to:\nUnderstand the origin of the Delta signal in continuous-time domain."},{"id":33,"href":"/ProbStats/4_DiscreteRandVar/","title":"4. Discrete Random Variables 2","parent":"Probability and Statistics","content":" The course so far I. Conditional PMF on an event 1. Conditional PMF 2. Conditional expectation 3. Total expectation theorem Review Conditioned on an event Mean an variance of the geometric II. Multiple discrete random variables 1. Joint PMF 2. Marginal PMF 3. Expectation III. Conditional PMF on a random variable 1. Conditional PMF Conditional PMF on a random variable Joint, marginal, conditional PMF 2. Conditional expectation Conditional expectations on a random variable Total expectation theorem 3. Independence The course so far Fundamental probability. Discrete random variables, probability mass function (PMF). Expectation: mean, variance, standard deviation. I. Conditional PMF on an event 1. Conditional PMF The conditional PMF of $X$, given an event $A$ with $P(A) \u0026gt; 0$ is defined as: $$p_{X|A}(x) = P(X = x | A) = \\frac{P(\\text{\\{} X = x \\text{\\}} \\cap A)}{P(A)}$$ Sanity check: verify that $$\\sum_{x} p_{X|A}(x) = 1$$\nLet\n$X$ be the roll of a fair 6-sided dice. $A$ be the event that the roll is even. Calculate $p_{X|A}(x)$. Solution ↕ $P_{X|A}(1) = \\frac{P(X=1 \\cap \\text{even})}{P(\\text{even})} = \\frac{0}{\\frac{1}{2}} = 0$ $P_{X|A}(2) = \\frac{P(X=2 \\cap \\text{even})}{P(\\text{even})} = \\frac{X=2}{\\text{even}} = \\frac{1/6}{1/2} = \\frac{1}{3}$ 2. Conditional expectation The conditional expectation of $X$ given an event $A$ with $P(A) \u0026gt; 0$ is defined as: $$\\mathbb{E}[X|A] = \\sum_{x} x p_{X|A}(x)$$ For a function $g(X)$ $$\\mathbb{E}[g(X)|A] = \\sum_{x} g(x) p_{X|A}(x)$$ Let\n$X$ be the roll of a fair 6-sided dice. $A$ be the event that the roll is even. Calculate $\\mathbb{E}[X|A]$. Solution ↕ $$\\mathbb{E}[X|A] = \\sum_{x} x p_{X|A}(x) = \\sum_{x} x \\frac{P(X=x \\cap A)}{P(A)} = \\sum_{x} x \\frac{P(X=x \\cap A)}{P(X=x)} = \\sum_{x} x \\frac{P(X=x \\cap A)}{P(X=x \\cap \\text{even}) + P(X=x \\cap \\text{odd})} = \\sum_{x} x \\frac{P(X=x \\cap A)}{P(X=x \\cap \\text{even})} = \\sum_{x} x \\frac{P(X=x \\cap \\text{even})}{P(X=x \\cap \\text{even})} = \\sum_{x} x \\frac{1}{2} = \\frac{1}{2} \\sum_{x} x = \\frac{1}{2} \\cdot \\frac{1+2+3+4+5+6}{6} = \\frac{7}{2}$$ 3. Total expectation theorem Review Partition into $A_1, A_2, A_3$. Have $P(A_i) \u0026gt; 0$ for every $i$. Have $P(B|A_i) \u0026gt; 0$ for every $i$. $P(B) = ?$ $$P(B) = \\sum_{i=1}^n P(A_i) P(B|A_i)$$\nConsider event B: $X = x$: $$p_X(x) = \\sum_{i=1}^n P(A_i)p_{X|A_I}(x)$$\nConditioned on an event If $A_1, \\ldots, A_n$ be disjoint events that form a partition of the sample space, with $P(A_i) \u0026gt; 0$ for all $i$, then $$\\mathbb{E}[X] = \\sum_{i=1}^n P(A_i) \\mathbb{E}[X|A_i]$$ Mean an variance of the geometric Geometric with parameter $0 \u0026lt; p \\leq 1$: $$p_X(k) = (1-p)^{k-1}p$$ II. Multiple discrete random variables 1. Joint PMF Consider 2 discrete random variables X and Y associated with the same experiment. The joint PMF of $X$ and $Y$ is defined as: $$\\begin{aligned} p_{X,Y}(x,y) \u0026amp;= P(\\text{\\{} X = x \\text{\\}} \\cap \\text{\\{} Y = y \\text{\\}}) \\\\ \u0026amp;= P(X = x, Y = y) \\end{aligned}$$ 2. Marginal PMF We can calculate the PMFs of $X$ and $Y$ by using the following formula:\n$$p_X(x) = \\sum_{y} p_{X,Y}(x,y)$$\n$$p_Y(y) = \\sum_{x} p_{X,Y}(x,y)$$\nProof:\n$$\\begin{aligned} p_X(x) \u0026amp;= P(X = x) \\\\ \u0026amp;= \\sum_{y} P(X = x, Y = y) \\\\ \u0026amp;= \\sum_{y} p_{X,Y}(x,y) \\end{aligned}$$\n3. Expectation A function $g(X,Y)$ of $X$ and $Y$ defines another random variable, and $$\\mathbb{E}[g(X,Y)] = \\sum_x \\sum_y g(x,y) p_{X,Y}(x,y)$$ $$\\mathbb{E}[aX_1 + bX_2 + c] = a \\mathbb{E}[X_1] + b \\mathbb{E}[X_2] + c$$ III. Conditional PMF on a random variable 1. Conditional PMF Conditional PMF on a random variable The conditional PMF $P(X = x|Y = y)$ of $X$ given $Y$, is defined as: $$p_{X|Y}(x|y) = \\frac{P(\\text{\\{} X = x, Y = y \\text{\\}})}{P(Y = y)} = \\frac{p_{X,Y}(x,y)}{p_Y(y)}$$ Sanity check: verify that $$\\sum_{x} p_{X|Y}(x|y) = 1$$\nJoint, marginal, conditional PMF The conditional PMF of $X$ given $Y$ is related to the joint PMF by $$p_{X,Y}(x,y) = p_Y(y) p_{X|Y}(x|y)$$\n2. Conditional expectation Conditional expectations on a random variable The conditional expectation of a random variable $X$ given a value $y$ of $Y$ is defined as: $$\\mathbb{E}[X|Y = y] = \\sum_x x p_{X|Y}(x|y)$$ Total expectation theorem Given 2 random variable $X$ and $Y$ $$\\mathbb{E}[X] = \\sum_y p_Y(y) \\mathbb{E}[X|Y = y]$$ By word: the unconditional average can be obtained by averaging the conditional averages.\n3. Independence Between events Random variables from an event Between random variables Two random variables $X$ and $Y$ are independent if and only if $$p_{X,Y}(x,y) = p_X(x) p_Y(y)$$ If $X$ and $Y$ are independent random variables, prove that $$\\mathbb{E}[XY] = \\mathbb{E}[X] \\mathbb{E}[Y]$$ $$var(XY) = var(X) + var(Y)$$ ","description":"The course so far I. Conditional PMF on an event 1. Conditional PMF 2. Conditional expectation 3. Total expectation theorem Review Conditioned on an event Mean an variance of the geometric II. Multiple discrete random variables 1. Joint PMF 2. Marginal PMF 3. Expectation III. Conditional PMF on a random variable 1. Conditional PMF Conditional PMF on a random variable Joint, marginal, conditional PMF 2. Conditional expectation Conditional expectations on a random variable Total expectation theorem 3."},{"id":34,"href":"/SignalSystem/Exercises/04/","title":"4. LTI ()","parent":"Exercises","content":" 2.8 2.9 2.10 2.22 2.23 2.8 Determine and sketch the convolution of the following 2 signals:\n$$x(t) = \\begin{cases} t + 1 \u0026amp; \\text{if } 0 \\leq n \\leq 1 \\\\ 2-t \u0026amp; \\text{if } 1 \u0026lt; t \\leq 2 \\\\ 0 \u0026amp; \\text{otherwise} \\end{cases}$$\n$$h(t) = \\delta(t+2) + 2\\delta(t+1)$$\n2.9 Let $h(t) = e^{2t}u(-t+4)+e^{-2t}u(t-5)$\nDetermine A and B such that\n$$h(t - \\tau) = \\begin{cases} e^{-2(t-\\tau)} \u0026amp; \\text{if } \\tau \u0026lt; A \\\\ 0 \u0026amp; \\text{if } A \u0026lt; \\tau \u0026lt; B \\\\ e^{2(t-\\tau)} \u0026amp; \\text{if } B \u0026lt; \\tau \\end{cases}$$\n2.10 Suppose that\n$$x(t) = \\begin{cases} 1 \u0026amp; \\text{if } 0 \\leq t \\leq 1 \\\\ 0 \u0026amp; \\text{otherwise} \\end{cases}$$\nand $h(t) = x(t/\\alpha)$, where $0 \u0026lt; \\alpha \u0026lt; 1$.\na. Determine and sketch $y(t) = x(t) * h(t)$\nb. If $dy(t)/dt$ contains only 3 discontinuities, what is the value of $\\alpha$?\n2.22 For each of the following pairs of waveforms, use the convolution integral to find the response $y(t)$ of the LTI system with impulse response $h(t)$ to the input $x(t)$. Sketch your results.\nP2.22 a. $x(t) = e^{\\delta t}u(t), h(t) = e^{\\beta t}u(t)$. Do this both when $\\alpha \\neq \\beta$ and when $\\alpha = \\beta$.\nb. $x(t) = u(t) - 2u(t-2) + u(t-5)$ and $h(t) = e^{2t}u(1-t)$\nc. $x(t)$ and $h(t)$ as in fig. P22.2(a).\nd. $x(t)$ and $h(t)$ as in fig. P22.2(b).\ne. $x(t)$ and $h(t)$ as in fig. P22.2(c).\n2.23 Let $h(t)$ be the triangular pulse shown in fig P.2.23(a), and let $x(t)$ be the impulse train depicted in fig P2.23(b). That is,\n$$x(t) = \\sum_{k = -\\infty}^{\\infty} \\delta(t - kT)$$\nP2.23 Determine and sketch $y(t) = x(t) * h(t)$ for the following values of $T$.\na. $T = 4$\nb. $T = 2$\nc. $T = 3/2$\nd. $T = 1$\n","description":"2.8 2.9 2.10 2.22 2.23 2.8 Determine and sketch the convolution of the following 2 signals:\n$$x(t) = \\begin{cases} t + 1 \u0026amp; \\text{if } 0 \\leq n \\leq 1 \\\\ 2-t \u0026amp; \\text{if } 1 \u0026lt; t \\leq 2 \\\\ 0 \u0026amp; \\text{otherwise} \\end{cases}$$\n$$h(t) = \\delta(t+2) + 2\\delta(t+1)$$\n2.9 Let $h(t) = e^{2t}u(-t+4)+e^{-2t}u(t-5)$\nDetermine A and B such that\n$$h(t - \\tau) = \\begin{cases} e^{-2(t-\\tau)} \u0026amp; \\text{if } \\tau \u0026lt; A \\\\ 0 \u0026amp; \\text{if } A \u0026lt; \\tau \u0026lt; B \\\\ e^{2(t-\\tau)} \u0026amp; \\text{if } B \u0026lt; \\tau \\end{cases}$$"},{"id":35,"href":"/ProbStats/5_Advanced/","title":"5. Advanced Topics","parent":"Probability and Statistics","content":" The course so far I. Calculation of normal probability 1. Standard normal distribution Standard gaussian random variable Standard normal table Examples 2. Normal distribution Standardizing a random variable Example II. Derived distributions 1. Discrete random variables A simple example A linear function of a discrete random variable 2. Continuous random variables A linear function of a continuous random variable A linear function of a normal random variable 3. The PDF of a general function III. Covariance and correlation 1. Covariance 2. Correlation The course so far Fundamental probability. Discrete random variables, probability mass function (PMF). Continuous random variables, probability density function (PDF). I. Calculation of normal probability 1. Standard normal distribution Standard gaussian random variable A continuous random variable $X$ is said to be standard normal $N(0, 1)$ if its PDF is given by: $$f(x) = \\frac{1}{\\sqrt{2 \\pi}} e^{-\\frac{x^2}{2}}$$ Standard normal table Example, we need to find $P(X \\leq 1.76)$.\n$P(X \\leq 1.76) = \\phi(1.76) = \\phi(1.7) + \\phi(0.06)$ $\\rightarrow$ look up the intersection of the row for $1.7$ and the column for $0.06$. $\\rightarrow$ the value is $0.9608$. Examples Let $X \\sim N(0, 1)$. Calculate the following probabilities:\n$P(X \\leq 2.5) = \\phi(2.5) = 0.9938$ $\\phi(1.76) = 0.9632$ $\\phi(-2) = 0.0228$ $P(1 \\leq X \\leq 2.93)$\n$\\begin{aligned} \u0026amp;= P(X \\leq 2.93) - P(X \\leq 1) \\\\ \u0026amp;= \\phi(2.93) - \\phi(1) \\\\ \u0026amp;= 0.9987 - 0.8413 \\\\ \u0026amp;= 0.1574 \\end{aligned}$ 2. Normal distribution Standardizing a random variable Let\n$X \\sim N(\\mu, \\sigma^2)$ $Y = \\frac{X - \\mu}{\\sigma}$ Then $Y \\sim N(0, 1)$.\nExample Let $X \\sim N(6, 4)$. Calculate\n$P(2 \\leq X \\leq 10)$ $\\begin{aligned} \u0026amp;= P(2 \\leq X \\leq 8) \\\\ \u0026amp;= P(X \\leq 8) - P(X \\leq 2) \\\\ \u0026amp;= P(\\frac{X - 6}{2} \\leq \\frac{8 - 6}{2}) - P(\\frac{X - 6}{2} \\leq \\frac{2 - 6}{2}) \\\\ \u0026amp;= \\phi(\\frac{8 - 6}{2}) - \\phi(\\frac{2 - 6}{2}) \\\\ \u0026amp;= \\phi(1) - \\phi(-2) \\\\ \u0026amp;= 0.8413 - 0.0228 \\\\ \u0026amp;= 0.8185 \\end{aligned}$\nNormal Distribution \u0026amp; Probability Problems II. Derived distributions Derived distributions: given the PDF of $X$, calculate the PDF of $Y = g(X)$. 1. Discrete random variables A simple example $$p_Y(y) = P(g(X) = y) = \\sum_{x:g(x)=y} p_X(x)$$\nA linear function of a discrete random variable Given $Y = aX + b$: $$p_Y(y) = p_X(\\frac{y - b}{a})$$ 2. Continuous random variables A linear function of a continuous random variable Given $Y = aX + b$: $$f_Y(y) = \\frac{1}{|a|} f_X(\\frac{y - b}{a})$$ A linear function of a normal random variable Given $X \\sim N(\\mu, \\sigma^2)$, $Y = aX + b$: $$ f_X(x) = \\frac{1}{\\sqrt{2 \\pi \\sigma^2}} e^{-\\frac{(x - \\mu)^2}{2 \\sigma^2}}$$ Find $f_Y(y)$.\n$$\\begin{aligned} f_Y(y) \u0026amp;= \\frac{1}{|a|} f_X(\\frac{y - b}{a}) \\\\ \u0026amp;= \\frac{1}{|a|} \\frac{1}{\\sqrt{2 \\pi \\sigma^2}} e^{-\\frac{(\\frac{y - b}{a} - \\mu)^2}{2 \\sigma^2}} \\\\ \u0026amp;= \\frac{1}{\\sqrt{2 \\pi \\sigma^2}} e^{-\\frac{(y - a\\mu - b)^2}{2 \\sigma^2}} \\end{aligned}$$\n3. The PDF of a general function 2-step process:\nFind the CDF of $Y$: $F_Y(y) = P(Y \\leq y)$ Differentiate $f_Y(y) = \\frac{dF_Y(y)}{dy}$ $X$ uniform on $[0, 2]$. $Y = X^3$. Find $f_Y(y)$.\n$$\\begin{aligned} f_Y(y) \u0026amp;= P(Y \\leq y) \\\\ \u0026amp;= P(X^3 \\leq y) \\\\ \u0026amp;= P(X \\leq \\sqrt[3]{y}) \\\\ \u0026amp;= \\frac{1}{2} \\sqrt[3]{y} \\\\ \u0026amp;= \\frac{1}{2} y^{1/3} \\end{aligned}$$\nIII. Covariance and correlation 1. Covariance The covariance of 2 random variables $X$ and $Y$ is defined as: $$cov(X, Y) = E[(X - E[X])(Y - E[Y])]$$ When $cov(X, Y) \u0026gt; 0$, $X$ and $Y$ are positively correlated . When $cov(X, Y) \u0026lt; 0$, $X$ and $Y$ are negatively correlated . When $cov(X, Y) = 0$, $X$ and $Y$ are uncorrelated . Properties:\n$cov(X, Y) = \\mathbb{E}[XY] - \\mathbb{E}[X]\\mathbb{E}[Y]$ $cov(X, X) = var(X)$ $cov(X, aY + b) = a cov(X, Y)$ $cov(X, Y + Z) = cov(X, Y) + cov(X, Z)$ 2. Correlation The correlation coefficient $\\rho_{X, Y}$ is defined as: $$\\rho_{X, Y} = \\frac{cov(X, Y)}{\\sqrt{var(X)var(Y)}}$$ and satisfies $$-1 \\leq \\rho_{X, Y} \\leq 1$$ ","description":"The course so far I. Calculation of normal probability 1. Standard normal distribution Standard gaussian random variable Standard normal table Examples 2. Normal distribution Standardizing a random variable Example II. Derived distributions 1. Discrete random variables A simple example A linear function of a discrete random variable 2. Continuous random variables A linear function of a continuous random variable A linear function of a normal random variable 3. The PDF of a general function III."},{"id":36,"href":"/SignalSystem/Exercises/05/","title":"5. Fourier Series ()","parent":"Exercises","content":" 3.1 3.4 3.5 3.17 3.22 3.46 3.1 A continuous-time periodic signal $x(t)$ is real valued and has a fundamental period $T = 8$. The nonzero Fourier series coefficients for $x(t)$ are $$a_1 = a_{-1} = 2, a^{*}_{-3} = 4j$$\nExpress $x(t)$ in the form $$x(t) = \\sum_{k=0}^{\\infty} A_k cos(\\omega_k t + \\phi_k)$$\n3.4 Use the Fourier series analysis equation (3.39) to calculate the coefficients ak for the continuous-time periodic signal $$x(t) = \\begin{cases} 1.5 \u0026amp; 0 \\leq t \u0026lt; 1 \\\\ -1.5 \u0026amp; 1 \\leq t \u0026lt; 2 \\end{cases}$$ with fundamental frequency $\\omega_0 = \\pi$.\n3.5 Let $x_1(t)$ be a continuous-time periodic signal with fundamental frequency $\\omega_1$ and Fourier coefficients $a_k$. Given that $$x_2(t) = x_1(1-t) + x_1(t-1)$$ how is the fundamental frequency $\\omega_2$ of $x_2(t)$ related to $\\omega_1$? Also, find a relationship between the Fourier series coefficients $b_k$ of $x_2(t)$ and the coefficients $a_k$. You may use the properties listed in Table 3.1.\n3.17 Consider three continuous-time systems $S_1, S_2$. and $S_3$ whose responses to a complex exponential input $e^{j5t}$ are specified as\n$$S_1: e^{j5t} \\rightarrow te^{j5t}$$ $$S_2: e^{j5t} \\rightarrow e^{j5(t-1)}$$ $$S_3: e^{j5t} \\rightarrow cos(5t)$$\nFor each system, determine whether the given information is sufficient to conclude that the system is definitely not LTI.\n3.22 Determine the Fourier series representations for the following signals\nP3.22 a. Each $t(x)$ illustrate in fig P3.22(a)-(f)\nb. $x(t)$ periodic with period 2 and $$x(t) = e^{-t} \\text{ for } -1 \u0026lt; t \u0026lt; 1$$\n3.46 In this problem, we derive two important properties of the continuous-time Fourier series: the multiplication property and Parseval\u0026rsquo;s relation. Let $x(t)$ and $y(t)$ both be continuous-time periodic signals having period To and with Fourier series representations given by $$x(t) = \\sum_{k=-\\infty}^{\\infty} a_ke^{j\\omega_0t}, y(t) = \\sum_{k=-\\infty}^{\\infty} b_ke^{j\\omega_0t}$$\nP3.46 a. Show that the Fourier series coefficients of the signal $$z(t) = x(t)y(t) = \\sum_{k=-\\infty}^{\\infty} c_ke^{j\\omega_0t}$$\nare given by the discrete convolution $$c_k = \\sum_{m=-\\infty}^{\\infty} a_nb_{k-n}$$\nb. Use the result of part (a) to compute the Fourier series coefficients of the signals $x_1(t)$, $x_2(t)$, and $x_3(t)$ depicted in fig P3.46.\nc. Suppose that $y(t)$ in eq. (P3.46-1) equals $x*(t)$. Express the $b_k$ in the equation in terms of $a_k$ and use the result of part (a) to prove Parseval\u0026rsquo;s relation for periodic signals-that is,\n$$ \\frac{1}{T_0} \\int_{0}^{T_0} |x(t)|^2 dt = \\frac{1}{T_0} \\sum_{k=-\\infty}^{\\infty} |a_k|^2$$\n","description":"3.1 3.4 3.5 3.17 3.22 3.46 3.1 A continuous-time periodic signal $x(t)$ is real valued and has a fundamental period $T = 8$. The nonzero Fourier series coefficients for $x(t)$ are $$a_1 = a_{-1} = 2, a^{*}_{-3} = 4j$$\nExpress $x(t)$ in the form $$x(t) = \\sum_{k=0}^{\\infty} A_k cos(\\omega_k t + \\phi_k)$$\n3.4 Use the Fourier series analysis equation (3.39) to calculate the coefficients ak for the continuous-time periodic signal $$x(t) = \\begin{cases} 1."},{"id":37,"href":"/SignalSystem/5_FourierContinuous/","title":"5. Fourier Series Representation of Continuous-time Periodic Signals","parent":"Signals and Systems","content":" I. Lesson Objectives II. Review of Complex Numbers 1. Complex number, Conjugation 2. Euler formula $e^{j\\psi} = \\cos\\psi + j\\sin\\psi$ 3. Complex exponential signal $e^{st}$ 4. LTI response to complex exponential III. Fourier Series Representation 1. Periodic signal Fundamental period 2 basic periodic signals An example Review: integral of $e^{j\\omega_0t}$ 2. Definition IV. Properties Notations 1. Linearity 2. Time shifting 3. Time reversal 4. Time scaling 5. Multiplication 6. Conjugation 7. Parseval\u0026rsquo;s relation I. Lesson Objectives At the end of this chapter, you should be able to:\nBe familiar with complex number. Find Fourier coefficients of any continuous periodic signal. Understand various properties of Fourier series. II. Review of Complex Numbers 1. Complex number, Conjugation Complex plane with Cartesian (L) and polar (R) representation of complex number 2. Euler formula $e^{j\\psi} = \\cos\\psi + j\\sin\\psi$ Euler formula $e^{j\\varphi} = \\cos\\varphi + j\\sin\\varphi$\n$cos(\\varphi) = \\dfrac{e^{j\\varphi} + e^{-j\\varphi}}{2}$\n$sin(\\varphi) = \\dfrac{e^{j\\varphi} - e^{-j\\varphi}}{2i}$\n3. Complex exponential signal $e^{st}$ $e^{st} = e^{(a + jb)t} = e^{at}e^{jbt}$\n$e^{jbt}$: complex exponential signal $e^{at}$: real exponential signal $e^{jbt}$: complex exponential signal 4. LTI response to complex exponential $$y(t) = \\int_{-\\infty}^{\\infty} h(\\tau)x(t-\\tau)d\\tau$$ The response of an LTI system to a complex exponential input is the same complex exponential with only a change in amplitude.\nIII. Fourier Series Representation 1. Periodic signal Fundamental period The minimum positive, non-zero value of T so that $$x(t) = x(t + T)$$\nFundamental frequency: $\\omega_0 = \\dfrac{2\\pi}{T}$\n2 basic periodic signals The sinusoidal signal: $x(t) = cos(\\omega_0t)$ The periodic complex exponential: $x(t) = e^{j\\omega_0t}$ An example Consider a peridic signal $x(t)$ with fundamental frequency $2\\pi$ $$x(t) = \\sum_{k = -3}^{3} a_ke^{jk2\\pi t}$$ where $a_0 = 1, a_1 = a_{-1} = \\frac{1}{4}, a_2 = a_{-2} = \\frac{1}{2}, a_3 = a_{-3} = \\frac{1}{3}$\n$e^{j\\varphi} = \\cos\\varphi + j\\sin\\varphi$ $e^{-j\\varphi = \\cos\\varphi - j\\sin\\varphi}$ $\\Rightarrow cos(\\varphi) = \\dfrac{e^{j\\varphi} + e^{-j\\varphi}}{2}$ $\\Rightarrow sin(\\varphi) = \\dfrac{e^{j\\varphi} - e^{-j\\varphi}}{2j}$ Review: integral of $e^{j\\omega_0t}$ Given $\\omega_0 = \\frac{2\\pi}{T}$, calculate:\n$$\\int_{0}^{T} e^{j\\omega_0t}dt$$ $$ = \\frac{e^{j\\omega_0T} -1}{j\\omega_0T} = \\frac{e^{j2\\pi}}{j2\\pi}$$\n$$\\int_{0}^{T} e^{jk\\omega_0t}dt$$ $$ = \\frac{e^{jk2\\pi}}{jk2\\pi} $$\n2. Definition Assume that\n$$ x(t) = \\sum_{k = -\\infty}^{\\infty} a_ke^{jk\\omega_0t}$$\nthen\n$$a_k = ?$$\nHint: calculate $x(t)e^{-jk\\omega_0t}$, and its integral from $0$ to $T$.\nThe synthesis equation\n$$ x(t) = \\sum_{k = -\\infty}^{\\infty} a_ke^{jk\\omega_0t} = \\sum_{k = -\\infty}^{\\infty} a_ke^{jk\\frac{2\\pi}{T}t}$$\nThe analysis equation\n$$ a_k = \\frac{1}{T}\\int_{T} x(t)e^{-jk\\omega_0t}dt = \\frac{1}{T}\\int_{T} x(t)e^{-jk\\frac{2\\pi}{T}t}dt$$\nDetermine Fourier series coefficients of\n$$x(t) = sin(\\omega_0t)$$\n$= \\frac{e^{j\\omega_0t} - e^{-\\omega_0t}}{2j}$\n$sin(\\omega_0t) = \\frac{1}{2j}e^{j\\omega_0t} + (\\frac{-1}{2j}e^{-j\\omega_0t})$\nDetermine Fourier series coefficients of\n$$x(t) = 1 + sin(\\omega_0t) + 2cos(\\omega_0t) + cos(2\\omega_0t + \\frac{\\pi}{4})$$\nWe have:\n$cos(\\varphi) = \\dfrac{e^{j\\varphi} + e^{-j\\varphi}}{2}$\n$sin(\\varphi) = \\dfrac{e^{j\\varphi} - e^{-j\\varphi}}{2j}$\nSo:\n$sin(\\omega_0t) = \\frac{e^{j\\omega_0t} - e^{-j\\omega_0t}}{2j}$\n$cos(\\omega_0t) = \\frac{e^{j\\omega_0t} + e^{-j\\omega_0t}}{2}$\n$cos(2\\omega_0t + \\frac{\\pi}{4}) = \\frac{e^{j2\\omega_0t + \\frac{\\pi}{4}} + e^{-j2\\omega_0t - \\frac{\\pi}{4}}}{2}$\n$x(t) = 1 + \\frac{e^{j\\omega_0t} - e^{-j\\omega_0t}}{2j} + \\frac{e^{j\\omega_0t} + e^{-j\\omega_0t}}{2} + \\frac{e^{j2\\omega_0t + \\frac{\\pi}{4}} + e^{-j2\\omega_0t - \\frac{\\pi}{4}}}{2}$\nExample 2 IV. Properties Notations $x(t)$ is a periodic signal with period $T$ and fundamental frequency $\\omega_0 = \\frac{2\\pi}{T}$. Its Fourier coefficients are denoted by $a_k$.\nThe synthesis equation\n$$x(t) = \\sum_{x = -\\infty}^{\\infty} a_ke^{jk\\omega_0t} = \\sum_{k = -\\infty}^{\\infty} a_ke^{jk\\frac{2\\pi}{T}t}$$\nThe analysis equation\n$$a_k = \\frac{1}{T}\\int_{T} x(t)e^{-jk\\omega_0t}dt = \\frac{1}{T}\\int_{T} x(t)e^{-jk\\frac{2\\pi}{T}t}dt$$\n1. Linearity Given $$x(t) \\leftarrow\\text{FS}\\rightarrow a_k$$\n$$y(t) \\leftarrow\\text{FS}\\rightarrow b_k$$\nThen $$z(t) = Ax(t) + By(t) \\leftarrow\\text{FS}\\rightarrow c_k = Aa_k + Bb_k$$\n2. Time shifting Given $$x(t) \\leftarrow\\text{FS}\\rightarrow a_k$$\nThen\n$$x(t - t_0) \\leftarrow\\text{FS}\\rightarrow e^{-j\\omega_0t_0}a_k$$\n3. Time reversal Given $$x(t) \\leftarrow\\text{FS}\\rightarrow a_k$$\nThen $$x(-t) \\leftarrow\\text{FS}\\rightarrow a_{-k}$$\n4. Time scaling Given $$x(t) \\leftarrow\\text{FS}\\rightarrow a_k$$\nThen $$x(\\alpha t) \\leftarrow\\text{FS}\\rightarrow ???$$\nAttention:\nthe Fourier coefficients have not changed the Fourier series representation has changed. 5. Multiplication Given $$x(t) \\leftarrow\\text{FS}\\rightarrow a_k$$ $$y(t) \\leftarrow\\text{FS}\\rightarrow b_k$$\nThen\n$$z(t) = x(t)y(t) \\leftarrow\\text{FS}\\rightarrow c_k = \\sum_{l = -\\infty}^{\\infty} a_lb_{k-l}$$\n6. Conjugation Given $$x(t) \\leftarrow\\text{FS}\\rightarrow a_k$$\nThen $$x^{*}(t) \\leftarrow\\text{FS}\\rightarrow a^{*}_{-k}$$\n7. Parseval\u0026rsquo;s relation $$\\frac{1}{T} \\int_{T} |x(t)|^2dt = \\sum_{k = -\\infty}^{\\infty} |a_k|^2$$ ","description":"I. Lesson Objectives II. Review of Complex Numbers 1. Complex number, Conjugation 2. Euler formula $e^{j\\psi} = \\cos\\psi + j\\sin\\psi$ 3. Complex exponential signal $e^{st}$ 4. LTI response to complex exponential III. Fourier Series Representation 1. Periodic signal Fundamental period 2 basic periodic signals An example Review: integral of $e^{j\\omega_0t}$ 2. Definition IV. Properties Notations 1. Linearity 2. Time shifting 3. Time reversal 4. Time scaling 5. Multiplication 6. Conjugation 7."},{"id":38,"href":"/SignalSystem/Exercises/06/","title":"6. Fourier Series []","parent":"Exercises","content":" 3.2 3.9 3.11 3.28 3.2 A discrete-time periodic signal $x[n]$ is real value and has a fundamental period $N = 5$. The nonzero Fourier series coefficients for $x[n]$ are\n$$a_0 = 1, a_2 = a^{*}_{-2} = e^{j\\pi/4}$$\n$$a_4 = a^{*}_{-4} = 2e^{-j\\pi/3}$$\nExpress $x[n]$ in the form\n$$x[n] = \\sum_{k=1}^{\\infty} A_k sin(\\omega_k n + \\phi_k)$$\n3.9 Use the analysis equation (3.95) to evaluate the numerical values of one period of the Fourier series coefficients of the periodic signal\n$$x[n] = \\sum_{m=-\\infty}^\\infty \\text{\\{} 4\\delta[n-4m] + 8\\delta[n-1-4m] \\text{\\}}$$\n3.11 Suppose we are given the following information about a signal $x[n]$:\n$x[n]$ is a real and even signal. $x[n]$ has period $N = 10$ and Fourier coefficients $a_k$. $a_{11} = 5$ $\\frac{1}{10} \\sum_{n=0}{9} |x[n]|^2 = 50$ Show that $x[n] = A cos(Bn + C)$, and specify numerical value for the constant A, B, and C.\n3.28 Determine the Fourier series coefficients of the following discrete-time periodic signals. Plot the magnitude and phase of each set of coefficients $a_k$.\nP3.28 a. Each $x[n]$ depicted in fig 3.28(a)-(c)\nb. $x[n] = sin(2\\pi n/3) cos(\\pi n/2)$\nc. $x[n]$ periodic with period 4 and\n$$x[n] = 1 - sin\\frac{\\pi n}{4} \\text{for } 0 \\leq n \\leq 3$$\nd. $x[n]$ periodic with period 12 and\n$$x[n] = 1 - sin\\frac{\\pi n}{4} \\text{for } 0 \\leq n \\leq 11$$\n","description":"3.2 3.9 3.11 3.28 3.2 A discrete-time periodic signal $x[n]$ is real value and has a fundamental period $N = 5$. The nonzero Fourier series coefficients for $x[n]$ are\n$$a_0 = 1, a_2 = a^{*}_{-2} = e^{j\\pi/4}$$\n$$a_4 = a^{*}_{-4} = 2e^{-j\\pi/3}$$\nExpress $x[n]$ in the form\n$$x[n] = \\sum_{k=1}^{\\infty} A_k sin(\\omega_k n + \\phi_k)$$\n3.9 Use the analysis equation (3.95) to evaluate the numerical values of one period of the Fourier series coefficients of the periodic signal"},{"id":39,"href":"/SignalSystem/6_FourierDiscrete/","title":"6. Fourier Series Representation of Discrete-time Periodic Signals","parent":"Signals and Systems","content":" I. Lesson Objectives II. Fourier Representation 1. Periodic signal Fundamental period 2 basic periodic signals Exercies: sum of $e^{j\\omega_0n}$ 2. Definition Fourier series Fourier series equation pair Examples III. Properties 1. Multiplication 2. Parseval\u0026rsquo;s Relation I. Lesson Objectives At the end of this chapter, you should be able to:\nBe familiar with discrete complex signal. Find Fourier coefficients of any discrete periodic signal. Understand various properties of Fourier series. II. Fourier Representation 1. Periodic signal Fundamental period The minimum positive, non-zero value of N so that $$x[n] = x[n + N]$$ Fundamental frequency: $\\omega_0 = \\dfrac{2\\pi}{N}$ 2 basic periodic signals The sinusoidal signal: $x[n] = cos(\\omega_0n)$ The periodic complex exponential: $x[n] = e^{j\\omega_0n}$ Exercies: sum of $e^{j\\omega_0n}$ Given $\\omega_0 = \\frac{2\\pi}{N}$, proof that $$\\sum_{n=\u0026lt;N\u0026gt;}e^{j\\omega_0n} = \\sum_{n=\u0026lt;N\u0026gt;}e^{jk(2\\pi/N)n} = \\begin{cases} N \u0026amp; \\text{if } k = 0, \\pm N, \\pm 2N, \\dots \\\\ 0 \u0026amp; \\text{otherwise} \\end{cases}$$\n2. Definition Fourier series Assume that $$x[n] = \\sum_{k=\u0026lt;N\u0026gt;}a_ke^{jk\\omega_0n}$$\nThen $$a_k = ???$$\nHint: calculate $x[n]e^{-jk\\omega_0n}$, and its sum over $N$ terms.\nFourier series equation pair The synthesis equation\n$$x[n] = \\sum_{k=\u0026lt;N\u0026gt;}a_ke^{jk\\omega_0n} = \\frac{1}{N} \\sum_{k=\u0026lt;N\u0026gt;}x[n]e^{-jk\\frac{2\\pi}{N}n}$$\nThe analysis equation\n$$a_k = \\dfrac{1}{N}\\sum_{n=\u0026lt;N\u0026gt;}x[n]e^{-jk\\omega_0n} = \\frac{1}{N} \\sum_{n=\u0026lt;N\u0026gt;}x[n]e^{-jk\\frac{2\\pi}{N}n}$$\nExamples Consider the signal $x[n] = sin(\\frac{2\\pi}{5}n)$, determine and plot its Fourier series coefficients. Step 1: verify the signal is periodic $\\rightarrow N = ?$\nLets set $N = 5$\n$\\begin{aligned} x[n+5] \u0026amp;= sin(\\frac{2\\pi}{5}(n+5)) \\\\ \u0026amp;= sin(\\frac{2\\pi}{5}n + 2\\pi) \\\\ \u0026amp;= sin(\\frac{2\\pi}{5}n) = x[n] \\end{aligned}$\n$x_{(n)} = x_{(n+5)} \\rightarrow N = 5 \\rightarrow \\omega_0 = \\frac{2\\pi}{5}$\nStep 2: $e^{j\\omega} = cos\\varphi + jsin\\varphi$\n$\\begin{aligned} sin(\\frac{2\\pi}{5}n) \u0026amp;= \\frac{1}{2j}e^{j\\frac{2\\pi}{5}n} - \\frac{1}{2j}e^{-j\\frac{2\\pi}{5}n} \\\\ \u0026amp;= \\frac{1}{2j}(e^{j\\frac{2\\pi}{5}n} - e^{-j\\frac{2\\pi}{5}n}) \\\\ \u0026amp;= \\frac{1}{2j}(e^{j\\omega_0n} - e^{-j\\omega_0n}) \\end{aligned}$\nConsider the signal $x[n] = sin3(\\frac{2\\pi}{5}n)$, determine and plot its Fourier series coefficients. $$x_{(n)} = sin(\\frac{6\\pi}{5}n) \\rightarrow \\text{ verify period signal}$$\nStep 1: discrete time domain\n$sin(\\frac{6\\pi}{5}n) = sin(\\frac{6\\pi}{5}n + \\frac{6\\pi}{5}N)$ ($\\frac{6\\pi}{5}N = k^*2\\pi, k \\in N$)\n$\\Rightarrow \\frac{6\\pi}{5}N = k^*2\\pi$\n$\\Rightarrow 6N = k^* 10$\n$\\Rightarrow 3N = k^* 5$\n$\\Leftrightarrow N = k^* \\frac{5}{3} = 5$\n$\\begin{aligned} sin(\\frac{6\\pi}{5}n) \u0026amp;=\\frac{e^{j\\frac{6\\pi}{5}n}-e^{-j\\frac{6\\pi}{5}n}}{2j} \\\\ \u0026amp;=\\frac{1}{2j} e^{j\\frac{6\\pi}{5}n} - \\frac{1}{2j} e^{-j\\frac{6\\pi}{5}n} \\\\ \\end{aligned}$\n$k\\frac{2\\pi}{5} = \\frac{6\\pi}{5} \\Leftrightarrow k = 3$ $a_3 = \\frac{1}{2j} - a_{-2}$ $a_{-3} = \\frac{-1}{2j}$ $\\begin{aligned} a{-3} \u0026amp;: a_{1} \\\\ a_{-2} \u0026amp;: a_{2} \\\\ a_{-1} \u0026amp;: a_{j} = a{-2} \\end{aligned}$\n$\\begin{aligned} a{-3} \u0026amp;= \\frac{-1}{2j} \\\\ a_{-2} \u0026amp;= \\frac{1}{2j} \\\\ a_{-1} \u0026amp;= 0 \\\\ a_0 \u0026amp;= 0 \\\\ a_1 \u0026amp;= 0 \\\\ \\end{aligned}$\nIII. Properties 1. Multiplication Given $$x[n] = \\leftarrow\\text{FS}\\rightarrow a_k$$ $$y[n] = \\leftarrow\\text{FS}\\rightarrow b_k$$\nThen $$x[n]y[n] = \\leftarrow\\text{FS}\\rightarrow c_k = \\sum_{l=\u0026lt;N\u0026gt;}a_lb_{k-l}$$\nThe right-hand side is a periodic convolution between the two periodic sequences of Fourier coefficients.\n2. Parseval\u0026rsquo;s Relation $$\\frac{1}{N} \\sum_{n=\u0026lt;N\u0026gt;}|x[n]|^2dt = \\sum_{k=\u0026lt;N\u0026gt;}|a_k|^2$$ The average power in a periodic signal equals the sum of the average powers in all of its harmonic components.\n","description":"I. Lesson Objectives II. Fourier Representation 1. Periodic signal Fundamental period 2 basic periodic signals Exercies: sum of $e^{j\\omega_0n}$ 2. Definition Fourier series Fourier series equation pair Examples III. Properties 1. Multiplication 2. Parseval\u0026rsquo;s Relation I. Lesson Objectives At the end of this chapter, you should be able to:\nBe familiar with discrete complex signal. Find Fourier coefficients of any discrete periodic signal. Understand various properties of Fourier series. II."},{"id":40,"href":"/ProbStats/6_LimitTheorem/","title":"6. Limit Theorem","parent":"Probability and Statistics","content":" The course so far I. The context II. Inequalities Markov\u0026rsquo;s inequality Chebyshev\u0026rsquo;s inequality III. Limit theorem The weak law of large numbers The central limit theorem The course so far Fundamental probability. Discrete random variables, probability mass function (PMF). Continuous random variables, probability density function (PDF). I. The context A sequence $X_1, X_2, \\dots$ of independent identically distributed random variables with mean $\\mu$ and variance $\\sigma^2$. Let $S_n = X_1 + X_2 + \\dots + X_n$. Sample mean $M_n = \\frac{X_1 + X_2 + \\dots + X_n}{n}$. $\\mathbb{E}[M_n] = \\mu$, $var(M_n) = \\frac{\\sigma^2}{n}$. II. Inequalities Markov\u0026rsquo;s inequality If a non-negative random variable has a small mean, then the probability that it takes a large value must also be small.\nIf a random variable $X$ can only take non-negative values, then $$P(X \\geq a) \\leq \\frac{\\mathbb{E}[X]}{a} \\text{ for all } a \u0026gt; 0$$ Let $X$ be uniformly distributed in the interval $[0, 4]$. Find $P(X \\geq 3)$.\n$$P(X \\geq 3) \\leq \\frac{\\mathbb{E}[X]}{3}$$ $$\\begin{aligned} \u0026amp;= \\frac{\\mathbb{E}[X]}{3} \\\\ \u0026amp;= \\frac{4}{3} \\\\ \u0026amp;= 1.3333 \\end{aligned}$$\nChebyshev\u0026rsquo;s inequality If a random variable has small variance, then the probability that it takes a value far from its mean must be small.\nIf $X$ is a random variable with mean $\\mu$ and variance $\\sigma^2$, then $$P(|X - \\mu| \\geq a) \\leq \\frac{\\sigma^2}{a^2} \\text{ for all } a \u0026gt; 0$$ III. Limit theorem The weak law of large numbers Let $X_1, X_2, \\dots$ be independent identically distributed random variables with mean $\\mu$. For every $\\epsilon \u0026gt; 0$, we have $$P(|M_n - \\mu| \\geq \\epsilon) \\rightarrow 0 \\text{ as } n \\rightarrow \\infty$$ Intuition: for large $n$, the distribution of $M_n$ is concentrated around $\\mu$.\nConsider:\nan event A and its probability is $p = P(A)$. $n$ independent repetitions of the experiment. $M_n$ is the number of times A occurs in the $n$ repetitions. The central limit theorem Central limit theorem | Inferential statistics | Probability and Statistics | Khan Academy\nLet $X_1, X_2, \\dots$ be independent identically distributed random variables with mean $\\mu$ and variance $\\sigma^2$. Let $S_n = X_1 + X_2 + \\dots + X_n$ and its variance is $n\\sigma^2$. Let $M_n = \\frac{X_1 + X_2 + \\dots + X_n}{n}$ and its variance is $\\frac{\\sigma^2}{n}$. What about $\\frac{S_n}{\\sqrt{n}} = \\frac{X_1 + X_2 + \\dots + X_n}{\\sqrt{n}}$? And $Z_n = \\frac{S_n - n\\mu}{\\sqrt{n\\sigma^2}}$? $\\mathbb{E}[Z_n] = 0$, $var(Z_n) = 1$. Let $Z \\sim N(0, 1)$ and $Z_n = \\frac{X_1 + X_2 + \\dots + X_n - n\\mu}{\\sqrt{n\\sigma^2}}$, for every z $$lim_{n \\rightarrow \\infty} P(Z_n \\leq z) = P(Z \\leq z)$$ Examples $Z_n = \\frac{S_n - n\\mu}{\\sqrt{n\\sigma^2}}$ $P(S_n \\leq a) \\approx b$ Packages weights $X_i$, i.i.d. exponential $\\lambda = \\frac{1}{2}$. Load container with $n = 100$ packages.\nCalculate $P(S_n \u0026gt; 210)$. $P(S_n \\leq a) \\approx b$ Packages weights $X_i$, i.i.d. exponential $\\lambda = \\frac{1}{2}$. Load container with $n = 100$ packages.\nFind $a$ so that $P(S_n \u0026gt; a) \\approx 0.05$. $P(S_n \\leq a) \\approx b$ Packages weights $X_i$, i.i.d. exponential $\\lambda = \\frac{1}{2}$.\nHow large should $n$ be so that $P(S_n \u0026gt; 210) \\approx 0.05$? Packages weights $X_i$, i.i.d. exponential $\\lambda = \\frac{1}{2}$. Load container until weight exceeds 210. $N$ is number of loaded packages.\nCalculate $P(N \\geq 100)$. ","description":"The course so far I. The context II. Inequalities Markov\u0026rsquo;s inequality Chebyshev\u0026rsquo;s inequality III. Limit theorem The weak law of large numbers The central limit theorem The course so far Fundamental probability. Discrete random variables, probability mass function (PMF). Continuous random variables, probability density function (PDF). I. The context A sequence $X_1, X_2, \\dots$ of independent identically distributed random variables with mean $\\mu$ and variance $\\sigma^2$. Let $S_n = X_1 + X_2 + \\dots + X_n$."},{"id":41,"href":"/ADS/","title":"ADS","parent":"Welcome","content":" About Lecturer: Prof. Doan Nhat Quang - ICT department Table of Contents Introduction to Algorithms and Data Structures ","description":" About Lecturer: Prof. Doan Nhat Quang - ICT department Table of Contents Introduction to Algorithms and Data Structures "},{"id":42,"href":"/AlgebraicStructures/","title":"Algebraic Structures","parent":"Welcome","content":" About Lecturer: Prof. Doan Nhat Quang - ICT department Textbook Abstract Algebra: Theory and Applications Table of Contents 1. Introduction to Algebraic Structures 2. Groups 3. Mapping and functions Exercises 01. Ex. Groups Retake 2020 ","description":" About Lecturer: Prof. Doan Nhat Quang - ICT department Textbook Abstract Algebra: Theory and Applications Table of Contents 1. Introduction to Algebraic Structures 2. Groups 3. Mapping and functions Exercises 01. Ex. Groups Retake 2020 "},{"id":43,"href":"/ProjectManagement/","title":"Basic principles of project management","parent":"Welcome","content":" About Lecturer: Prof. Nguyen Van Hung\nTextbook Student workbook, Fundamentals Of Management, 1st edition, 1998. James P. Lewis, Fundamentals Of Project Managements, 3rd edition, 2007. Joseph Heagney, Fundamentals Of Project Managements, 4th edition, 2005. Project Management Institute, A Guide To The Project Management Body Of Knowledge (PMBOK Guide), 5th edition, 2013. Russ Unger and Carolyn Chandler, A Project Guide to UX Design: For User Experience Designers in the Field or in the Making, 2009. Project Management: Project Evaluation and Termination. Table of Contents Part 1. Project management basics I. Introduction into projects II. Classification of projects III. Representative project examples Part 2. Project management basics ","description":"About Lecturer: Prof. Nguyen Van Hung\nTextbook Student workbook, Fundamentals Of Management, 1st edition, 1998. James P. Lewis, Fundamentals Of Project Managements, 3rd edition, 2007. Joseph Heagney, Fundamentals Of Project Managements, 4th edition, 2005. Project Management Institute, A Guide To The Project Management Body Of Knowledge (PMBOK Guide), 5th edition, 2013. Russ Unger and Carolyn Chandler, A Project Guide to UX Design: For User Experience Designers in the Field or in the Making, 2009."},{"id":44,"href":"/AlgebraicStructures/Exercises/","title":"Exercises","parent":"Algebraic Structures","content":" ","description":" "},{"id":45,"href":"/OOP/Exercises/","title":"Exercises","parent":"Object Oriented Programming","content":" ","description":" "},{"id":46,"href":"/ProbStats/Exercises/","title":"Exercises","parent":"Probability and Statistics","content":" 01. Ex. Basic Prob. 1 02. Ex. Basic Prob. 2 03. Ex. Discrete Uni. Law 04. Ex. Discrete Rand. Var. 05. Ex. Continuous Uni. Law 09. Limit theorem 10. Review Final Exam 2021 Final Exam 2022 Midterm Exam 2022 Note: the solutions are not guaranteed to be correct. Please check them carefully. ","description":" 01. Ex. Basic Prob. 1 02. Ex. Basic Prob. 2 03. Ex. Discrete Uni. Law 04. Ex. Discrete Rand. Var. 05. Ex. Continuous Uni. Law 09. Limit theorem 10. Review Final Exam 2021 Final Exam 2022 Midterm Exam 2022 Note: the solutions are not guaranteed to be correct. Please check them carefully. "},{"id":47,"href":"/SignalSystem/Exercises/","title":"Exercises","parent":"Signals and Systems","content":" Table of Contents 1. Signal 2. System 3. LTI [] 4. LTI () 5. Fourier Series () 6. Fourier Series [] Gen 11 A. Midterm (2021) Gen 11 B. Final (2022) Gen 11 C. Retake (2022) Gen 12 A. Midterm (2022) Gen 12 B. Final (2022) Note The answers might not be correct. ","description":" Table of Contents 1. Signal 2. System 3. LTI [] 4. LTI () 5. Fourier Series () 6. Fourier Series [] Gen 11 A. Midterm (2021) Gen 11 B. Final (2022) Gen 11 C. Retake (2022) Gen 12 A. Midterm (2022) Gen 12 B. Final (2022) Note The answers might not be correct. "},{"id":48,"href":"/ProbStats/Exercises/Final2021/","title":"Final Exam 2021","parent":"Exercises","content":" Question 1 a. Consider event $A$ and $B$. Prove that $P(A) = P(A \\cap B) + P(A \\cap B^c)$\nb. The tree diagram shows a complete picture of the various probabilities associated with event $A$ and $B$. Find $P(A|B)$. It is noted that $A\u0026rsquo; = A^c$ and $B\u0026rsquo; = B^c$.\nQuestion 2 Lisa goes to school by bicycle $60%$ of the time and by bus $40%$ of the time. If she uses her bicycle she arrives on time $95%$ of the time but if she catches the bus she comes late $2%$ of the time.\nDraw fully labelled tree diagram and then find the probability that Lisa arrives on time on any particular day. In any day by using bicycle, Lisa passes through three traffic lights on her way to school, and each light is equally likely to be green or red, independent of the others. What is the PMF, the mean, and the variance of the number of red lights that Lisa encounters? Question 3 The masses of honeydews are normally distributed with mean 1.0 kg and standard deviation 2 kg. The masses of rock melons are normally distributed with mean 1.5 kg and standard deviation 3 kg.\nHoneydews are sold at 2$ per kg and rock melons at 3S per kg. Find the probability that 2 honeydews and a rock melon cost more than 10$. Find the probability that the difference in masses of a honeydew and a rock melon is less than 0.5 kg. Question 4 If n people are present in a room, what is the probability that no two of them celebrate their birthday on the same day of the year? How large need n be so that this probability is less than 0.5?\n","description":"Question 1 a. Consider event $A$ and $B$. Prove that $P(A) = P(A \\cap B) + P(A \\cap B^c)$\nb. The tree diagram shows a complete picture of the various probabilities associated with event $A$ and $B$. Find $P(A|B)$. It is noted that $A\u0026rsquo; = A^c$ and $B\u0026rsquo; = B^c$.\nQuestion 2 Lisa goes to school by bicycle $60%$ of the time and by bus $40%$ of the time. If she uses her bicycle she arrives on time $95%$ of the time but if she catches the bus she comes late $2%$ of the time."},{"id":49,"href":"/ProbStats/Exercises/Final2022/","title":"Final Exam 2022","parent":"Exercises","content":" Question 1 Question 2 Question 3 Question 4 Question 1 Given that $P(A) = 0.7, P(B) = 0.5$ and $P(A|B) = 0.8$. Find\n$P(A \\cap B)$ $P(A \\cup B)$ $P(B^c | A)$ Question 2 A box contains 3 red balls and 5 blue balls. One ball is taken at random from the box and not replaced. A yellow ball is then put into the box. A second ball is now taken at random from the box.\nComplete the tree diagram to show all the outcomes and the probability for each branch. Find the probability that the 2 balls taken are the same color. Find the probability that the first ball taken is red, given that the second ball taken is blue. Question 3 An office block has a lift that can carry maximum permitted load of $500$ kg. It is known that the weight of men and women using the lift can be modeled by normal distribution. Then men\u0026rsquo;s weight have mean $80$ kg and standard deviation $12$ kg. The women\u0026rsquo;s weight have mean $56$ kg and standard deviation $6$ kg.\nOn one occasion, 3 men and 4 women enter the lift. Calculate the probability that\na. their total weight doesn\u0026rsquo;t exceed the maximum permitted load.\nb. the total weight of the 3 men exceeds that of the 4 women.\nQuestion 4 Alice goes to the bank to make a withdrawal, and is equally likely to find 0 or 1 customer ahead of her. To service time of the customer ahead, if present, is exponentially distributed with parameter $\\lamda$. What is the CDF of Alice\u0026rsquo;s waiting time?\n","description":"Question 1 Question 2 Question 3 Question 4 Question 1 Given that $P(A) = 0.7, P(B) = 0.5$ and $P(A|B) = 0.8$. Find\n$P(A \\cap B)$ $P(A \\cup B)$ $P(B^c | A)$ Question 2 A box contains 3 red balls and 5 blue balls. One ball is taken at random from the box and not replaced. A yellow ball is then put into the box. A second ball is now taken at random from the box."},{"id":50,"href":"/FundamentalsDatabases/","title":"Fundamentals of Databases","parent":"Welcome","content":" About Lecturer: Nguyen Hoang Ha Diploma: PhD in Computer Science at - Aix-Marseille University, France (2016) References Jeffrey D. Ullman, Jennifer Widom, A First Course in Database Systems Chapter 1; Prentice Hall International Fundamentals of Database Systems Chapter 1, 2; Third Edition, Addison-Wesley Table of Contents 1. Overview ","description":" About Lecturer: Nguyen Hoang Ha Diploma: PhD in Computer Science at - Aix-Marseille University, France (2016) References Jeffrey D. Ullman, Jennifer Widom, A First Course in Database Systems Chapter 1; Prentice Hall International Fundamentals of Database Systems Chapter 1, 2; Third Edition, Addison-Wesley Table of Contents 1. Overview "},{"id":51,"href":"/SignalSystem/Exercises/Midterm-2021/","title":"Gen 11 A. Midterm (2021)","parent":"Exercises","content":" 1 Strictly follow this question to find out which exercises you have to do\na. Dividend = your student ID (for example, BI11-179 means Dividend = 179). Plus 2 with the remainder after dividing by 3, this is your 1st question (179/3=59, R2), your first question is 2+2=4.\nb. Dividend = the above quotient (i.e 59). Plus 5 with the remainder after dividing by 3, this is your second question (59 / 3 = 19 (remainder 2), your second equation is number 2 + 5 = 7)\nc. Dividend = the above quotient (i.e 19). Plus 8 with the remainder after dividing by 3, this is your third question (19 / 3 = 6 (remainder 1), your third equation is number 1 + 8 = 9)\nThese signals are for question 2, 3, 4:\n2 Represent each of the following signals by a graph $$y_1(t) = x(t-2), y_2(t) = x(2t) + x(t/2)$$\n3 Represent each of the following signals by a graph $$z_1[n] = x[-n+2], z_3[n] = x[2n-1]$$\nWe have:\n$x[0] = 0$ $x[1] = 1$ $x[2] = 2$ $x[3] = 3$ $x[4] = 3$ $y[n] = x[-n+2]$\n$\\begin{aligned} z_1[-2] \u0026amp;= x[-(-2)+2] \u0026amp;= x[4] = 3 \\\\ z_1[-1] \u0026amp;= x[-(-1)+2] \u0026amp;= x[3] = 3 \\\\ z_1[0] \u0026amp;= x[-0+2] \u0026amp;= x[2] = 2 \\\\ z_1[1] \u0026amp;= x[-1+2] \u0026amp;= x[1] = 1 \\\\ z_1[2] \u0026amp;= x[-2+2] \u0026amp;= x[0] = 0 \\end{aligned}$\n$z[n] = x[2n-1]$\n$z_3[0] = x[2*0-1] = x[-1] = 0$ $z_3[1] = x[2*1-1] = x[1] = 1$ $z_3[2] = x[2*2-1] = x[3] = 3$ $z_3[3] = x[2*3-1] = x[5] = 0$ $z_3[4] = x[2*4-1] = x[7] = 0$ 4 Represent each of the following signals by a graph\n$$y_3(t) = x(3t-1) \\text{ and } z_2[n] = x[2n] + x[n/2]$$\nWe have: $x(t)$ is a line running from $x(0) = 0$ to $x(4) = 3$ $y_3(t) = x(3t-1)$ Shrink the signal 3 times: $x(0) = 0/3 = 0$, $x(4) = 4/3 = 1.33$ Shift the signal 1 unit to the right: $x(0) = 0 + 1 = 1$, $x(4) = 1.33 + 1 = 2.33$ $z_2[n] = x[2n] + x[n/2]$ $z_2[0] = x[2*0] + x[0/2] = x[0] + x[0] = 0$ $z_2[1] = x[2*1] + x[1/2] = x[2] = 2$ $z_2[2] = x[2*2] + x[2/2] = x[4] + x[1] = 4$ $z_2[3] = x[2*3] + x[3/2] = x[6] = 0$ $z_2[4] = x[2*4] + x[4/2] = x[8] + x[2] = 2$ $z_2[5] = x[2*5] + x[5/2] = x[10] = 0$ $z_2[6] = x[2*6] + x[6/2] = x[12] + x[3] = 3$ $z_2[7] = x[2*7] + x[7/2] = x[14] = 0$ $z_2[8] = x[2*8] + x[8/2] = x[16] + x[4] = 3$ 5 Evaluate $y(t) = x(t) * h(t)$, where $x(t)$ and $h(t)$ are shown below.\nSolution ↕ First, we flip the signal $h(t)$. From the convolution sum formula, we have 3 cases: $0 \u003c \\tau \u003c 2$: $y(\\tau) = \\tau$ $2 \u003c \\tau \u003c 3$: $y(\\tau) = 2$ $3 \u003c \\tau \u003c 5$: $y(\\tau) = 5 - \\tau$ 6 Evaluate $y[n] = x[n] * h[n]$, where $x[n]$ and $h[n]$ are shown below.\nSolution ↕ $y[n] = [1_\\uparrow, 2, 3, 3, 2, 1]$ 7 Given a system formed by connecting 2 systems. The impulse of the systems are given by $h_1(t) = e^{-2t}u(t)$ and $h_2(t) = e^{-t}u(t)$, find the impulse response of the response $h(t)$ of the overall system.\n8 A square wave $x_1(t)$ is a periodic signal defined in one period as\n$$x_1(t) = \\begin{cases} 1 \u0026amp; -\\frac{T_0}{4} \u0026lt; t \u0026lt; \\frac{T_0}{4} \\\\ 0 \u0026amp; \\frac{T_0}{4} \u0026lt; t \u0026lt; \\frac{3T_0}{4} \\end{cases}$$\nFind its Fourier series coefficients $a_k$.\n9 A square wave $x_2(t)$ is a periodic signal defined in one period as:\n$$x_2(t) = \\begin{cases} 1 \u0026amp; 0 \u0026lt; t \u0026lt; \\frac{T_0}{3} \\\\ -1 \u0026amp; \\frac{T_0}{3} \u0026lt; t \u0026lt; T_0 \\end{cases}$$\nFind its Fourier series coefficients $a_k$.\n$\\begin{aligned} a_k \u0026amp;= \\frac{1}{T_0} (\\int_{0}^{T_0/3} e^{-jk\\omega_0t} dt - \\int_{0}{T_0/3} e^{-jk\\omega_0t} dt) \\\\ \u0026amp;= \\frac{1}{T_0} (\\int_{0}^{T_0/3} e^{-jk\\omega_0t} dt - \\int_{T_0/3}^{T_0} e^{-jk\\omega_0t} dt) \\\\ \u0026amp;= \\frac{1}{T_0} (\\int_{0}^{T_0/3} e^{-jk\\omega_0t} dt + \\int_{T_0/3}^{T_0} e^{jk\\omega_0t} dt) \\end{aligned}$\n10 A square wave $x_3(t)$ is a periodic signal defined in one period as:\n$$x_3(t) = \\begin{cases} 1 \u0026amp; -\\frac{T_0}{3} \u0026lt; t \u0026lt; 0 \\\\ -1 \u0026amp; 0 \u0026lt; t \u0026lt; \\frac{2T_0}{3} \\end{cases}$$\nFind its Fourier series coefficients $a_k$.\nSolution 🧈 $\\begin{aligned} a_k \u0026= \\frac{1}{T} \\int_{-T_0/3}^{2T_0/3} x_3(t) e^{-jk\\omega_0t} dt \\\\ \u0026= \\frac{1}{T} (\\int_{-T_0/3}^{0} 1 e^{-jk\\omega_0t} dt - \\int_{0}^{2T_0/3} e^{-jk\\omega_0t} dt) \\\\ \u0026= \\frac{2 - e^{-jk\\omega_0T_0/3} - e^{-jk\\omega_02T_0/3}}{jk\\omega_0T} \\end{aligned}$\n","description":"1 Strictly follow this question to find out which exercises you have to do\na. Dividend = your student ID (for example, BI11-179 means Dividend = 179). Plus 2 with the remainder after dividing by 3, this is your 1st question (179/3=59, R2), your first question is 2+2=4.\nb. Dividend = the above quotient (i.e 59). Plus 5 with the remainder after dividing by 3, this is your second question (59 / 3 = 19 (remainder 2), your second equation is number 2 + 5 = 7)"},{"id":52,"href":"/SignalSystem/Exercises/Final-2021/","title":"Gen 11 B. Final (2022)","parent":"Exercises","content":" 0. Requisites 1. Signals 2. Systems 3. LTI Systems 4. Convolution integral 5. Fourier Series 6. Fourier Transform 0. Requisites Remove the following 2 questions from the exam and do the rest, if $q_1 = q_2$ then remove any other question you want.\n$q_1 = ((ID+17)\\%6) + 1$ $q_2 = ((ID+17)\\%5) + 2$ 1. Signals Given the signal $x(t)$\nmake a sketch of\n$y_1(t) = x(2-t)$ $y_2(t) = x(2t + 3)$ $y_3(t) = x(t)u(2-t)$ 2. Systems Consider a discrete-time system with the input-output relation\n$$y[n] = T\\text{\\{} x[n] \\text{\\}} = x^2[n]$$\nDetermine whether this system is\nLinear Time-invariant 3. LTI Systems The impulse response $h[n]$ of a discrete-time LTI system is shown below. Determine and sketch the output $y[n]$ of this system to the input $x[n]$\n4. Convolution integral Evaluate $y(t) = x(t) \\ast h(t)$ where $x(t)$ and $h(t)$ are shown below\n5. Fourier Series Determine the Fourier series coefficients of $x(t)$\n6. Fourier Transform Find the Fourier transform of $x(t) = u(-t)$\n","description":"0. Requisites 1. Signals 2. Systems 3. LTI Systems 4. Convolution integral 5. Fourier Series 6. Fourier Transform 0. Requisites Remove the following 2 questions from the exam and do the rest, if $q_1 = q_2$ then remove any other question you want.\n$q_1 = ((ID+17)\\%6) + 1$ $q_2 = ((ID+17)\\%5) + 2$ 1. Signals Given the signal $x(t)$\nmake a sketch of\n$y_1(t) = x(2-t)$ $y_2(t) = x(2t + 3)$ $y_3(t) = x(t)u(2-t)$ 2."},{"id":53,"href":"/SignalSystem/Exercises/Retake-2022/","title":"Gen 11 C. Retake (2022)","parent":"Exercises","content":" 1. Signals Using the discrete-time signals $x_1[n]$ and $x_2[n]$ given below\nrepresent each of the following signals by a graph and by a sequence of numbers.\n$y_1[n] = x_1[n] + x_2[n+1]$ $y_2[n] = 2x_1[n+2] + x_2[1-n]$ $y_3[n] = x_1[2n] \\times x_2[n-2]$ 2. System Consider an LTI system whose response to the signal $x_1(t)$ is the signal $y_1(t)$ given below\nDetermine and sketch carefully the response to the following input\n3. Convolution sum Consider the evaluation $$y[n] = x_1[n] \\ast x_2[n] \\ast x_3[n]$$ where\n$$\\begin{aligned} x_1[n] \u0026amp;= (0.5)^n u[n] \\\\ x_2[n] \u0026amp;= u[n+3] \\\\ x_3[n] \u0026amp;= \\delta[n] - \\delta[n-1] \\end{aligned}$$\nEvaluate $x_1[n] \\ast x_2[n]$. Evaluate $x_2[n] \\ast x_3[n]$. Calculate $y[n]$. ","description":"1. Signals Using the discrete-time signals $x_1[n]$ and $x_2[n]$ given below\nrepresent each of the following signals by a graph and by a sequence of numbers.\n$y_1[n] = x_1[n] + x_2[n+1]$ $y_2[n] = 2x_1[n+2] + x_2[1-n]$ $y_3[n] = x_1[2n] \\times x_2[n-2]$ 2. System Consider an LTI system whose response to the signal $x_1(t)$ is the signal $y_1(t)$ given below\nDetermine and sketch carefully the response to the following input"},{"id":54,"href":"/SignalSystem/Exercises/Midterm-2022/","title":"Gen 12 A. Midterm (2022)","parent":"Exercises","content":" 0 There are 8 question, but you have to do only 3 based on your student ID:\n$q_1 = (3 + (ID \\% 4)) \\% 7 + 1$ $q_2 = (4 + (ID \\% 4)) \\% 7 + 1$ $q_3 = ID \\% 7 + 1$ If duplicate, choose any question. 1. Signals Given a continuous signal $x(t)$, and a discrete signal $x[n]$\nSketch each of the following signals:\n$y_1(t) = x(t)u(1-t)$ $y_2(t) = x(t)[u(t)-u(t-1)]$ $y_3[n] = x[n]u[1-n]$ $y_4[n] = x[n]\\delta[n]$ 2. Continuous system Consider a continuous-time system with input $x(t)$ and output $y(t)$ related by $$y(t) = x(sin(t))$$\nIs this system causal? Is this system linear? 3. Discrete system The system represented by T is known to be time-invariant. Determine whether the system is linear.\n4. Convolution sum Compute the convolution sum $y[n] = x[n] * h[n]$ for the following signals:\n$x[n] = u[n]$ $h[n] = 2^n u[n]$ 5. Convolution integral Evaluate $y(t) = x(t) * h(t)$ where $x(t) = \\begin{cases} 1 \u0026amp; 0 \u0026lt; t \\leq T \\\\ 0 \u0026amp; \\text{otherwise} \\end{cases}$ and $h(t) = \\begin{cases} 1 \u0026amp; 0 \u0026lt; t \\leq 2T \\\\ 0 \u0026amp; \\text{otherwise} \\end{cases}$\n6. Fourier series Determine the Fourier series coefficients of $x(t) = cos(4t) + sin(6t)$\n7. Fourier transform Find the Fourier transform $X(\\omega)$ of the signal: $x(t) = \\frac{sin(\\omega t)}{\\pi t}$, knowing that $X(\\omega)$ has rectangular shape.\n","description":"0 There are 8 question, but you have to do only 3 based on your student ID:\n$q_1 = (3 + (ID \\% 4)) \\% 7 + 1$ $q_2 = (4 + (ID \\% 4)) \\% 7 + 1$ $q_3 = ID \\% 7 + 1$ If duplicate, choose any question. 1. Signals Given a continuous signal $x(t)$, and a discrete signal $x[n]$\nSketch each of the following signals:"},{"id":55,"href":"/OOP/Exercises/Final-2022/","title":"Gen 12 B. Final (2022)","parent":"Exercises","content":" Question 1 Write a program in Java\nEnter from the keyboard a number n (n \u0026gt; 1) Enter from the keyboard n pairs of x and y coordinates, data type float Calculate the angle between the x and y coordinates of each pair $$(\\overrightarrow{a}, \\overrightarrow{b}) = \\arccos \\left( \\frac{\\overrightarrow{a} \\times \\overrightarrow{b}}{| \\overrightarrow{a} | \\times | \\overrightarrow{b}|} \\right)$$ Question 2 Using inheritance to write a Java program to read/write data from/to a text file\nCourse ID + name of the course. Lecturer ID + name of the lecturer. Student ID + name of the student. Midterm + final exam scores for each student of each course. Read from the text file: If average final exam score $\\geq 10$ and average midterm score $\u0026gt; 7$, print Passed else print Retake ","description":"Question 1 Write a program in Java\nEnter from the keyboard a number n (n \u0026gt; 1) Enter from the keyboard n pairs of x and y coordinates, data type float Calculate the angle between the x and y coordinates of each pair $$(\\overrightarrow{a}, \\overrightarrow{b}) = \\arccos \\left( \\frac{\\overrightarrow{a} \\times \\overrightarrow{b}}{| \\overrightarrow{a} | \\times | \\overrightarrow{b}|} \\right)$$ Question 2 Using inheritance to write a Java program to read/write data from/to a text file"},{"id":56,"href":"/SignalSystem/Exercises/Final-2022/","title":"Gen 12 B. Final (2022)","parent":"Exercises","content":" 0. Requisites 1. Signals 2. Continuous-time Systems 3. Discrete-time Systems 4. Convolution sum 5. Convolution integral 6. Continuous-time Fourier Series 7. Discrete-time Fourier Series 8. Fourier Transform 9. Inverse Fourier Transform Question 0: 2 points. Others: 3 points each. 0. Requisites Remove the following 3 questions from the exam and do the rest, remove any other question you want if duplication occurs.\n$q_1 = (ID\\%4) + 1$ $q_2 = (ID\\%3) + 5$ $q_3 = (ID\\%2) + 8$ 1. Signals Given the signal $x(t)$ and $x[n]$\nmake a sketch of\n$y_1(t) = [x(t-1)+x(3-t)]u(2-t)$ $y_2[n] = x[n-1] + x[1-2n]$ 2. Continuous-time Systems Given a continuous-time system with the input-output relation\n$$y(t) = T\\text{\\{} x(t) \\text{\\}} = x^2(t)$$\nDetermine whether this system is\nLinear Time-invariant 3. Discrete-time Systems Given a discrete-time system with the input-output relation\n$$y[n] = T\\text{\\{} x[n] \\text{\\}} = x^2[n]$$\nDetermine whether this system is\nLinear Time-invariant 4. Convolution sum Let $y[n] = x[n] \\ast h[n]$, show that $x[n-n_1] \\ast h[n-n_2] = y[n-n_1-n_2]$\n5. Convolution integral Evaluate $y(t) = x(t) \\ast h(t)$ where $x(t) = u(t-1)$ and $h(t) = e^{-3t}u(t)$\n6. Continuous-time Fourier Series Determine the Fourier series coefficients of the periodic square wave\n$$x(t) = \\begin{cases} 1 \u0026amp; 0 \u0026lt; t \\leq \\frac{T_0}{2} \\\\ 0 \u0026amp; \\frac{T_0}{2} \u0026lt; t \\leq T_0 \\end{cases}$$\n7. Discrete-time Fourier Series Determine the Fourier series coefficients of the signal\n$$x[n] = \\sum_{k=0}^{\\infty} \\delta[n-4k]$$\n8. Fourier Transform Find the Fourier transform $X(\\omega)$ of the signal $x(t) = e^{-a|t|}$ with $a \u0026gt; 0$\n9. Inverse Fourier Transform Calculate the Inv. Fourier transform of the following signals\n$$X(\\omega) = \\frac{1}{j}[\\delta(\\omega -2) - \\delta(\\omega + 2)] + 3[\\delta(\\omega - 2\\pi) + \\delta(\\omega + 2\\pi)]$$\n","description":"0. Requisites 1. Signals 2. Continuous-time Systems 3. Discrete-time Systems 4. Convolution sum 5. Convolution integral 6. Continuous-time Fourier Series 7. Discrete-time Fourier Series 8. Fourier Transform 9. Inverse Fourier Transform Question 0: 2 points. Others: 3 points each. 0. Requisites Remove the following 3 questions from the exam and do the rest, remove any other question you want if duplication occurs.\n$q_1 = (ID\\%4) + 1$ $q_2 = (ID\\%3) + 5$ $q_3 = (ID\\%2) + 8$ 1."},{"id":57,"href":"/ProjectManagement/Part1/I/","title":"I. Introduction into projects","parent":"Part 1. Project management basics","content":" 1. Concept, overview of project - historical projects 2. Origin and etymology of the word \u0026ldquo;project\u0026rdquo; 3. Project synonyms Synonyms Related words 4. Definition of project 5. Characteristics of projects 6. Other common characteristics of projects 7. This is not a project 8. Project stakeholders 9. Reasons for success or failure of projects Reasons for failure Reasons for success 10. How to prepare a project: 1. Concept, overview of project - historical projects Flag Tower of Hanoi The tower was built in 1812 during the Nguyen dynasty as an observation post to the Hanoi Citadel. Long Bien Bridge The bridge was built in 1899—1902 by the architects Daydé \u0026amp; Pillé of Paris, and opened in 1903. Before North Vietnam\u0026rsquo;s independence in 1954, it was called Paul-Doumer Bridge, named after Paul Doumer - The Governor-General of French Indochina and then French president. At 1.68km (1.04mi) in length, it was, at that time, one of the longest bridges in Asia. Chuong Duong Bridge The bridge was built in 1983 - 1985, is a major river road bridge in Hanoi. At 1.23km in length.\nTruong Tien Bridge The bridge was built in 1899 - 1990, is a bridge in Hue, Vietnam. Spanning over the Perfume River.\n2. Origin and etymology of the word \u0026ldquo;project\u0026rdquo; The word project comes from the Latin word projectum from the Latin verb proicere, \u0026ldquo;before an action\u0026rdquo; which in turn comes from pro-, which denotes precedence, something that comes before something else in time (paralleling the Greek πρό) and iacere, \u0026ldquo;to do\u0026rdquo;. The word \u0026ldquo;project\u0026rdquo; thus originally meant \u0026ldquo;before an action\u0026rdquo;. When the English language initially adopted the word, it referred to a plan of something, not to the act of actually carrying this plan out. Something performed in accordance with a project became known as an \u0026ldquo;object\u0026rdquo;. Every project has certain phases of development. 3. Project synonyms Synonyms Arrangement, blueprint, design, game, game plan, ground plan, master plan, program, plan, road map, scheme, strategy, system. Related words Collusion, conspiracy, plot; contrivance, device, gambit, maneuver, ruse, stratagem, subterfuge,trick; counter-plan, counter-strategy; means, tactic, technique, way; procedure, protocol; conception, idea , proposal, specific (s), specification(s); aim, intent, intention, purpose; diagram, formula, layout, map, pattern, platform, policy, recipe, setup. 4. Definition of project \u0026ldquo;A project is a temporary endeavor undertaken to create a unique product, service, or result.\u0026rdquo; Project Management Institute (PMI) - A Guide To The Project Management Body Of Knowledge (PMBOK Guide) Fourth Edition 3. \u0026ldquo;A project is a temporary organization that is created for the purpose of delivering one or more business products according to an agreed Business Case.\u0026rdquo; Office of Government Commerce (OGC) - Managing Successful Projects with PRINCE Fifth Edition 4. \u0026ldquo;A project is a time and cost constrained operation to realize a set of defined deliverables (the scope to fulfil the projects objectives) up to quality standards and requirements.\u0026rdquo; International Project Management Association (IPMA) IPMA Competence Baseline (ICB) Version 3.05. \u0026ldquo;Project is a unique, transient endeavour undertaken to achieve a desired outcome.\u0026rdquo; Association for Project Management (APM) APM Body of Knowledge Fifth Edition 6. \u0026ldquo;A project refers to a value creation undertaking based on a specific, which is completed in a given or agreed time frame and under constraints, including resources and external circumstances.\u0026rdquo; Project Management Association of Japan (PMAJ) - A Guidebook of Project \u0026amp; Program Management for Enterprise Innovations (P2M) 2005 Edition 7. \u0026ldquo;Project is a unique process consisting of aset of coordinated and controlled activities with start and finish dates, undertaken to achieve an objective conforming to specific requirements including constraintsof time, cost and resources.\u0026rdquo; ISO 10006:2003 - Quality Management Systems - Guidelines for Quality Management in Projects 8. \u0026ldquo;Project is a unique set of coordinated Activities, with defined starting and finishing points, undertaken by an individual or organization to meet specific objectives with defined schedule, cost and performance parameters.\u0026rdquo; British Standards Institute: BS 6079-1: Guide to Project Management 9. \u0026ldquo;A project is a temporary endeavour undertaken to create a unique product, service or result in order to achieve an outcome.\u0026rdquo; Australian Institute of Project Management (AIPM): AIPM Professional Competency Standards for Project Management 2008 Edition 10. \u0026ldquo;A project is a managed set of interrelated resources that delivers one or more products to a customer or end user. The set of resources has a definite beginning and end and operates according to a plan.\u0026rdquo; Software Engineering Institute (SEI): Capability Maturity Model Integration (CMMI) 12. \u0026ldquo;A project is a managed set of interrelated resources that delivers one or more products to a customer or end user. The set of resources has a definite beginning and end and operates according to a plan.\u0026rdquo; Software Engineering Institute (SEI): Capability Maturity Model Integration (CMMI) 13. \u0026ldquo;A project can be considered to be any series of activities and tasks that: Have a specific objective to be completed within certain specifications Have defined start and end dates Have funding limits (if applicable) Consume human and nonhuman resources (ie, money, people, equipment) Are multifunctional (ie, cut across several functional lines)\u0026rdquo; Harold Kerzner: Project Management: A Systems Approach to Planning, Scheduling and Control Tenth Edition 14. \u0026ldquo;A project is a temporary organization to which resources are assigned to do work todeliver beneficial changes.\u0026rdquo; J. Rodney Turner: A Handbook of Project-Based Management – Leading Strategic Change in Organizations Third Edition 15. \u0026ldquo;Projects are the building blocks in the designand execution of strategies for an organization. Projects provide an organizational focus for conceptualizing, designing, and creating new or improved products, services, and organizational processes.\u0026rdquo; David I. Cleland: Field Guide to Project Management Second Edition 16. \u0026ldquo;A project is a problem scheduled for solution.\u0026rdquo;, \u0026ldquo;All improvement takes place Project-by-Project and in no other way.\u0026rdquo;, \u0026ldquo;All Projects follow the \u0026ldquo;Universal Sequence for Breakthrough.\u0026rdquo; Joseph M. Juran (1904 – 2008) 17. From these definitions, the following definition is more appropriate for us:\nA project is a temporary endeavour undertaken to create a unique product, service or result in order to achieve an outcome. Australian Institute of Project Management (AIPM): AIPM Professional Competency Standards for Project Management 2008 Edition 10. 5. Characteristics of projects Specific deliverable. A specific time-frame. A budget. Working across organizational boundaries. Unique specifications. 6. Other common characteristics of projects Multi-disciplinary. Complex. Conflict. Part of a larger program. 7. This is not a project Work/activity are repetitive. Too small-scaled. Some companies specify a minimum budget with which an activity cannot be seen as \u0026ldquo;a project\u0026rdquo;, e.g., US$50,000 or US$250,000; but some others do not have such constraints. 8. Project stakeholders Project stakeholders are individuals and organizations who are actively involved in the project, or whose interests may be positively or negatively affected as a result of project execution or successful project completion. 9. Reasons for success or failure of projects Reasons for failure Failure to align projects with organizational strategy. Poor scope definition. Unrealistic expectations. Lack of executive sponsorship. Lack of project management skills. Inability to resolve conflicts. Political issues. Reasons for success Project sponsorship at executive level. Good project charter. Strong project management skills. The right people on the project team. Good decision making. Good communication. Team members towards the same goal. 10. How to prepare a project: Step 1: the project scope: Project mission and goal. Goal and terms of reference. Step 2: project planning: Project milestones. Project organization. Step 3: project execution: Taking decisions. Doing activities. Step 4: project control: Quantitative control. Qualitative control. Step 5: project communication: Internally. Externally. ","description":"1. Concept, overview of project - historical projects 2. Origin and etymology of the word \u0026ldquo;project\u0026rdquo; 3. Project synonyms Synonyms Related words 4. Definition of project 5. Characteristics of projects 6. Other common characteristics of projects 7. This is not a project 8. Project stakeholders 9. Reasons for success or failure of projects Reasons for failure Reasons for success 10. How to prepare a project: 1. Concept, overview of project - historical projects Flag Tower of Hanoi The tower was built in 1812 during the Nguyen dynasty as an observation post to the Hanoi Citadel."},{"id":58,"href":"/ProjectManagement/Part1/II/","title":"II. Classification of projects","parent":"Part 1. Project management basics","content":" 1. Based on the fundamentals: term Long term (Years) Short term (Months) 2. Based on the fundamentals: type Strategic project Tactical project 3. According to the source of fund 4. According to foreign aided project 5. According to technique 6. According to function Disaster prevention projects Development projects Abstract 2 main project components. 7. Service sector project 8. According to scale and size 9. According to time frame and speed 10. According to nature 11. According to orientation 1. Based on the fundamentals: term Long term (Years) Broad Goals (A company’s large scale objectives. I.E; Improve ROI, Increase Shareholder value, Gain market share etc…) Setting global business or strategic goals such as your release criteria, workflow setup and lifecycle? Selecting and assigning which resources are allocated to which projects (What team resources can I allocate? What can I afford to dedicate to this project?) Short term (Months) Specific Objectives (Hitting Milestones and Release Dates-Micromanaging the day to day - goals and activities, focusing on execution. People: Assigning individuals or teams with domain expertise to specific actions. 2. Based on the fundamentals: type Strategic project A strategic project has a primary goal of gaining the competitive advantage by focusing on the organization\u0026rsquo;s overall direction. Tactical project These are projects that have one operational goal, which probably does not entail contributions by most employees within the organization. In these projects, meeting a tactical goal on time and within budget are key considerations. Concepts and meaning should be differentiated:\nGoal: is an achievable that is generally board and longer term. Aim: what you hope to get and you want to do this. Purpose: the reason on one aim to achieve a goal. Object: shorter term and defines. Target: the exact results of what you want to get. 3. According to the source of fund Private sector project: the private sector bodies are responsible for the development and sponsor of the project. Examples: RP complex, Kathmandu mail, apartment complex, etc. Government sector project: in developing country government is the major sponsor of projects. These are the basis of government developing plans. Examples: road construction, school, health,\u0026hellip; Grant project: investment in grant projects is not repaid by the government to the donor agencies. Loan project: investment in loan projects is repaid by the government to the donor agencies. 4. According to foreign aided project Joint venture project: the project is funded through the collaboration of foreign and local investors. They are based on ownership sharing. Also, they involve transferring of capital, technology, management. Example: Maruti-Suzuki. Bilateral project: the project is funded from the financial resources of the friendly donor country. Examples: JICA, KOICA. Multilateral project: This project is funded from the financial resources of multilateral agencies such as World Bank and Asian development bank. They are generally funded through loans. All UN agencies are multilateral. 5. According to technique Labor intensive project: this project is labor bases. Human labors are extensively used for implementation of the project. Advantages: More employment generation. Utilization of resources. More production at the cheaper rate. Disadvantages: It cannot be applied for the long run. No possibility of improving skills. Low capital formation. Capital intensive project: This project is technology based. Technology represented by machinery and computerization is extensively used for implementation of the project. Advantages Applied for the long run. Technology transfer. Ease in capital formation. Disadvantages Required huge amount of capital. Imbalance distribution of income in society. Centralization. 6. According to function Disaster prevention projects It is not feasible to formulate universally acceptable definition of disaster prevention project that will satisfy all practitioners, but common and agreed upon definitions must be formulated in the various fields and areas concerned with disasters and where there exit reconcilable, common sets of objective.\nExample: Disaster prevention project for sustainable project. Development projects Community Development project\nAbstract The development objective of the Community Development Project is to establish an effective and sustainable instrument to improve the living conditions and the economic status of disadvantaged communities.\n2 main project components. The first component focuses on social and infrastructure development and provides sub-project grants for: Carrying out social assessments and designing programs of sub-projects Implementing sub-projects consisting of: improving access to basic education, health, and social services by rehabilitating and upgrading schools and health, youth, cultural, and recreation centers and facilities in poor areas carrying out programs for revolving school textbooks, literacy, and primary health care improving access to specialized social services to satisfy the needs of vulnerable groups at risk developing basic rural infrastructure activities such as community potable water and small drainage and irrigation schemes enhancing environmental protection initiatives such as reforestation and natural resource and cultural heritage preservation. The second component focuses on income enhancement by funding capacity building activities to support: micro and small entrepreneurs and nongovernmental organizations providing credit to target beneficiary groups women, youth, and disabled people to provide them with demand-driven specialized skills that will help them increase income and business opportunities Example\nOfficial development assistance (ODA): a term coined by the Development Assistance Committee (DAC) of the Organization for Economic Co-operation and Development (OECD) to measure aid. The DAC first used the term in 1969. It is widely used as an indicator of international aid flow. It includes some loans. Definition: flows of official financing administered with the promotion of the economic development and welfare of developing countries as the main objective, and which are concessional in character with a grant element of at least 25 percent (using a fixed 10 percent rate of discount). By convention, ODA flows comprise contributions of donor government agencies, at all levels, to developing countries (“bilateral ODA”) and to multilateral institutions. ODA receipts comprise disbursements by bilateral donors and multilateral institutions. In other words, ODA needs to contain the three elements:\nUndertaken by the official sector (official agencies, including state and local governments, or their executive agencies) with promotion of economic development and welfare as the main objective; and at concessional financial terms (if a loan, having a grant element of at least 25 per cent). This definition is used to exclude development aid from the two other categories of aid from DAC members:\nOfficial Aid (OA): flows which meet conditions of eligibility for inclusion in Official Development Assistance (ODA), other than the fact that the recipients are on Part II of the Development Assistance Committee (DAC) List of Aid Recipients. Other Official Flows (OOF): Transactions by the official sector with countries on the List of Aid Recipients which do not meet the conditions for eligibility as Official Development Assistance or Official Aid, either because they are not primarily aimed at development, or because they have a grant element of less than 25 per cent. NGOs project definition\nA non-governmental organization (NGO) is a non-profit, citizen-based group that functions independently of government. NGOs, sometimes called civil societies, are organized on community, national and international levels to serve specific social or political purposes, and are cooperative, rather than commercial, in nature. Examples of NGOs include those that support human rights, advocate for improved health or encourage political participation. Two broad groups of NGOs are identified by the World Bank: operational NGOs, which focus on development projects; and advocacy NGOs, which are organized to promote particular causes. Certain NGOs may fall under both categories simultaneously. While the term \u0026ldquo;NGO\u0026rdquo; has various interpretations, it is generally accepted to include private organizations that operate without government control and that are non-profit and non-criminal. Other definitions further clarify NGOs as associations that are non-religious and non-military. Some NGOs rely primarily on volunteers, while others support a paid staff. As non-profits, NGOs rely on a variety of sources for funding, including membership dues, private donations, the sale of goods and services, and grants. Despite their independence from government, some NGOs rely significantly on government funding. Large NGOs may have budgets in the millions or billions of dollars. Examples\nIf a donor country accords a grant or a concessional loan to Afghanistan it is classified as ODA, because it is on the Part I list. If a donor country accords a grant or a concessional loan to Bahrain it is classified as OA, because it is on the Part II list. If a donor country gives military assistance to any other country or territory it is classified as OOF, because it is not aimed at development. A recent OECD DAC Communique has seen the donor community update the definition of ODA to better reflect the Sustainable Development Goals. ODA, DAC; OECD; OA: OOF\nCommuniqe: an official statement or Report, especially to newspapers Countries by development aid given:\nODA volumes may be measured absolutely, by the amount transferred, or relatively, as a proportion of the donor country\u0026rsquo;s economy. According to the Organization for Economic Co-operation and Development (OECD), the top 15 countries (DAC and non-DAC members) giving the highest amounts (in absolute terms) in 2015 are as follows (in billions of US dollars):\nEuropean Union: 87.64 United States: 31.08 United Kingdom: 18.7 Germany: 17.78 Japan: 9.32 France: 9.23 Sweden: 7.09 Netherlands: 5.81 United Arab Emirates: 4.39 (non DAC member) Canada: 4.29 Norway: 4.28 Turkey: 3.91 (non DAC member) Italy: 3.84 Switzerland: 3.54 Australia: 3.22 Denmark: 2.57 Donor countries by percentage of gross national income (GNI)\nThe OECD also lists countries by the amount of ODA they give as a percentage of their gross national income. Seven countries met the longstanding UN target for an ODA/GNI ratio of 0.7% in 2015. The top 15 DAC and non-DAC countries for 2015 are shown below:\nSweden — 1.40% United Arab Emirates — 1.09% (non-DAC member) Norway - 1.05% Luxembourg — 0.93% Denmark — 0.85% Netherlands — O. 76% United Kingdom — 0.71% Finland — 0.56% Turkey — 0.54% (non-DAC member) Switzerland — 0.52% Germany — 0.52% I Belgium - 0.42% I France - 0.37% Ireland - 0.36% Austria — 0.32% Aid recipients\nWorld Bank reports that Iraq was the top recipient of development aid in 2005 followed by Nigeria. However, this is due to the significant debt relief deals that were granted to these nations that year - when donor countries write off a portion of a recipient country\u0026rsquo;s debt, it is counted as official development assistance from the donor country. The OECD reports that in 2009 Africa received the largest amount of ODA, at $\\text{\\textdollar}$28 billion. Of that, $\\text{\\textdollar}$25 billion went to countries south of the Sahara, with Sudan receiving approximately $\\text{\\textdollar}$1.9 billion and Ethiopia getting $\\text{\\textdollar}$1.8 billion. Asia received the second largest amount at $\\text{\\textdollar}$24 billion. The top ODA receiving countries in order were Afghanistan ($\\text{\\textdollar}$5.1 billion), Iraq ($\\text{\\textdollar}$2.6 billion) and Vietnam ($\\text{\\textdollar}$2.1 billion) Criticism\nOfficial development assistance has been criticized by several economists for being an inappropriate way of helping poor countries. The Hungarian economist Peter Thomas Bauer has been one of the most vocal of them. Another notable economist arguing against ODA includes Dambisa Moyo in her book Dead Aid. According to her, a country used to receiving ODA may be perpetually bound to depend on handouts. Donor countries are most commonly compared by the amount of Official Development Assistance given and their quantity of aid as a percent of GDP. However, there is an increasing focus placed on the quality of aid, rather than simply the quantity. The Commitment to Development Index is one such measure that ranks the largest donors on a broad range of their \u0026ldquo;development friendly\u0026rdquo; policies. It takes into account the quality of aid, in addition to the quantity, penalizing countries for tied aid. Aid also does not operate in a vacuum; a country\u0026rsquo;s policies on issues such as trade or migration also have a significant impact on developing countries. Tied Aid: viện trợ ràng buộc (viện trợ có điều kiện) 7. Service sector project Agricultural Services Sector Project\nThe Agricultural Services Sector Project addresses two main goals of the Government\u0026rsquo;s new agricultural sector policy: improvement of cost-effectiveness of public expenditures in the agricultural sector and improvement of nutritional standards and incomes in rural areas. The project is a hybrid operation composed of a policy component and an investment component. The policy component focuses on: reforming the agricultural input policy. reorganization of Buyenzi and Kirimiro Regional Development Companies (RDC). reforming the salary structure of the Ministry of Agriculture and Livestock (MOAL) staff. The investment component comprises: strengthening of MOAL\u0026rsquo;s central services. strengthening agricultural research. strengthening through reorganization of regional agricultural services. management of RDC reorganization. promotion of community development and rural youth employment. strengthening of the cooperative movement. Scientific research project\nApplication of Scientific method to the investigation of relationships among natural phenomenon to solve a technical problem. Environment-friendly projects\nGreen - chemistry 8. According to scale and size Mega project: A project involving huge investment and of relatively long duration (5 to 10 years) is called mega project. These projects require EIA. Example- Upper Karnali hydropower project. Major project: It is smaller in size and also less complex than the mega project. Example- Middle Marshyangdi hydropower project. Medium project: It is small in size than the major project. Examples- Khimti hydropower project. This project requires IEE (Initial Environmental Examination). Small project: It is the smallest project in size and also of short duration. Example: Manang hydropower. Micro project: It is smaller than the small project and managed by community-based organizations. Example: Ghandruk micro hydropower project. 9. According to time frame and speed Normal project: normal time allowed for project implementation. Crash project: saving in time is achieved by spending extra resources in terms of money, materials and manpower. 10. According to nature Simple project: Simple projects involve only one or a few people over a short time. Typically, simple projects will have few tasks dependent on other tasks, and will be relatively straightforward and easy to coordinate. Examples might be coordinating delivery of resources for a workshop session, implementing a small marketing plan, or delivering a simple software enhancement. Complex project: Nearly all large and many small projects exhibit characteristics of complexity. Nevertheless projects of all sizes continue to be managed using linear thinking strategies based on project management traditions that go back to the building of the great pyramids in Egypt during the third millennium BCE, when societies and work-groups were arranged hierarchically. Much of the thinking dominating project management as it is currently practiced and taught is still founded upon control theories which were developed in the early modern period to deal with nineteenth- and twentieth-century industrialization and imperial expansion. There is nothing intrinsically wrong with this. However, issues do arise when these ideas are applied unilaterally to all kinds of projects in all contexts. Innovative: Innovation is often also viewed as the application of better solutions that meet new requirements, unarticulated needs, or existing market needs. This is accomplished through more-effective products, processes, services, technologies, or business models that are readily available to markets, governments and society. The term \u0026ldquo;innovation\u0026rdquo; can be defined as something original and more effective and, as a consequence, new, that \u0026ldquo;breaks into\u0026rdquo; the market or society. It is related to, but not the same as, invention. Innovation is often manifested via the engineering process. The opposite of innovation is ex-novation. While a novel device is often described as an innovation, in economics, management science, and other fields of practice and analysis, innovation is generally considered to be the result of a process that brings together various novel ideas in a way that they affect society. In industrial economics, innovations are created and found empirically from services to meet the growing consumer demand. Emergency: Emergency project is the work the organization and management of resources and responsibilities for dealing with all humanitarian aspects of emergencies – preparedness, response, and recovery – in order to reduce the harmful effects of all hazards, including disasters. 11. According to orientation Product oriented project: the focus is on the technical part of the project. Examples-building, road, hydropower. Process oriented:no consideration is given to technical part. Examples- person focused training, repair of cement plant etc. ","description":"1. Based on the fundamentals: term Long term (Years) Short term (Months) 2. Based on the fundamentals: type Strategic project Tactical project 3. According to the source of fund 4. According to foreign aided project 5. According to technique 6. According to function Disaster prevention projects Development projects Abstract 2 main project components. 7. Service sector project 8. According to scale and size 9. According to time frame and speed 10."},{"id":59,"href":"/ProjectManagement/Part1/III/","title":"III. Representative project examples","parent":"Part 1. Project management basics","content":" 1. University for Science and Technology of Ha Noi (USTH) Bologna Process 2. Loan project ADB 3. Disaster Prevention Project in Vietnam 1. University for Science and Technology of Ha Noi (USTH) The Bilateral project for Education and Training based on Inter-governmental Agreement between Vietnam and France: \u0026ldquo;Establishment and Development of University for Science and Technology of Ha Noi\u0026rdquo; Bologna Process The Bologna Process is an intergovernmental higher education reform process that includes 49 European countries and a number of European organizations, including EUA. Its main purpose is to enhance the quality and recognition of European higher education systems and to improve the conditions for exchange and collaboration within Europe, as well as internationally. Launched in 1998-1999, the Bologna Process established goals for reform in the participating countries, such as the three-cycle degree structure (bachelor, master’s, doctorate), and adopted shared c-bluetruments, such as the European Credits Transfer and Accumulation System (ECTS) and the Standards and Guidelines for Quality Assurance in the European Higher Education Area (ESG). When the European Higher Education 2. Loan project ADB Basic data\nProject Title: University of Science and Technology of Hanoi Development (New Model University) Project Borrower: the Government of Vietnam Executing Agency: Ministry of Education and Training Implementing agency: PMU-USTH and UIU Total Estimated Project Cost: US$213.0 M Financing Plan: OCR: US$\\text{\\textdollar}$ 170.0M ADFHT: US$\\text{\\textdollar}$ 20.0M Government Fund: US$\\text{\\textdollar}$ 23.0M Loan Number: 2750/2751-VIE Loan Approval Date: 25 April 2011 Loan Agreement Signing Date: 10 November 2011 Loan Effectiveness: 1st March 2012 Original Loan Closing Date: 30 June 2018 Revised Loan Closing Date: None Elapsed Loan Period: 54 months Date of last ADB Review Mission: 19 – 27 Oct 2015 The ADB agreed to provide a loan of $\\text{\\textdollar}$170 million from ADB’s ordinary capital resources (OCR) and a loan of $\\text{\\textdollar}$20 million from the hard terms facility of the Asian Development Fund (ADFHT) to finance the project. The OCR loan will have a 26-year term, including a grace period of 6 years, an annual interest rate determined in accordance with ADB’s London interbank offered rate (LIBOR)-based lending facility,a commitment charge of 0.15% per annum on any undisbursed amount of the loan, and such other terms and conditions as set forth in the draft loan agreement. The ADFHT loan will have a 32-year term, including a grace period of 8 years, an interest rate of 2.02% per annum throughout the life of the loan, and such other terms and conditions as set forth in the draft loan agreement. The Government committed to allocate $\\text{\\textdollar}$20 million as counterpart fund to cover Project operation and taxes and duties, plus $\\text{\\textdollar}$3 million for resettlement and land acquisition costs.\nOutput A: Effective Management and Governance System for the USTH.\nOutput A will assist in the development and implementation of the rigorous management and governance systems, capacity building programs for USTH senior managers and governors, university management and administrative systems and student services. Output B: Systems to Promote High Quality and Relevance in Academic Programs at USTH Developed and Implemented.\nOutput B will establish and support the operation of a number of centers within the USTH that will promote high quality and relevance in academic programs at the USTH:\nCenter for teaching and learning excellence. This will prepare graduate students to be university teachers and improve the teaching and curriculum development competencies of existing teachers. Center for quality assurance. This will embed a permanent internal quality assurance management service for USTH management and academic staff by, among other things, establishing a quality assurance framework and c-bluetitutionalizing the use of peer review and other strategies. Center for research support. The center will provide USTH staff with high-level support in designing and publishing their research, applying for grants, and providing training in research strategies to postgraduate students. Center for industry engagement. The center will be responsible for building links with industry and other potential users of USTH’s knowledge, expertise, and technologies. It will support researchers to establish industry links, develop joint research programs and contract research, and facilitate student placements, staff exchanges, and joint funding of infrastructure and services. Center for laboratory management. The center will develop a centralized workshop system for the maintenance and repair of USTH’s scientific laboratories and build the capacity of technical staff to sustain an international standard science and technology university. Output C: Physical Facilities at University of Science and Technology of Hanoi Constructed and Outfitted.\nOutput 3 will support the design, construction, and outfitting of the USTH physical facilities at the HHTP to support the university’s initial design capacity of 5,000 students. This will include site preparation, and design and construction of teaching spaces, research laboratories, dormitories, student leisure facilities, administration buildings, infrastructure, and provision of furniture, fittings, and equipment. Construction will use a design–bid–build approach. Output D: Effective Project Management and Implementation.\nOutput 4 will support the establishment of systems and staff capacity required for effective project management and implementation. Procurement for the construction of the campus under output 3 will be managed by the central project management unit (PMU-USTH), while the university implementation unit (UIU) will manage the implementation of USTH’s development (Outputs 1 and 2). The PMU-USTH will manage the development and implementation of a project monitoring and evaluation system, including preparation of required plans, data systems, and baseline studies. 3. Disaster Prevention Project in Vietnam Disaster prevention through mangrove afforestation Contributing to protection of the Earth’s environment\nMangroves, which grow in marshy places, are called a ‘green wall’, protecting people from natural disasters such as typhoons and tsunami. The Japanese Red Cross Society (JRCS), has worked with the Vietnam Red Cross Society (VRCS), since 1997 to promote the afforestation of mangroves and other plants and on various environmental protection activities, covering about 10,408 hectares, which is equal to about 2226 Tokyo Domes. These forests are estimated to absorb about 16.3 million tons of greenhouse gas and thus contribute to the prevention of global warming.\n‘We have come to live safely.’‘Mangrove’ is the general term for various types of plants growing in brackish (a mixture of fresh and salt) water. Mangrove forests were once numerous in Vietnam due to its rich environment. But war, deforestation, and shrimp farming have reduced the number by half. As a result, damage due to typhoons and tidal conditions has grown year by year, gravely affecting the lives of local people and their crops. A disaster prevention project promoting mangrove afforestation was launched by the JRCS and VRCS to address this problem. Afforestation is carried out by hand of local people, and a wide range of activities aimed at forest protection and fire prevention enlightenment by local volunteers have been undertaken.\nHoan Ruon, vice chairman of the Red Cross branch in Hai Phong City, which is one of the project targets, looked back at the fruits of these activities over the past 20 years and said, ‘Although it has been very hard to attract volunteers, all of the members enthusiastically tackled their assignments. As a result, they have contributed to a reduction in climate change and the disasters it brings.’\nBui An Bien in Thai Binh province, who took part in the afforestation activities from the beginning of the project, said in joy, ‘Afforestation led to a safe life. Mangroves are a good environment for fish and other types of seafood, so we could start aquafarming.\nMangrove afforestation in Vietnam has been supported by the JRCS for 20 years. The initial target was six northern provinces. It has since been enlarged to ten provinces. The VRCS makes a strong effort to cooperate with the government to promote future support from the government.\n","description":"1. University for Science and Technology of Ha Noi (USTH) Bologna Process 2. Loan project ADB 3. Disaster Prevention Project in Vietnam 1. University for Science and Technology of Ha Noi (USTH) The Bilateral project for Education and Training based on Inter-governmental Agreement between Vietnam and France: \u0026ldquo;Establishment and Development of University for Science and Technology of Ha Noi\u0026rdquo; Bologna Process The Bologna Process is an intergovernmental higher education reform process that includes 49 European countries and a number of European organizations, including EUA."},{"id":60,"href":"/ADS/01/","title":"Introduction to Algorithms and Data Structures","parent":"ADS","content":" Obejctives Obejctives Course objectives:\nProvide basic knowledge about algorithms and data structures. Be able to choose appropriate data structures for a specific problem. Approach different algorithms and solve a problem in informatics. Why study Algorithms?\nMany problems in informatics can be solved by using a computer. want it to go faster? process more data? want it to do something that would otherwise be impossible? Technology improves many aspects but might be costly good algorithmic design can do much better and cheaper super-computers cannot handle bad algorithms Data structure can make the algorithms much simpler, easier to maintain, and often faster ","description":" Obejctives Obejctives Course objectives:\nProvide basic knowledge about algorithms and data structures. Be able to choose appropriate data structures for a specific problem. Approach different algorithms and solve a problem in informatics. Why study Algorithms?\nMany problems in informatics can be solved by using a computer. want it to go faster? process more data? want it to do something that would otherwise be impossible? Technology improves many aspects but might be costly good algorithmic design can do much better and cheaper super-computers cannot handle bad algorithms Data structure can make the algorithms much simpler, easier to maintain, and often faster "},{"id":61,"href":"/ProbStats/Exercises/Midterm2022/","title":"Midterm Exam 2022","parent":"Exercises","content":" Question 1 Question 2 Question 3 Question 1 Find the number of different 7-digit numbers which can be formed from the seven digits: 2, 2, 3, 5, 7, 7, 8 in each of the following cases:\na) Find the probability that the odd digits are together and the even digits are together.\nSolution 🧈 Number of ways to arrange the digits: $\\frac{7!}{2! \\times 2!}$ because there are 2 2’s and 2 7’s. Group the even digits together: 2, 2, 8 Number of ways to arrange the even digits: $\\frac{3!}{2!}$ because there are 2 2’s Group the odd digits together: 5, 3, 7, 7 Number of ways to arrange the odd digits: $\\frac{4!}{2! \\times 2!}$ because there are 2 7’s Number of ways to arrange 2 groups: 2! $\\Rightarrow P(\\text{odd digits together and even digits together}) = 2! \\times \\frac{3!}{2!} \\times \\frac{4!}{2!} \\times (\\frac{7!}{2! \\times 2!})^{-1}$ b) Find the probability that the 2\u0026rsquo;s are not together.\nSolution 🧈 Number of ways to arrange the digits: $\\frac{7!}{2! \\times 2!}$ because there are 2 2’s and 2 7’s. Group the 2’s together: 2, 2 Number of ways to arrange the 2’s: $\\frac{2!}{2!}$ because there are 2 2’s Group the rest of the digits: 5, 3, 7, 7, 8 Number of ways to arrange the rest of the digits: $\\frac{5!}{2!}$ because there are 2 7’s $\\Rightarrow P(\\text{2’s not together}) = 1 - P(\\text{2’s together}) = 1 - \\frac{2!}{2!} \\times \\frac{5!}{2!} \\times (\\frac{7!}{2! \\times 2!})^{-1}$ Question 2 In a game, 3 coins named A, B, and C are tossed simultaneously. Let X be the number of heads obtained, find the $PMF p_x(x)$ if coins A and C are unfair that the prob of getting a head is 0.6 for coin A and 0.4 for coin C.\nSolution 🧈 Coin A: $P(H_A) = 0.6 ; P(T_A) = 0.4$ Coin B: $P(H_B) = 0.5 ; P(T_B) = 0.5$ Coin C: $P(H_C) = 0.4 ; P(T_C) = 0.6$ $P(X = 0) = T_A \\times T_B \\times T_C = 0.4 \\times 0.5 \\times 0.6 = 0.12$ $(X = 1)$: $P(H_A) \\times P(T_B) \\times P(T_C) = 0.6 \\times 0.5 \\times 0.6 = 0.18$ $P(T_A) \\times P(H_B) \\times P(T_C) = 0.4 \\times 0.5 \\times 0.6 = 0.12$ $P(T_A) \\times P(T_B) \\times P(H_C) = 0.4 \\times 0.5 \\times 0.4 = 0.08$ $\\Rightarrow P(X = 1) = 0.18 + 0.12 + 0.08 = 0.38$ $P(X = 2)$: $P(T_A) \\times P(H_B) \\times P(H_C) = 0.4 \\times 0.5 \\times 0.4 = 0.08$ $P(H_A) \\times P(T_B) \\times P(H_C) = 0.6 \\times 0.5 \\times 0.4 = 0.12$ $P(H_A) \\times P(H_B) \\times P(T_C) = 0.6 \\times 0.5 \\times 0.6 = 0.18$ $\\Rightarrow P(X = 2) = 0.08 + 0.12 + 0.18 = 0.38$ $P(X = 3) = H_A \\times H_B \\times H_C = 0.6 \\times 0.5 \\times 0.4 = 0.12$ $\\Rightarrow PMF: p_X(x) = \\begin{cases} 0.06 \\quad \\text{if } x = 0 \\\\ 0.38 \\quad \\text{if } x = 1 \\\\ 0.38 \\quad \\text{if } x = 2 \\\\ 0.12 \\quad \\text{if } x = 3 \\end{cases}$ Question 3 The masses of honeydews are normally distributed with mean 1.5 kg and standard deviation 3.0 kg. The masses of rock melons are normally distributed mean 2.0 kg and standard deviation 4.0kg. Find the probability that 2 honeydews are more than three times as heavy as one rock melon.\n$\\mu_{H} = 1.5, \\sigma_{H} = 3.0$ $\\mu_{R} = 2.0, \\sigma_{R} = 4.0$ Solution 🧈 Let H stands for honeydews and M stands for rock melons, using the formula $X \\sim N(\\mu, \\sigma^2)$ to represent their normal distribution.\n$H \\sim N(1.5, 3.0^2)$ $M \\sim N(2.0, 4.0^2)$ To find $P(H_1 + H_2 \u003e 3R)$\n$P(H_1 + H_2 \u003e 3R) = P(H_1 + H_2 - 3R \u003e 0)$ Let $X = H_1 + H_2 - 3R$ Find the mean and variance of $X$.\n$\\mu_{X} = \\mu_{H} + \\mu_{H} - 3\\mu_{R} = 1.5 + 1.5 - 3 \\times 2.0 = -3$ $\\text{var}(X) = \\text{var}(H_1) + \\text{var}(H_2) + \\text{var}(3R) = 3^2 + 3^2 + (3 \\times 4)^2 = 162$ $\\Rightarrow X \\sim N(-3, 162)$\nLet $Z_{X} = \\frac{X + 3}{\\sqrt{162}}$.\n$\\begin{aligned} P(X\u003e0) \u0026= P(Z_{X}\u003e \\frac{0 + 3}{\\sqrt{162}}) \\\\ \u0026= 1 - P(Z_{X} \u003c \\frac{-3}{\\sqrt{162}}) \\\\ \u0026= 1- \\Phi(\\frac{-3}{\\sqrt{162}}) \\\\ \u0026= 1 - 0.0001 \\\\ \u0026= 0.9999 \\end{aligned}$\n","description":"Question 1 Question 2 Question 3 Question 1 Find the number of different 7-digit numbers which can be formed from the seven digits: 2, 2, 3, 5, 7, 7, 8 in each of the following cases:\na) Find the probability that the odd digits are together and the even digits are together.\nSolution 🧈 Number of ways to arrange the digits: $\\frac{7!}{2! \\times 2!}$ because there are 2 2’s and 2 7’s."},{"id":62,"href":"/OOP/","title":"Object Oriented Programming","parent":"Welcome","content":" About Prof. Nghiem Thi Phuong Table of Contents 01. Introduction to OOP 02. Introduction to Java 03. Objects and Classes 04. Objects and Object References 05. Class members 06. Inheritance and polymorphism 07. Abstraction 08. Interfaces in Java 09. Exceptions 10. Streams and Files Exercises Gen 12 B. Final (2022) ","description":" About Prof. Nghiem Thi Phuong Table of Contents 01. Introduction to OOP 02. Introduction to Java 03. Objects and Classes 04. Objects and Object References 05. Class members 06. Inheritance and polymorphism 07. Abstraction 08. Interfaces in Java 09. Exceptions 10. Streams and Files Exercises Gen 12 B. Final (2022) "},{"id":63,"href":"/OS/","title":"Operating Systems","parent":"Welcome","content":" About Lecturer: Prof. Daniel Hagimont Table of Contents 0. Introduction ","description":" About Lecturer: Prof. Daniel Hagimont Table of Contents 0. Introduction "},{"id":64,"href":"/ProjectManagement/Part1/","title":"Part 1. Project management basics","parent":"Basic principles of project management","content":" Module aim Expected outcomes Module aim Introduction to students about the definition of project, classification of projects and representative projects examples. Familiarize students with legal language; basic concepts, principles and basic knowledge of the project, project management. Introduction to students about research scientific projects: basic research and applied research projects. Expose students to legal reasoning and develop their ability to apply legal concepts in the research fields. This course helps students to improve skills of managing a project such as leadership skills, team building, conflict management, time management\u0026hellip; Expected outcomes After completing the course, students should have:\nBasic knowledge on project: what is a project, project classification and project management basics Basic knowledge of project management from initiating designing, selecting project manager, implementing, time management, controlling and finishing the project. Basic knowledge on scientific research project: Basic scientific research project. Applied scientific research project, analyzing and problem-solving skills to be applied to practical cases. ","description":"Module aim Expected outcomes Module aim Introduction to students about the definition of project, classification of projects and representative projects examples. Familiarize students with legal language; basic concepts, principles and basic knowledge of the project, project management. Introduction to students about research scientific projects: basic research and applied research projects. Expose students to legal reasoning and develop their ability to apply legal concepts in the research fields. This course helps students to improve skills of managing a project such as leadership skills, team building, conflict management, time management\u0026hellip; Expected outcomes After completing the course, students should have:"},{"id":65,"href":"/ProjectManagement/Part2/","title":"Part 2. Project management basics","parent":"Basic principles of project management","content":" I. Values, needs, phases of project management and the steps in managing a project II. The basics phrases of the project management III. Project manager IV. Project organization and team in project management V. Project planning, scheduling, monitoring and controlling VI. Project controlling, project evaluation and termination VII. Concept, definition, and types of research projects I. Values, needs, phases of project management and the steps in managing a project II. The basics phrases of the project management III. Project manager IV. Project organization and team in project management V. Project planning, scheduling, monitoring and controlling VI. Project controlling, project evaluation and termination VII. Concept, definition, and types of research projects ","description":"I. Values, needs, phases of project management and the steps in managing a project II. The basics phrases of the project management III. Project manager IV. Project organization and team in project management V. Project planning, scheduling, monitoring and controlling VI. Project controlling, project evaluation and termination VII. Concept, definition, and types of research projects I. Values, needs, phases of project management and the steps in managing a project II."},{"id":66,"href":"/ProbStats/","title":"Probability and Statistics","parent":"Welcome","content":" About Prof. TRAN Hoang Tung - ICTLab Prof. NGUYEN Minh Huong - ICTLab Prof. NGUYEN Mai Chung - Energy Department\nTeaching Plan Basic probability: 1, 2 Discrete random variables: 3, 4 Continuous random variables: 5, 6, 7 Midterm exam: 8 Limit theorems: 9 Class statistics: 10 References Textbook Bertsekas, Dimitri P., and John N. Tsitsiklis. Introduction to probability. (2008) Spiegel R. M., Schiller J., Srinivasan R. A., Probability and Statistics for Engineers and Scientists, 3rd edition, (2009) Montgomery C. D., Runger G. C., Applied Statistics and Probability for Engineers, 5th edition, John Wiley \u0026amp; Sons, (2011) Bertsekas, Dimitri P., and John N. Tsitsiklis. \u0026ldquo;Introduction to Probability.\u0026rdquo; (2008) Spiegel R. M., Schiller J., Srinivasan R. A., \u0026ldquo;Probability and Statistics\u0026rdquo;, Third edition, McGraw Hill, (2009) Montgomery C. D., Runger C. G., \u0026ldquo;Applied Statistics and Probability for Engineers\u0026rdquo;, Fifth edition, John Wiley and Sons, (2011) Online sources edX course: Probability - The Science of Uncertainty and Data iLectureOnline - Probability \u0026amp; Statistics Table of Contents 1. Basic Probability 1 2. Basic Probability 2 3. Discrete Random Variables 1 4. Discrete Random Variables 2 5. Advanced Topics 6. Limit Theorem Exercises 01. Ex. Basic Prob. 1 02. Ex. Basic Prob. 2 03. Ex. Discrete Uni. Law 04. Ex. Discrete Rand. Var. 05. Ex. Continuous Uni. Law 09. Limit theorem 10. Review Final Exam 2021 Final Exam 2022 Midterm Exam 2022 ","description":"About Prof. TRAN Hoang Tung - ICTLab Prof. NGUYEN Minh Huong - ICTLab Prof. NGUYEN Mai Chung - Energy Department\nTeaching Plan Basic probability: 1, 2 Discrete random variables: 3, 4 Continuous random variables: 5, 6, 7 Midterm exam: 8 Limit theorems: 9 Class statistics: 10 References Textbook Bertsekas, Dimitri P., and John N. Tsitsiklis. Introduction to probability. (2008) Spiegel R. M., Schiller J., Srinivasan R. A., Probability and Statistics for Engineers and Scientists, 3rd edition, (2009) Montgomery C."},{"id":67,"href":"/AlgebraicStructures/Exercises/Retake2020/","title":"Retake 2020","parent":"Exercises","content":" Code 1 Question 1 Solve the following linear equation system where $x,y \\in \\mathbb{Z}_11$:\n$$\\begin{aligned} 2x + 4y \\equiv 3 \\pmod{11} \\\\ 3x - 7y \\equiv 3 \\pmod{11} \\end{aligned}$$\nSpecify your algebra development to justify your answer.\nQuestion 2 Find an example of a cyclic group $U \\subset \\mathbb{Z}_11$. Justify the generator of the cyclic group.\nQuestion 3 Using induction to prove that the following statement is true:\n$a^2 - 1$ is divisible by 8 for all odd and positive integers of a.\nQuestion 4 A binary operation $o$ is defined as following: $$a \\ o \\ b = a + 2b - 1$$ Is the binary commutative? associative? Justify your answer.\nCode 2 Question 1 Solve the following linear equation system where $x,y \\in \\mathbb{Z}_11$:\n$$\\begin{aligned} 2x + 8y \\equiv 3 \\pmod{11} \\\\ 3x - 7y \\equiv 10 \\pmod{11} \\end{aligned}$$\nSpecify your algebra development to justify your answer.\nQuestion 2 Find an example of a cyclic group $U \\subset \\mathbb{Z}_13$. Justify the generator of the cyclic group.\nQuestion 3 Using induction to prove that the following statement is true for all positive integers $n$:\n$$\\sum_{k=1}^{n} k^2 = \\frac{(n+1)n^2}{4}$$\nQuestion 4 A function $f$ is defined by $f$: $\\mathbb{Z}_8 \\rightarrow \\mathbb{Z}_11$\n$$f(x) = 3x (mod 12)$$\nIs the function homomorphic? isomorphic? Justify your answer.\n","description":"Code 1 Question 1 Solve the following linear equation system where $x,y \\in \\mathbb{Z}_11$:\n$$\\begin{aligned} 2x + 4y \\equiv 3 \\pmod{11} \\\\ 3x - 7y \\equiv 3 \\pmod{11} \\end{aligned}$$\nSpecify your algebra development to justify your answer.\nQuestion 2 Find an example of a cyclic group $U \\subset \\mathbb{Z}_11$. Justify the generator of the cyclic group.\nQuestion 3 Using induction to prove that the following statement is true:\n$a^2 - 1$ is divisible by 8 for all odd and positive integers of a."},{"id":68,"href":"/SignalSystem/","title":"Signals and Systems","parent":"Welcome","content":" About Lecturer: Prof. Tran Hoang Tung - ICTLab TA: Le Nhu Chu Hiep - ICTLab Table of Contents 1. Signals 2. System 3. Discrete Linear Time-Invariant Systems 4. Continuous Linear Time-Invariant (LTI) System 5. Fourier Series Representation of Continuous-time Periodic Signals 6. Fourier Series Representation of Discrete-time Periodic Signals Exercises 1. Signal 2. System 3. LTI [] 4. LTI () 5. Fourier Series () 6. Fourier Series [] Gen 11 A. Midterm (2021) Gen 11 B. Final (2022) Gen 11 C. Retake (2022) Gen 12 A. Midterm (2022) Gen 12 B. Final (2022) ","description":"About Lecturer: Prof. Tran Hoang Tung - ICTLab TA: Le Nhu Chu Hiep - ICTLab Table of Contents 1. Signals 2. System 3. Discrete Linear Time-Invariant Systems 4. Continuous Linear Time-Invariant (LTI) System 5. Fourier Series Representation of Continuous-time Periodic Signals 6. Fourier Series Representation of Discrete-time Periodic Signals Exercises 1. Signal 2. System 3. LTI [] 4. LTI () 5. Fourier Series () 6. Fourier Series [] Gen 11 A."},{"id":69,"href":"/tags/","title":"Tags","parent":"Welcome","content":"","description":""},{"id":70,"href":"/","title":"Welcome","parent":"","content":" Hanoi of University of Science and Technology of Hanoi This is where I store my re-written lectures and exercises. I hope you find them useful. If you have any questions, please feel expensive to contact me. I am not always happy to help.\nTable of Contents ADS Introduction to Algorithms and Data Structures Algebraic Structures 1. Introduction to Algebraic Structures 2. Groups 3. Mapping and functions Exercises 01. Ex. Groups Retake 2020 Basic principles of project management Part 1. Project management basics I. Introduction into projects II. Classification of projects III. Representative project examples Part 2. Project management basics Fundamentals of Databases 1. Overview Object Oriented Programming 01. Introduction to OOP 02. Introduction to Java 03. Objects and Classes 04. Objects and Object References 05. Class members 06. Inheritance and polymorphism 07. Abstraction 08. Interfaces in Java 09. Exceptions 10. Streams and Files Exercises Gen 12 B. Final (2022) Operating Systems 0. Introduction Probability and Statistics 1. Basic Probability 1 2. Basic Probability 2 3. Discrete Random Variables 1 4. Discrete Random Variables 2 5. Advanced Topics 6. Limit Theorem Exercises 01. Ex. Basic Prob. 1 02. Ex. Basic Prob. 2 03. Ex. Discrete Uni. Law 04. Ex. Discrete Rand. Var. 05. Ex. Continuous Uni. Law 09. Limit theorem 10. Review Final Exam 2021 Final Exam 2022 Midterm Exam 2022 Signals and Systems 1. Signals 2. System 3. Discrete Linear Time-Invariant Systems 4. Continuous Linear Time-Invariant (LTI) System 5. Fourier Series Representation of Continuous-time Periodic Signals 6. Fourier Series Representation of Discrete-time Periodic Signals Exercises 1. Signal 2. System 3. LTI [] 4. LTI () 5. Fourier Series () 6. Fourier Series [] Gen 11 A. Midterm (2021) Gen 11 B. Final (2022) Gen 11 C. Retake (2022) Gen 12 A. Midterm (2022) Gen 12 B. Final (2022) ","description":"Hanoi of University of Science and Technology of Hanoi This is where I store my re-written lectures and exercises. I hope you find them useful. If you have any questions, please feel expensive to contact me. I am not always happy to help.\nTable of Contents ADS Introduction to Algorithms and Data Structures Algebraic Structures 1. Introduction to Algebraic Structures 2. Groups 3. Mapping and functions Exercises 01. Ex. Groups Retake 2020 Basic principles of project management Part 1."}]